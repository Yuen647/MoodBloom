<file path="moodbloom_springboot/moodbloom/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="moodbloom_springboot/moodbloom/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>sheerio.moodbloom</groupId>
	<artifactId>moodbloom</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>moodbloom</name>
	<description>A mood tracking application</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>


		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<version>4.9.3</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20230227</version> <!-- 使用最新版本 -->
		</dependency>



	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/AppConfig.java">
package sheerio.moodbloom.moodbloom.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/CorsConfig.java">
package sheerio.moodbloom.moodbloom.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // 允许所有路径
                .allowedOrigins(
                        "http://localhost:8080",
                        "https://124.222.156.13", // 你服务器的公网IP
                        "https://yuen.club" // 你服务器的域名
                ) // 允许多个来源的跨域请求
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // 允许的HTTP方法
                .allowedHeaders("*") // 允许所有头部
                .allowCredentials(true) // 允许携带凭证（如Cookies）
                .maxAge(3600); // 预检请求的缓存时间，单位为秒
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/TextRequest.java">
package sheerio.moodbloom.moodbloom.config;

public class TextRequest {
    private String text;

    // Getter 和 Setter
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/HomeController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/speech")
    public String speechRecognition() {
        return "speechRecognition";  // 对应 templates/speechRecognition.html
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/LocationController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.service.LocationService;
import sheerio.moodbloom.moodbloom.service.UserService;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/location")
@CrossOrigin(origins = "http://127.0.0.1:5501")  // 允许从该前端地址访问
public class LocationController {

    @Autowired
    private LocationService locationService;

    @Autowired
    private UserService userService;

    // 接收前端的POST请求，保存位置信息到数据库
    @PostMapping("/save")
    public ResponseEntity<Location> saveLocation(@RequestBody Location location, @RequestParam Integer userId) {
        // 根据 userId 获取 User 实体
        User user = userService.findById(userId);

        if (user == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);  // 如果 userId 无效，返回 404
        }

        // 将 User 设置到 Location 中
        location.setUser(user);

        // 调用服务层保存位置信息
        Location savedLocation = locationService.saveLocation(location);

        // 返回保存后的位置信息
        return new ResponseEntity<>(savedLocation, HttpStatus.CREATED);
    }

    @GetMapping("/current")
    public ResponseEntity<?> getLatestLocation(@RequestParam("userId") Integer userId) {
        try {
            // 通过用户ID获取最新的位置信息
            Optional<Location> locationOpt = locationService.getLatestLocationByUserId(userId);
            Map<String, Object> result = new HashMap<>();

            if (locationOpt.isPresent()) {
                Location location = locationOpt.get();
                result.put("location", location);  // 将位置信息放入返回结果中
                return ResponseEntity.ok(result);
            } else {
                return ResponseEntity.status(404).body("用户ID " + userId + " 没有找到位置信息");
            }
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }



}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/ModelResponseController.java">
package sheerio.moodbloom.moodbloom.controller;

import sheerio.moodbloom.moodbloom.service.ModelResponseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/model-response")
public class ModelResponseController {

    @Autowired
    private ModelResponseService modelResponseService;

    @GetMapping("/send/{moodRecordId}")
    public String sendModelResponse(@PathVariable Integer moodRecordId) {
        return modelResponseService.sendToModelAndSaveResponse(moodRecordId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodAnalysisController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.config.TextRequest;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;
import sheerio.moodbloom.moodbloom.service.MoodAnalysisService;

@RestController
@RequestMapping("/api/mood")
public class MoodAnalysisController {
    private final MoodAnalysisService moodAnalysisService;

    public MoodAnalysisController(MoodAnalysisService moodAnalysisService) {
        this.moodAnalysisService = moodAnalysisService;
    }

    // 修改为使用 @RequestBody 接收 JSON 格式的请求
    @PostMapping("/analyze")
    public ResponseEntity<MoodAnalysis> analyzeMood(@RequestBody TextRequest textRequest) {
        try {
            MoodAnalysis result = moodAnalysisService.analyzeMood(textRequest.getText());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).build();
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodRecordController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;
import sheerio.moodbloom.moodbloom.service.MoodRecordService;
import sheerio.moodbloom.moodbloom.service.ModelResponseService;
import sheerio.moodbloom.moodbloom.service.UploadImageService;

import java.time.LocalDate;
import java.util.*;

@RestController
@RequestMapping("/api/mood")
public class MoodRecordController {

    @Autowired
    private MoodRecordService moodRecordService;

    @Autowired
    private ModelResponseService modelResponseService;

    @Autowired
    private UploadImageService uploadImageService;

    // 新增心情记录并支持图片上传
    @PostMapping("/add")
    public ResponseEntity<?> addMoodRecord(@RequestParam("userId") Integer userId,
                                           @RequestParam(value = "moodText", required = false) String moodText,
                                           @RequestParam(value = "images", required = false) MultipartFile[] images) {
        try {
            MoodRecord moodRecord = new MoodRecord();
            moodRecord.setMoodText(moodText);

            // 添加心情记录，并处理图片上传
            MoodRecord newMoodRecord = moodRecordService.addMoodRecord(moodRecord, userId, images);

            // 调用 AI 模型生成回复
            String aiResponse = modelResponseService.sendToModelAndSaveResponse(newMoodRecord.getId());

            // 返回心情记录和 AI 回复
            Map<String, Object> result = new HashMap<>();
            result.put("moodRecord", newMoodRecord);
            result.put("aiResponse", aiResponse);

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }


    // 查询指定用户的所有心情记录及其对应的AI回复
    @GetMapping("/all")
    public ResponseEntity<?> getAllMoodRecords(@RequestParam("userId") Integer userId,
                                               @RequestParam(value = "view", defaultValue = "both") String view) {
        try {
            List<MoodRecord> moodRecords = moodRecordService.getMoodRecordsByUserId(userId);
            Map<String, Object> result = new HashMap<>();

            if (view.equals("mood")) {
                result.put("moodRecords", moodRecords);
            } else {
                Map<Integer, String> aiResponses = new HashMap<>();
                for (MoodRecord moodRecord : moodRecords) {
                    ModelResponse modelResponse = modelResponseService.getResponseByMoodRecordId(moodRecord.getId());
                    String aiResponse = modelResponse != null ? modelResponse.getResponseText() : "AI 回复不存在";
                    aiResponses.put(moodRecord.getId(), aiResponse);
                }
                result.put("moodRecords", moodRecords);
                result.put("aiResponses", aiResponses);
            }

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }

    @GetMapping("/byDate")
    public ResponseEntity<?> getMoodRecordsByDate(
            @RequestParam("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @RequestParam("userId") Integer userId,
            @RequestParam(value = "includeAIResponses", required = false) Boolean includeAIResponses) {
        try {
            // 查询特定日期和用户的心情记录
            List<MoodRecord> moodRecords = moodRecordService.getMoodRecordsByDateAndUserId(date, userId);

            // 创建一个新的列表，用来存放心情记录、AI回复和图片URLs
            List<Map<String, Object>> moodRecordsWithDetails = new ArrayList<>();

            for (MoodRecord moodRecord : moodRecords) {
                Map<String, Object> moodDetails = new HashMap<>();
                moodDetails.put("moodRecord", moodRecord);

                // 获取与心情记录关联的图片URLs
                List<String> imageUrls = new ArrayList<>();
                if (moodRecord.getImages() != null) {
                    for (UploadImage image : moodRecord.getImages()) {
                        imageUrls.add(image.getImageUrl());
                    }
                }
                moodDetails.put("imageUrls", imageUrls);

                // 获取对应的AI回复
                if (Boolean.TRUE.equals(includeAIResponses)) {
                    ModelResponse modelResponse = modelResponseService.getResponseByMoodRecordId(moodRecord.getId());
                    String aiResponse = modelResponse != null ? modelResponse.getResponseText() : "AI 回复不存在";
                    moodDetails.put("aiResponse", aiResponse);
                }

                moodRecordsWithDetails.add(moodDetails);
            }

            // 返回心情记录和AI回复及图片URLs
            return ResponseEntity.ok(moodRecordsWithDetails);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }


    // 根据用户ID和记录ID删除心情记录
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deleteMoodRecord(@PathVariable Integer id, @RequestParam("userId") Integer userId) {
        try {
            boolean isDeleted = moodRecordService.deleteMoodRecordByIdAndUserId(id, userId);
            if (isDeleted) {
                return ResponseEntity.noContent().build();
            } else {
                return ResponseEntity.status(403).body("Not authorized to delete this record.");
            }
        } catch (Exception e) {
            return ResponseEntity.status(404).body("Error: " + e.getMessage());
        }
    }

    // 获取指定心情记录的图片
    @GetMapping("/images/{moodRecordId}")
    public ResponseEntity<?> getImagesByMoodRecordId(@PathVariable Integer moodRecordId) {
        try {
            // 获取与心情记录关联的图片
            List<UploadImage> images = uploadImageService.getImagesByMoodRecordId(moodRecordId);
            if (images.isEmpty()) {
                return ResponseEntity.ok("No images found for this mood record.");
            }

            // 返回图片的 URL 列表
            List<String> imageUrls = new ArrayList<>();
            for (UploadImage image : images) {
                imageUrls.add(image.getImageUrl());
            }

            return ResponseEntity.ok(imageUrls);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/NewsController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.News;
import sheerio.moodbloom.moodbloom.service.NewsService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/news")
public class NewsController {

    @Autowired
    private NewsService newsService;


    //从API获取今日7条新闻并保存到数据库
    @GetMapping("/fetch")
    public ResponseEntity<String> fetchNews() {
        try {
            newsService.fetchAndSaveNews();
            return ResponseEntity.ok("新闻数据已成功获取并保存到数据库。");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("获取新闻数据时发生错误：" + e.getMessage());
        }
    }

    // 获取最新的7条新闻
    @GetMapping("/latest")
    public ResponseEntity<List<News>> getLatestNews() {
        try {
            List<News> latestNews = newsService.getLatestNews();
            return ResponseEntity.ok(latestNews);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/SoupQuotesController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;
import sheerio.moodbloom.moodbloom.dao.Interface.SoupQuotesRepository;
import sheerio.moodbloom.moodbloom.service.SoupQuotesService;

import java.util.List;

@RestController
@RequestMapping("/api/soup-quotes")
public class SoupQuotesController {

    @Autowired
    private SoupQuotesService soupQuotesService;

    @Autowired
    private SoupQuotesRepository soupQuotesRepository;

    // 获取并保存心灵鸡汤语录
    @PostMapping("/fetch")
    public String fetchAndSaveQuote() {
        soupQuotesService.fetchAndSaveQuote();
        return "心灵鸡汤语录已成功获取并保存!";
    }

    // 获取数据库中所有心灵鸡汤语录
    @GetMapping("/all")
    public List<SoupQuotes> getAllQuotes() {
        return soupQuotesRepository.findAll();
    }

    // 根据ID获取特定的心灵鸡汤语录
    @GetMapping("/{id}")
    public SoupQuotes getQuoteById(@PathVariable Integer id) {
        return soupQuotesRepository.findById(id).orElse(null);
    }

    // 获取最新的心灵鸡汤语录
    @GetMapping("/latest")
    public SoupQuotes getLatestQuote() {
        return soupQuotesRepository.findLatestQuote();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/TextToImageController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.service.TextToImageService;
import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/api/txt2img")
public class TextToImageController {

    private final TextToImageService textToImageService;

    public TextToImageController(TextToImageService textToImageService) {
        this.textToImageService = textToImageService;
    }

    @PostMapping("/generate")
    public ResponseEntity<String> generateImage(@RequestBody Map<String, String> request) {
        String text = request.get("text");
        if (text == null || text.isEmpty()) {
            return ResponseEntity.badRequest().body("Text cannot be null or empty");
        }

        try {
            // Step 1: 生成图片的UID
            String uid = textToImageService.generateImageUid(text);

            // Step 2: 使用带轮询机制的方法获取图片链接
            String imageLink = textToImageService.getImageLinkWithPolling(uid);

            // 返回图片链接
            return ResponseEntity.ok(imageLink);
        } catch (IOException | InterruptedException e) {
            return ResponseEntity.status(500).body("Error generating image: " + e.getMessage());
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/UserController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.service.UserService;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody Map<String, String> userDTO) {
        String username = userDTO.get("username");
        String password = userDTO.get("password");
        String email = userDTO.get("email");

        System.out.println("Attempting to register user with username: " + username + " and email: " + email);

        try {
            User user = userService.registerUser(username, password, email);
            Map<String, Object> response = new HashMap<>();
            response.put("id", user.getId());
            response.put("username", user.getUsername());
            response.put("email", user.getEmail());
            response.put("createdAt", user.getCreatedAt());
            System.out.println("User registered successfully: " + user.getUsername());
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            System.out.println("Registration error: " + e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }


    // 用户登录接口
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody Map<String, String> loginDTO) {
        String username = loginDTO.get("username");
        String password = loginDTO.get("password");

        try {
            User user = userService.loginUser(username, password);
            // 构建单独的响应结构，直接返回 userId 等字段
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Login successful");
            response.put("userId", user.getId());
            response.put("username", user.getUsername());
            response.put("email", user.getEmail());
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/WeatherController.java">
package sheerio.moodbloom.moodbloom.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;
import sheerio.moodbloom.moodbloom.dao.Interface.LocationRepository ;
import sheerio.moodbloom.moodbloom.service.LocationService;
import sheerio.moodbloom.moodbloom.service.WeatherService;
import sheerio.moodbloom.moodbloom.dao.Interface.WeatherInfoRepository;

import java.io.IOException;
import java.util.Optional;

@RestController
@RequestMapping("/api/weather")
public class WeatherController {

    @Autowired
    private WeatherService weatherService;

    @Autowired
    private LocationRepository locationRepository;

    @Autowired
    private WeatherInfoRepository weatherInfoRepository;

    @Autowired
    private LocationService locationService;

    // 获取指定 Location 的天气信息
    @GetMapping("/fetch/{locationId}")
    public ResponseEntity<?> fetchWeatherForLocation(@PathVariable Integer locationId) {
        // 查找 Location 实体
        Optional<Location> locationOpt = locationRepository.findById(locationId);

        if (locationOpt.isPresent()) {
            Location location = locationOpt.get();

            try {
                // 调用 WeatherService 获取天气信息并保存到数据库
                WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);
                return ResponseEntity.ok(weatherInfo);  // 返回天气信息
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(500).body("Error fetching weather: " + e.getMessage());
            }
        } else {
            return ResponseEntity.status(404).body("Location not found with id: " + locationId);
        }
    }

    // 获取当前用户最新位置的天气信息
    @GetMapping("/current")
    public ResponseEntity<?> fetchWeatherForCurrentUser(@RequestParam("userId") Integer userId) {
        // 获取当前用户的最新位置信息
        Optional<Location> locationOpt = locationService.getLatestLocationByUserId(userId);

        if (locationOpt.isPresent()) {
            Location location = locationOpt.get();

            try {
                // 调用 WeatherService 获取天气信息
                WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);
                return ResponseEntity.ok(weatherInfo);  // 返回天气信息
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(500).body("Error fetching weather: " + e.getMessage());
            }
        } else {
            return ResponseEntity.status(404).body("No location found for user ID: " + userId);
        }
    }

    // 返回所有的天气信息
    @GetMapping("/all")
    public ResponseEntity<?> getAllWeatherInfo() {
        return ResponseEntity.ok(weatherInfoRepository.findAll());
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/LocationRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import java.util.Optional;

public interface LocationRepository extends JpaRepository<Location, Integer> {

    // 获取最近保存的位置信息
    Optional<Location> findTopByOrderByIdDesc();

    Optional<Location> findTopByUserIdOrderByIdDesc(Integer userId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/ModelResponseRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;

@Repository
public interface ModelResponseRepository extends JpaRepository<ModelResponse,Integer> {
    ModelResponse findByMoodRecordId(Integer moodRecordId);

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodAnalysisRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;

@Repository
public interface MoodAnalysisRepository extends JpaRepository<MoodAnalysis, Integer> {

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodRecordRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;
import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.User;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface MoodRecordRepository extends JpaRepository<MoodRecord, Integer> {
    List<MoodRecord> findByUserId(Integer userId);
    List<MoodRecord> findByUserIdAndRecordTimeBetween(Integer userId, LocalDateTime startOfDay, LocalDateTime endOfDay);
    MoodRecord findByIdAndUserId(Integer id, Integer userId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/NewsRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.News;

import java.util.List;
import java.util.Optional;

@Repository
public interface NewsRepository extends JpaRepository<News, Long> {
    // 自定义方法，根据uniquekey查找新闻
    Optional<News> findByUniquekey(String uniquekey);

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/SoupQuotesRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;

public interface SoupQuotesRepository extends JpaRepository<SoupQuotes, Integer> {
    //获取最新的语录
    @Query(value = "SELECT * FROM soup_quotes ORDER BY record_date DESC LIMIT 1", nativeQuery = true)
    SoupQuotes findLatestQuote();
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UploadImageRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;

import java.util.List;


@Repository
public interface UploadImageRepository extends JpaRepository<UploadImage, Integer> {
    List<UploadImage> findByMoodRecord(MoodRecord moodRecord);

    // 根据心情记录ID查询图片
    List<UploadImage> findByMoodRecordId(Integer moodRecordId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UserRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.User;



public interface UserRepository extends JpaRepository<User, Integer> {
    User findByUsername(String username);
    User findByEmail(String email);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/WeatherInfoRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;

import java.util.List;

@Repository
public interface WeatherInfoRepository extends JpaRepository<WeatherInfo, Integer> {

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/Location.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;

@Entity
@Table(name = "location")
public class Location {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "location_msg", length = 255)
    private String location_msg;

    @Column(name = "lonlat", length = 255)
    private String lonlat;

    // 添加外键关联 user_id
    @ManyToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    private User user;

    // Getters and Setters

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocation_msg() {
        return location_msg;
    }

    public void setLocation_msg(String location_msg) {
        this.location_msg = location_msg;
    }

    public String getLonlat() {
        return lonlat;
    }

    public void setLonlat(String lonlat) {
        this.lonlat = lonlat;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/ModelResponse.java">
package sheerio.moodbloom.moodbloom.dao.model;
import java.time.LocalDateTime;
import jakarta.persistence.*;


@Entity
@Table(name = "model_response")
public class ModelResponse {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer responseId;

    @ManyToOne
    @JoinColumn(name = "input_id", referencedColumnName = "id",nullable = false)
    private MoodRecord moodRecord;

    @Column(name = "response_text", columnDefinition = "TEXT")
    private String responseText;

    @Column(name = "response_time", nullable = false)
    private LocalDateTime responseTime;

    public Integer getResponseId() {
        return responseId;
    }

    public void setResponseId(Integer responseId) {
        this.responseId = responseId;
    }

    public MoodRecord getMoodRecord() {
        return moodRecord;
    }

    public void setMoodRecord(MoodRecord moodRecord) {
        this.moodRecord = moodRecord;
    }

    public String getResponseText() {
        return responseText;
    }

    public void setResponseText(String responseText) {
        this.responseText = responseText;
    }

    public LocalDateTime getResponseTime() {
        return responseTime;
    }

    public void setResponseTime(LocalDateTime responseTime) {
        this.responseTime = responseTime;
    }


}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodAnalysis.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "mood_analysis")
public class MoodAnalysis {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "sentiment", nullable = false)
    private Byte sentiment;

    @Column(name = "confidence", precision = 5, scale = 4)
    private BigDecimal confidence;

    @Column(name = "positive_prob", precision = 5, scale = 4)
    private BigDecimal positiveProb;

    @Column(name = "negative_prob", precision = 5, scale = 4)
    private BigDecimal negativeProb;



    // Getters and Setters

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Byte getSentiment() {
        return sentiment;
    }

    public void setSentiment(Byte sentiment) {
        this.sentiment = sentiment;
    }

    public BigDecimal getConfidence() {
        return confidence;
    }

    public void setConfidence(BigDecimal confidence) {
        this.confidence = confidence;
    }

    public BigDecimal getPositiveProb() {
        return positiveProb;
    }

    public void setPositiveProb(BigDecimal positiveProb) {
        this.positiveProb = positiveProb;
    }

    public BigDecimal getNegativeProb() {
        return negativeProb;
    }

    public void setNegativeProb(BigDecimal negativeProb) {
        this.negativeProb = negativeProb;
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodRecord.java">
package sheerio.moodbloom.moodbloom.dao.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "mood_record")
public class MoodRecord {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "mood_text", nullable = false)
    private String moodText;

    @Column(name = "record_time", nullable = false)
    private LocalDateTime recordTime;

    @ManyToOne
    @JoinColumn(name = "location_id", referencedColumnName = "id", nullable = true)
    private Location location;

    @ManyToOne
    @JoinColumn(name = "weather_id", referencedColumnName = "id", nullable = true)
    private WeatherInfo weatherInfo;

    @ManyToOne
    @JoinColumn(name = "analysis_id", referencedColumnName = "id", nullable = true)
    private MoodAnalysis moodAnalysis;

    // 关联到 User 实体，表示 user_id 是外键
    @ManyToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false)
    private User user;


    @OneToMany(mappedBy = "moodRecord", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties("moodRecord") // 防止递归引用
    private List<UploadImage> images = new ArrayList<>();


    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getMoodText() {
        return moodText;
    }

    public void setMoodText(String moodText) {
        this.moodText = moodText;
    }

    public LocalDateTime getRecordTime() {
        return recordTime;
    }

    public void setRecordTime(LocalDateTime recordTime) {
        this.recordTime = recordTime;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public WeatherInfo getWeatherInfo() {
        return weatherInfo;
    }

    public void setWeatherInfo(WeatherInfo weatherInfo) {
        this.weatherInfo = weatherInfo;
    }

    public MoodAnalysis getMoodAnalysis() {
        return moodAnalysis;
    }

    public void setMoodAnalysis(MoodAnalysis moodAnalysis) {
        this.moodAnalysis = moodAnalysis;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<UploadImage> getImages() {
        return images;
    }

    public void setImages(List<UploadImage> images) {
        this.images = images;
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/News.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.Date;

@Entity
public class News {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String uniquekey;  // 新闻的唯一标识符

    @Column(nullable = false)
    private String title;      // 新闻标题

    @Column(nullable = false)
    private String url;        // 新闻链接

    private String category;   // 新闻类别

    private String authorName; // 作者名称

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date date;         // 新闻发布时间

    private String thumbnailPicS;   // 缩略图1的URL

    private String thumbnailPicS02; // 缩略图2的URL

    private String thumbnailPicS03; // 缩略图3的URL

    @Column(nullable = false)
    private boolean isContent;  // 是否有详细内容

    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt = new Date(); // 记录创建时间

    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt = new Date(); // 记录更新时间

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUniquekey() {
        return uniquekey;
    }

    public void setUniquekey(String uniquekey) {
        this.uniquekey = uniquekey;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getAuthorName() {
        return authorName;
    }

    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getThumbnailPicS() {
        return thumbnailPicS;
    }

    public void setThumbnailPicS(String thumbnailPicS) {
        this.thumbnailPicS = thumbnailPicS;
    }

    public String getThumbnailPicS02() {
        return thumbnailPicS02;
    }

    public void setThumbnailPicS02(String thumbnailPicS02) {
        this.thumbnailPicS02 = thumbnailPicS02;
    }

    public String getThumbnailPicS03() {
        return thumbnailPicS03;
    }

    public void setThumbnailPicS03(String thumbnailPicS03) {
        this.thumbnailPicS03 = thumbnailPicS03;
    }

    public boolean getIsContent() {
        return isContent;
    }

    public void setIsContent(boolean isContent) {
        this.isContent = isContent;
    }

    public Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    public Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/SoupQuotes.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
@Table(name = "soup_quotes")
public class SoupQuotes {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "text", nullable = false, columnDefinition = "TEXT")
    private String text;

    @Column(name = "record_date", nullable = false)
    private LocalDateTime recordDate;

    // Getter and Setter methods
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public LocalDateTime getRecordDate() {
        return recordDate;
    }

    public void setRecordDate(LocalDateTime recordDate) {
        this.recordDate = recordDate;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/UploadImage.java">
package sheerio.moodbloom.moodbloom.dao.model;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "images")
public class UploadImage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    // 存储图片的文件路径或URL
    @Column(name = "image_url", nullable = false)
    private String imageUrl;

    // 图片上传时间
    @Column(name = "upload_time", nullable = false)
    private LocalDateTime uploadTime;

    // 关联到 MoodRecord 实体，表示 mood_record_id 是外键
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mood_record_id", referencedColumnName = "id", nullable = false)
    @JsonIgnoreProperties("images")
    private MoodRecord moodRecord;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public LocalDateTime getUploadTime() {
        return uploadTime;
    }

    public void setUploadTime(LocalDateTime uploadTime) {
        this.uploadTime = uploadTime;
    }

    public MoodRecord getMoodRecord() {
        return moodRecord;
    }

    public void setMoodRecord(MoodRecord moodRecord) {
        this.moodRecord = moodRecord;
    }


}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/User.java">
package sheerio.moodbloom.moodbloom.dao.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "username", unique = true, nullable = false, length = 50)
    private String username;

    @Column(name = "password", nullable = false, length = 255)
    private String password;

    @Column(name = "email", unique = true, nullable = false, length = 100)
    private String email;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    // 一对多关联，User 和 MoodRecord 之间的关系
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<MoodRecord> moodRecords;


    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public List<MoodRecord> getMoodRecords() {
        return moodRecords;
    }

    public void setMoodRecords(List<MoodRecord> moodRecords) {
        this.moodRecords = moodRecords;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/WeatherInfo.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "weather_info")
public class WeatherInfo {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "text", length = 50)
    private String text;

    @Column(name = "temp")
    private Double temp;

    @Column(name = "detail", length = 255)
    private String detail;

    // 这里引用 location_id
    @ManyToOne
    @JoinColumn(name = "location_id", referencedColumnName = "id")
    private Location location;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Double getTemp() {
        return temp;
    }

    public void setTemp(Double temp) {
        this.temp = temp;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/MoodbloomApplication.java">
package sheerio.moodbloom.moodbloom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class MoodbloomApplication {

	public static void main(String[] args) {
		SpringApplication.run(MoodbloomApplication.class, args);
	}

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/LocationService.java">
package sheerio.moodbloom.moodbloom.service;

import sheerio.moodbloom.moodbloom.dao.model.Location;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.LocationRepository;

import java.util.Optional;

@Service
public class LocationService {

    @Autowired
    private LocationRepository locationRepository;

    // 保存位置信息的方法
    public Location saveLocation(Location location) {
        return locationRepository.save(location);
    }

    // 获取最近保存的位置信息
    public Optional<Location> getLatestLocation() {
        return locationRepository.findTopByOrderByIdDesc();
    }

    // 获取指定用户的最近位置信息
    public Optional<Location> getLatestLocationByUserId(Integer userId) {
        return locationRepository.findTopByUserIdOrderByIdDesc(userId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ModelResponseService.java">
package sheerio.moodbloom.moodbloom.service;

import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.Interface.ModelResponseRepository;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpMethod;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ModelResponseService {

    @Autowired
    private MoodRecordRepository moodRecordRepository;

    @Autowired
    private ModelResponseRepository modelResponseRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 文件中注入配置
    @Value("${chatglm-api.url}")
    private String apiUrl;

    @Value("${chatglm-api.key}")
    private String apiKey;

    @Value("${chatglm-api.model}")
    private String modelName;

    private List<Map<String, String>> chatHistory = new ArrayList<>();

    // 调用 AI 模型生成回复并保存
    public String sendToModelAndSaveResponse(Integer moodRecordId) {
        // 获取 MoodRecord 中的 mood_text
        MoodRecord moodRecord = moodRecordRepository.findById(moodRecordId)
                .orElseThrow(() -> new RuntimeException("MoodRecord not found"));
        String moodText = moodRecord.getMoodText();

        // 创建用户输入消息
        Map<String, String> userMessage = new HashMap<>();
        userMessage.put("role", "user");
        userMessage.put("content", moodText);

        // 添加到聊天历史记录
        chatHistory.add(userMessage);

        // 准备请求体
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", modelName);
        requestBody.put("messages", chatHistory);

        // 设置请求头
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + apiKey);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        try {
            // 调用 API
            ResponseEntity<String> response = restTemplate.exchange(apiUrl, HttpMethod.POST, request, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                String responseBody = response.getBody();

                // 解析响应
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseObject = objectMapper.readTree(responseBody);
                JsonNode choices = responseObject.path("choices");

                if (choices.isArray() && choices.size() > 0) {
                    JsonNode message = choices.get(0).path("message");
                    String assistantMessage = message.path("content").asText();

                    // 将助手的消息添加到聊天历史
                    Map<String, String> assistantResponse = new HashMap<>();
                    assistantResponse.put("role", "assistant");
                    assistantResponse.put("content", assistantMessage);
                    chatHistory.add(assistantResponse);

                    // 创建 ModelResponse 实体并保存到数据库
                    ModelResponse modelResponse = new ModelResponse();
                    modelResponse.setMoodRecord(moodRecord);
                    modelResponse.setResponseText(assistantMessage);
                    modelResponse.setResponseTime(LocalDateTime.now());

                    modelResponseRepository.save(modelResponse);

                    return assistantMessage;
                } else {
                    return "响应解析失败，未找到消息内容。";
                }
            } else {
                return "API 请求失败，状态码：" + response.getStatusCode();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "调用 API 时发生错误：" + e.getMessage();
        }
    }

    // 根据 MoodRecord ID 获取对应的 AI 回复
    public ModelResponse getResponseByMoodRecordId(Integer moodRecordId) {
        return modelResponseRepository.findByMoodRecordId(moodRecordId);
    }

    // 获取所有 ModelResponse 记录
    public List<ModelResponse> getAllModelResponses() {
        return modelResponseRepository.findAll();
    }

    // 根据回复 ID 删除 AI 回复
    public void deleteModelResponseById(Integer responseId) {
        modelResponseRepository.deleteById(responseId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodAnalysisService.java">
package sheerio.moodbloom.moodbloom.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodAnalysisRepository;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;

import java.io.IOException;
import java.math.BigDecimal;

@Service
public class MoodAnalysisService {

    private final RestTemplate restTemplate;
    private final MoodAnalysisRepository moodAnalysisRepository;
    private final ObjectMapper objectMapper;

    @Value("${baidu.nlp.api-url}")
    private String apiUrl;

    @Value("${baidu.nlp.access-token}")
    private String accessToken;

    public MoodAnalysisService(RestTemplate restTemplate, MoodAnalysisRepository moodAnalysisRepository, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.moodAnalysisRepository = moodAnalysisRepository;
        this.objectMapper = objectMapper;
    }

    public MoodAnalysis analyzeMood(String text) throws Exception {
        // 构建请求
        String requestUrl = apiUrl + "?access_token=" + accessToken;
        String requestBody = "{\"text\":\"" + text + "\"}";

        // 发送请求
        String response = restTemplate.postForObject(requestUrl, requestBody, String.class);

        // 解析响应
        JsonNode root = objectMapper.readTree(response);
        JsonNode items = root.path("items").get(0);

        // 获取情感分析结果
        Byte sentiment = (byte) items.path("sentiment").asInt();
        BigDecimal confidence = BigDecimal.valueOf(items.path("confidence").asDouble());
        BigDecimal positiveProb = BigDecimal.valueOf(items.path("positive_prob").asDouble());
        BigDecimal negativeProb = BigDecimal.valueOf(items.path("negative_prob").asDouble());

        // 保存结果到数据库
        MoodAnalysis moodAnalysis = new MoodAnalysis();
        moodAnalysis.setSentiment(sentiment);
        moodAnalysis.setConfidence(confidence);
        moodAnalysis.setPositiveProb(positiveProb);
        moodAnalysis.setNegativeProb(negativeProb);

        return moodAnalysisRepository.save(moodAnalysis);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodRecordService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodRecordRepository;
import sheerio.moodbloom.moodbloom.dao.Interface.UploadImageRepository;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@Service
public class MoodRecordService {

    @Autowired
    private MoodRecordRepository moodRecordRepository;

    @Autowired
    private UploadImageRepository uploadImageRepository;

    @Autowired
    private LocationService locationService;

    @Autowired
    private WeatherService weatherService;

    @Autowired
    private MoodAnalysisService moodAnalysisService;

    // 从配置文件中读取图片存储路径
    @Value("${file.upload-dir}")
    private String uploadDir;

    // 创建心情记录时自动获取位置信息、天气信息并调用情感分析，同时处理多张图片上传
    public MoodRecord addMoodRecord(MoodRecord moodRecord, Integer userId, MultipartFile[] images) throws Exception {
        // 关联用户ID到心情记录
        User user = new User();
        user.setId(userId);
        moodRecord.setUser(user);

        // 检查是否有提供位置信息
        Location location = moodRecord.getLocation();

        // 如果没有提供位置信息，从数据库中获取最近的位置信息
        if (location == null) {
            Optional<Location> latestLocation = locationService.getLatestLocation();
            if (latestLocation.isPresent()) {
                location = latestLocation.get();
            } else {
                throw new Exception("No location information available.");
            }
        }

        // 获取天气信息
        WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);

        // 将位置信息和天气信息关联到心情记录
        moodRecord.setLocation(location);
        moodRecord.setWeatherInfo(weatherInfo);

        // 如果 moodText 为空，则自动填充占位符
        if (moodRecord.getMoodText() == null || moodRecord.getMoodText().trim().isEmpty()) {
            moodRecord.setMoodText("拍拍照~");
        }

        // 调用情感分析服务获取情感分析结果
        MoodAnalysis moodAnalysis = moodAnalysisService.analyzeMood(moodRecord.getMoodText());

        // 将情感分析结果关联到心情记录
        moodRecord.setMoodAnalysis(moodAnalysis);

        // 设置记录时间为当前时间
        moodRecord.setRecordTime(LocalDateTime.now());

        // 保存心情记录
        MoodRecord savedMoodRecord = moodRecordRepository.save(moodRecord);

        // 如果有上传的图片，逐一保存图片
        if (images != null && images.length > 0) {
            for (MultipartFile image : images) {
                if (!image.isEmpty()) {
                    String imageUrl = saveImage(image);  // 保存图片并返回其URL
                    UploadImage uploadImage = new UploadImage();
                    uploadImage.setImageUrl(imageUrl);
                    uploadImage.setUploadTime(LocalDateTime.now());
                    uploadImage.setMoodRecord(savedMoodRecord);

                    // 保存图片记录到数据库
                    uploadImageRepository.save(uploadImage);
                    savedMoodRecord.getImages().add(uploadImage);  // 将图片关联到心情记录
                    System.out.println("Image URL saved to database: " + imageUrl);
                }
            }
        }

        // 返回保存的心情记录
        return savedMoodRecord;
    }

    // 保存图片到配置的上传目录，并返回图片的 URL 路径
    public String saveImage(MultipartFile image) throws IOException {
        // 获取文件名
        String fileName = image.getOriginalFilename();
        // 生成保存图片的完整路径
        String imagePath = uploadDir + "/" + fileName;
        File file = new File(imagePath);

        // 创建目录如果不存在
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
            System.out.println("Directory created: " + file.getParentFile().getAbsolutePath());
        }

        // 将文件保存到指定路径
        image.transferTo(file);
        System.out.println("Image saved to: " + imagePath);

        // 返回浏览器可以访问的 URL 路径
        return "/images/" + fileName;
    }


    // 获取指定用户的所有心情记录
    public List<MoodRecord> getMoodRecordsByUserId(Integer userId) {
        return moodRecordRepository.findByUserId(userId);
    }

    // 根据用户ID和记录ID删除心情记录
    public boolean deleteMoodRecordByIdAndUserId(Integer recordId, Integer userId) throws Exception {
        MoodRecord record = moodRecordRepository.findByIdAndUserId(recordId, userId);
        if (record != null) {
            moodRecordRepository.delete(record);
            return true;
        } else {
            throw new Exception("Mood record not found or user not authorized.");
        }
    }

    // 按日期查询指定用户的心情记录
    public List<MoodRecord> getMoodRecordsByDateAndUserId(LocalDate date, Integer userId) {
        LocalDateTime startOfDay = date.atStartOfDay();
        LocalDateTime endOfDay = date.atTime(LocalTime.MAX);
        return moodRecordRepository.findByUserIdAndRecordTimeBetween(userId, startOfDay, endOfDay);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/NewsService.java">
package sheerio.moodbloom.moodbloom.service;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.Interface.NewsRepository;
import sheerio.moodbloom.moodbloom.dao.model.News;

import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class NewsService {

    @Autowired
    private NewsRepository newsRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 读取 API 的相关配置信息
    @Value("${news.api.key}")
    private String apiKey;

    @Value("${news.api.url}")
    private String apiUrl;

    @Value("${news.api.type}")
    private String apiType;

    @Value("${news.api.page}")
    private int apiPage;

    @Value("${news.api.page_size}")
    private int apiPageSize;

    @Value("${news.api.is_filter}")
    private int isFilter;

    // 从 API 获取新闻并保存到数据库
    public void fetchAndSaveNews() {
        // 构建 API URL
        String apiRequestUrl = String.format("%s?type=%s&page=%d&page_size=%d&is_filter=%d&key=%s",
                apiUrl, apiType, apiPage, apiPageSize, isFilter, apiKey);

        // 调用 API 获取新闻数据
        String response = restTemplate.getForObject(apiRequestUrl, String.class);

        // 解析返回的 JSON 数据
        JSONObject jsonObject = new JSONObject(response);
        if (!jsonObject.has("result")) {
            // 错误处理：API 返回结果不包含新闻数据
            return;
        }

        JSONArray newsArray = jsonObject.getJSONObject("result").getJSONArray("data");

        // 遍历新闻数据并保存到数据库
        for (int i = 0; i < newsArray.length(); i++) {
            JSONObject newsItem = newsArray.getJSONObject(i);

            // 检查新闻是否已经存在于数据库中
            Optional<News> existingNews = newsRepository.findByUniquekey(newsItem.getString("uniquekey"));

            if (!existingNews.isPresent()) {
                // 如果新闻不存在，保存新新闻
                News news = new News();
                news.setUniquekey(newsItem.getString("uniquekey"));
                news.setTitle(newsItem.getString("title"));
                news.setUrl(newsItem.getString("url"));
                news.setCategory(newsItem.optString("category", "未分类"));
                news.setAuthorName(newsItem.optString("author_name", "未知"));
                news.setDate(new Date());  // 使用当前时间，或根据需求修改为 API 返回的时间
                news.setThumbnailPicS(newsItem.optString("thumbnail_pic_s", ""));
                news.setThumbnailPicS02(newsItem.optString("thumbnail_pic_s02", ""));
                news.setThumbnailPicS03(newsItem.optString("thumbnail_pic_s03", ""));
                news.setIsContent(newsItem.optInt("is_content", 0) == 1);

                // 保存新闻到数据库
                newsRepository.save(news);
            }
        }
    }

    // 获取最新的7条新闻
    public List<News> getLatestNews() {
        // 按照日期降序排列，获取前7条记录
        return newsRepository.findAll(
                PageRequest.of(0, 7, Sort.by(Sort.Direction.DESC, "date"))).getContent();
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ScheduledTasks.java">
package sheerio.moodbloom.moodbloom.service;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ScheduledTasks {

    @Autowired
    private SoupQuotesService soupQuotesService;

    // 使用cron表达式配置任务每小时执行一次，表达式："0 0 * * * ?"
    @Scheduled(cron = "0 0 * * * ?")
    public void fetchSoupQuote() {
        // 调用SoupQuotesService的API获取和保存数据的方法
        soupQuotesService.fetchAndSaveQuote();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/SoupQuotesService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;
import sheerio.moodbloom.moodbloom.dao.Interface.SoupQuotesRepository;

import java.time.LocalDateTime;
import java.util.Map;

@Service
public class SoupQuotesService {

    @Autowired
    private SoupQuotesRepository soupQuotesRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 读取 API 的相关配置信息
    @Value("${soup-quotes.api.url}")
    private String apiUrl;

    @Value("${soup-quotes.api.key}")
    private String apiKey;

    // 调用 API 并保存鸡汤语录
    public void fetchAndSaveQuote() {
        // 构建 API URL
        String apiRequestUrl = String.format("%s?key=%s", apiUrl, apiKey);

        // 调用 API
        Map<String, Object> response = restTemplate.getForObject(apiRequestUrl, Map.class);

        // 解析 API 响应
        if (response != null && "success".equals(response.get("reason"))) {
            Map<String, String> result = (Map<String, String>) response.get("result");
            String quoteText = result.get("text");

            // 创建新的 SoupQuotes 实体
            SoupQuotes soupQuote = new SoupQuotes();
            soupQuote.setText(quoteText);
            soupQuote.setRecordDate(LocalDateTime.now());

            // 保存到数据库
            soupQuotesRepository.save(soupQuote);
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/TextToImageService.java">
package sheerio.moodbloom.moodbloom.service;

import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

@Service
public class TextToImageService {

    private final OkHttpClient okHttpClient = new OkHttpClient().newBuilder().build();
    private final ObjectMapper objectMapper = new ObjectMapper();  // 创建 Jackson ObjectMapper 实例

    @Value("${pic.space.token}")
    private String apiToken;

    @Value("${pic.txt2img.url}")
    private String txt2ImgUrl;

    @Value("${pic.query.image.url}")
    private String queryImageUrl;

    // Step 1: 调用API生成图片，返回uid
    public String generateImageUid(String text) throws IOException {
        // 构造请求体，包含用户提供的文本
        String jsonBody = String.format("{\"task\":\"txt2img.sd\",\"params\":{\"model\":\"anime\",\"text\":\"%s\"}}", text);
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonBody);

        // 构造请求，发送 POST 请求生成图片
        Request request = new Request.Builder()
                .url(txt2ImgUrl)
                .post(body)
                .addHeader("X-APISpace-Token", apiToken)
                .addHeader("Content-Type", "application/json")
                .build();

        // 执行请求并获取响应
        Response response = okHttpClient.newCall(request).execute();
        if (!response.isSuccessful()) {
            throw new IOException("Error generating image UID: " + response);
        }

        // 解析 JSON 响应并提取 UID
        String responseBody = response.body() != null ? response.body().string() : null;
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        return jsonNode.get("data").get("uid").asText();  // 返回生成的 UID
    }

    // Step 2: 根据uid查询图片链接
    public String getImageLink(String uid) throws IOException {
        String jsonBody = String.format("{\"uid\":\"%s\"}", uid);
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonBody);

        Request request = new Request.Builder()
                .url(queryImageUrl)
                .post(body)
                .addHeader("X-APISpace-Token", apiToken)
                .addHeader("Content-Type", "application/json")
                .build();

        try (Response response = okHttpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("Error querying image link: " + response);
            }

            // 读取并保存响应体
            String responseBody = response.body() != null ? response.body().string() : null;
            System.out.println("Image Link Response: " + responseBody);

            return responseBody;
        }
    }


    public String getImageLinkWithPolling(String uid) throws IOException, InterruptedException {
        int retries = 100;  // 最大重试次数
        int interval = 2000;  // 每次重试间隔 2 秒

        for (int i = 0; i < retries; i++) {
            String responseBody = getImageLink(uid);

            // 打印调试信息，检查完整的 API 响应
            System.out.println("Full API Response: " + responseBody);

            if (responseBody == null || responseBody.isEmpty()) {
                System.out.println("Empty or null response body.");
                throw new IOException("Received empty response body from API.");
            }

            // 解析返回的JSON
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(responseBody);

            // 检查是否存在 "data" 节点
            JsonNode dataNode = jsonNode.get("data");
            if (dataNode == null) {
                System.out.println("No 'data' field in the response.");
                throw new IOException("No 'data' field in the response");
            }

            // 获取 "status" 节点
            String status = dataNode.get("status").asText();
            System.out.println("Image generation status: " + status);

            // 如果状态为 "finished"，获取图片链接
            if ("finished".equals(status)) {
                String cdn = dataNode.get("cdn").asText();  // 获取图片链接
                if (cdn != null && !cdn.isEmpty()) {
                    return cdn;  // 返回图片链接
                } else {
                    throw new IOException("Image link (cdn) is empty or null.");
                }
            }

            // 如果状态不是 "finished"，等待一段时间后重试
            System.out.println("Image generation in progress, retrying in " + (interval / 1000) + " seconds...");
            Thread.sleep(interval);  // 等待后重试
        }

        throw new IOException("Failed to get image link after retries");
    }





}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UploadImageService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.UploadImageRepository;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;

import java.util.List;

@Service
public class UploadImageService {

    @Autowired
    private UploadImageRepository uploadImageRepository;

    // 根据心情记录ID获取图片
    public List<UploadImage> getImagesByMoodRecordId(Integer moodRecordId) {
        return uploadImageRepository.findByMoodRecordId(moodRecordId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UserService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.UserRepository;
import sheerio.moodbloom.moodbloom.dao.model.User;

import java.time.LocalDateTime;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    // 注册用户
    public User registerUser(String username, String password, String email) {
        // 检查是否用户名或邮箱已经存在
        if (userRepository.findByUsername(username) != null) {
            throw new IllegalArgumentException("Username already exists");
        }
        if (userRepository.findByEmail(email) != null) {
            throw new IllegalArgumentException("Email already exists");
        }

        // 创建新用户对象
        User user = new User();
        user.setUsername(username);
        user.setPassword(password);
        user.setEmail(email);
        user.setCreatedAt(LocalDateTime.now());

        // 保存新用户到数据库，并返回保存后的用户对象
        return userRepository.save(user);
    }

    // 登录用户
    public User loginUser(String username, String password) {
        User user = userRepository.findByUsername(username);
        // 校验用户名和密码
        if (user == null || !user.getPassword().equals(password)) {
            throw new IllegalArgumentException("Invalid username or password");
        }
        return user;
    }
    // 根据ID查找用户
    public User findById(Integer id) {
        return userRepository.findById(id).orElse(null);  // 使用 JpaRepository 提供的 findById 方法
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/WeatherService.java">
package sheerio.moodbloom.moodbloom.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;
import sheerio.moodbloom.moodbloom.dao.Interface.WeatherInfoRepository;

import java.io.IOException;

@Service
public class WeatherService {

    @Value("${weather-api.key}") // 从 application.yml 中读取 API key
    private String apiKey;

    @Value("${weather-api.base-url}") // 从 application.yml 中读取 API URL
    private String baseUrl;

    private final OkHttpClient client = new OkHttpClient().newBuilder().build();
    private final ObjectMapper objectMapper = new ObjectMapper(); // Jackson 用于解析 JSON

    @Autowired
    private WeatherInfoRepository weatherInfoRepository;

    // 获取并保存天气信息
    public WeatherInfo fetchWeatherInfo(Location location) throws IOException {
        String lonlat = location.getLonlat();  // 获取经纬度

        // 构建API请求URL
        String url = baseUrl + "?lonlat=" + lonlat;

        // 构建请求
        Request request = new Request.Builder()
                .url(url)
                .addHeader("X-APISpace-Token", apiKey)
                .build();

        // 发送请求
        Response response = client.newCall(request).execute();

        if (response.isSuccessful() && response.body() != null) {
            String responseBody = response.body().string();

            // 使用 Jackson 解析 JSON 响应
            JsonNode rootNode = objectMapper.readTree(responseBody);
            JsonNode resultNode = rootNode.path("result").path("realtime");

            // 提取 "text", "temp", "detail" 字段
            String text = resultNode.path("text").asText();
            Double temp = resultNode.path("temp").asDouble();
            String detail = resultNode.path("detail").asText();

            // 创建并保存 WeatherInfo
            WeatherInfo weatherInfo = new WeatherInfo();
            weatherInfo.setLocation(location);
            weatherInfo.setText(text);
            weatherInfo.setTemp(temp);
            weatherInfo.setDetail(detail);

            return weatherInfoRepository.save(weatherInfo);
        } else {
            throw new IOException("Failed to fetch weather info: " + response.message());
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/resources/application.yml">
spring:
  application:
    name: moodbloom

  datasource:
    url: jdbc:mysql://localhost:3306/moodbloom_db?characterEncoding=utf-8
    username: root
    password: Led647716
#  datasource:
#    url: jdbc:mysql://124.222.156.13:3306/moodbloom_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#    username: share
#    password: '#Led647716'
#    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  security:
    user:
      name: 1
      password: 1

  servlet:
    multipart:
      max-file-size: 100MB    # 单个文件最大大小
      max-request-size: 500MB # 总请求大小

server:
  port: 8800
  forward-headers-strategy: framework

jackson:
  serialization:
    indent_output: true

baidu:
  nlp:
    api-url: https://aip.baidubce.com/rpc/2.0/nlp/v1/sentiment_classify
    access-token: 24.ec6c793f644f73ebc430e234b9050eff.2592000.1729571332.282335-115644524

weather-api:
  key: zda6e38ivoov0cbjx607oh12l3ddeh7b
  base-url: https://eolink.o.apispace.com/456456/weather/v001/now

chatglm-api:
  url: https://open.bigmodel.cn/api/paas/v4/chat/completions
  key: f9990643faa52cb57ab08c1ee3a498cc.db2kUmJw19Ccjfff
  model: glm-4

soup-quotes:
  api:
    key: c08415d16aae86f01f2b02157dd3ec7f
    url: https://apis.juhe.cn/fapig/soup/query


news:
  api:
    key: f32188420603a20434462e0c48bd82ac
    url: http://v.juhe.cn/toutiao/index
    type: top
    page: 1
    page_size: 7
    is_filter: 1

pic:
  space:
    token: zda6e38ivoov0cbjx607oh12l3ddeh7b
  txt2img:
    url: https://23329.o.apispace.com/aigc/txt2img
  query:
    image:
      url: https://23329.o.apispace.com/aigc/query-image


logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicTypeDescriptor: TRACE
      springframework:
        security: DEBUG

file:
  upload-dir: /home/lighthouse/images/
</file>

<file path="moodbloom_springboot/moodbloom/src/test/java/sheerio/moodbloom/moodbloom/MoodbloomApplicationTests.java">
package sheerio.moodbloom.moodbloom;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class MoodbloomApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="moodbloom_springboot/moodbloom/target/classes/application.yml">
spring:
  application:
    name: moodbloom

  datasource:
    url: jdbc:mysql://localhost:3306/moodbloom_db?characterEncoding=utf-8
    username: root
    password: Led647716
#  datasource:
#    url: jdbc:mysql://124.222.156.13:3306/moodbloom_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#    username: share
#    password: '#Led647716'
#    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  security:
    user:
      name: 1
      password: 1

  servlet:
    multipart:
      max-file-size: 100MB    # 单个文件最大大小
      max-request-size: 500MB # 总请求大小

server:
  port: 8800
  forward-headers-strategy: framework

jackson:
  serialization:
    indent_output: true

baidu:
  nlp:
    api-url: https://aip.baidubce.com/rpc/2.0/nlp/v1/sentiment_classify
    access-token: 24.ec6c793f644f73ebc430e234b9050eff.2592000.1729571332.282335-115644524

weather-api:
  key: zda6e38ivoov0cbjx607oh12l3ddeh7b
  base-url: https://eolink.o.apispace.com/456456/weather/v001/now

chatglm-api:
  url: https://open.bigmodel.cn/api/paas/v4/chat/completions
  key: f9990643faa52cb57ab08c1ee3a498cc.db2kUmJw19Ccjfff
  model: glm-4

soup-quotes:
  api:
    key: c08415d16aae86f01f2b02157dd3ec7f
    url: https://apis.juhe.cn/fapig/soup/query


news:
  api:
    key: f32188420603a20434462e0c48bd82ac
    url: http://v.juhe.cn/toutiao/index
    type: top
    page: 1
    page_size: 7
    is_filter: 1

pic:
  space:
    token: zda6e38ivoov0cbjx607oh12l3ddeh7b
  txt2img:
    url: https://23329.o.apispace.com/aigc/txt2img
  query:
    image:
      url: https://23329.o.apispace.com/aigc/query-image


logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicTypeDescriptor: TRACE
      springframework:
        security: DEBUG

file:
  upload-dir: /home/lighthouse/images/
</file>



