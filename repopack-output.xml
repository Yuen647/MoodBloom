This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-10T02:59:00.473Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
LICENSE
moodbloom_db.sql
moodbloom_springboot/moodbloom/.idea/compiler.xml
moodbloom_springboot/moodbloom/.idea/encodings.xml
moodbloom_springboot/moodbloom/.idea/jarRepositories.xml
moodbloom_springboot/moodbloom/.idea/misc.xml
moodbloom_springboot/moodbloom/.idea/workspace.xml
moodbloom_springboot/moodbloom/.mvn/wrapper/maven-wrapper.properties
moodbloom_springboot/moodbloom/pom.xml
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/AppConfig.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/CorsConfig.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/TextRequest.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/HomeController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/LocationController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/ModelResponseController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodAnalysisController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodRecordController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/NewsController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/SoupQuotesController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/TextToImageController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/UserController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/WeatherController.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/LocationRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/ModelResponseRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodAnalysisRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodRecordRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/NewsRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/SoupQuotesRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UploadImageRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UserRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/WeatherInfoRepository.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/Location.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/ModelResponse.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodAnalysis.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodRecord.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/News.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/SoupQuotes.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/UploadImage.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/User.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/WeatherInfo.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/MoodbloomApplication.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/LocationService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ModelResponseService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodAnalysisService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodRecordService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/NewsService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ScheduledTasks.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/SoupQuotesService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/TextToImageService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UploadImageService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UserService.java
moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/WeatherService.java
moodbloom_springboot/moodbloom/src/main/resources/application.yml
moodbloom_springboot/moodbloom/src/test/java/sheerio/moodbloom/moodbloom/MoodbloomApplicationTests.java
moodbloom_springboot/moodbloom/target/classes/application.yml
moodbloom_springboot/moodbloom/target/maven-archiver/pom.properties
moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst
moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst
moodbloom_vue/.gitignore
moodbloom_vue/babel.config.js
moodbloom_vue/jsconfig.json
moodbloom_vue/package.json
moodbloom_vue/public/index.html
moodbloom_vue/README.md
moodbloom_vue/src/App.vue
moodbloom_vue/src/components/CalendarNav.vue
moodbloom_vue/src/components/LocationMap.vue
moodbloom_vue/src/config.js
moodbloom_vue/src/main.js
moodbloom_vue/src/router/index.js
moodbloom_vue/src/views/HomePage.vue
moodbloom_vue/src/views/LoginAndRegister.vue
moodbloom_vue/src/views/NewsPage.vue
moodbloom_vue/src/views/RecordMood.vue
moodbloom_vue/src/views/ViewMood.vue
moodbloom_vue/vue.config.js
README.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="moodbloom_db.sql">
-- MySQL dump 10.13  Distrib 9.0.1, for Win64 (x86_64)
--
-- Host: localhost    Database: moodbloom_db
-- ------------------------------------------------------
-- Server version	9.0.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `images`
--

DROP TABLE IF EXISTS `images`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `images` (
  `id` int NOT NULL AUTO_INCREMENT,
  `image_url` varchar(255) NOT NULL,
  `upload_time` datetime NOT NULL,
  `mood_record_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `mood_record_id` (`mood_record_id`),
  CONSTRAINT `images_ibfk_1` FOREIGN KEY (`mood_record_id`) REFERENCES `mood_record` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `images`
--

LOCK TABLES `images` WRITE;
/*!40000 ALTER TABLE `images` DISABLE KEYS */;
INSERT INTO `images` VALUES (4,'/images/HelloWorld.png','2024-10-01 14:10:09',162),(5,'/images/微信图片_20230912212946.jpg','2024-10-01 14:11:10',163),(6,'/images/微信图片_20240607121848.jpg','2024-10-01 15:24:36',166),(7,'/images/1.png','2024-10-01 16:48:43',179),(8,'/images/1.png','2024-10-01 16:50:29',180),(9,'/images/2.png','2024-10-01 16:50:29',180),(10,'/images/3.jpg','2024-10-01 16:50:29',180),(11,'/images/屏幕截图 2024-07-10 154716.png','2024-10-01 16:58:26',182),(12,'/images/屏幕截图 2024-09-28 163307.png','2024-10-01 17:00:11',184),(13,'/images/屏幕截图 2024-09-28 164853.png','2024-10-01 17:00:38',185),(14,'/images/屏幕截图 2024-09-28 181233.png','2024-10-01 17:00:38',185),(15,'/images/屏幕截图 2024-10-01 144530.png','2024-10-01 17:00:58',186),(16,'/images/屏幕截图 2024-09-30 160954.png','2024-10-01 17:00:58',186),(17,'/images/屏幕截图 2024-09-30 155251.png','2024-10-01 17:00:58',186),(18,'/images/屏幕截图 2024-07-09 191255 - 副本.png','2024-10-01 17:01:58',187);
/*!40000 ALTER TABLE `images` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `location`
--

DROP TABLE IF EXISTS `location`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `location` (
  `id` int NOT NULL AUTO_INCREMENT,
  `location_msg` varchar(255) DEFAULT NULL,
  `lonlat` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `adcode` (`lonlat`),
  KEY `fk_user_id_new` (`user_id`),
  CONSTRAINT `fk_user_id_new` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=535 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `location`
--

LOCK TABLES `location` WRITE;
/*!40000 ALTER TABLE `location` DISABLE KEYS */;
INSERT INTO `location` VALUES (15,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(16,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285281',NULL),(17,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(18,'广东省深圳市南山区桃源街道十五峰花园','113.981874, 22.564389',NULL),(19,'上海市浦东新区','121.4737,31.2304',NULL),(20,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(21,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(22,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213862, 31.285793',NULL),(23,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213805, 31.285782',NULL),(24,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(25,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(26,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(27,'北京市海淀区清华园街道清华大学','116.321173, 40.001199',NULL),(28,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',NULL),(29,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',NULL),(30,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(31,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.215862, 31.285377',6),(32,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(33,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(34,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(35,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(36,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(37,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(38,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(39,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217745, 31.285294',5),(40,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(41,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(42,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(43,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217762, 31.285272',5),(44,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(45,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(46,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(47,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(48,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(49,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(50,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217745, 31.285296',5),(51,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(52,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(53,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(54,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(55,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217749, 31.285295',5),(56,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285296',5),(57,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.285294',5),(58,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217751, 31.285298',5),(59,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217751, 31.285298',5),(60,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(61,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(62,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285273',5),(63,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285273',5),(64,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(65,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285273',5),(66,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(67,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(68,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(69,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(70,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(71,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217763, 31.285276',5),(72,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217763, 31.285279',5),(73,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(74,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(75,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(76,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(77,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(78,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(79,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(80,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(81,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(82,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(83,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(84,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217746, 31.285294',5),(85,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(86,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(87,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(88,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(89,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(90,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(91,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(92,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217757, 31.285279',5),(93,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217757, 31.285279',5),(94,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217757, 31.285279',5),(95,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217757, 31.285279',5),(96,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(97,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(98,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(99,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(100,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285281',5),(101,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285281',5),(102,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(103,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(104,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(105,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(106,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(107,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(108,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(109,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285278',5),(110,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(111,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21776, 31.285285',5),(112,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285293',5),(113,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285293',5),(114,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285293',5),(115,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(116,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(117,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(118,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(119,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(120,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(121,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(122,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(123,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(124,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(125,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(126,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217763, 31.285277',5),(127,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217763, 31.285277',5),(128,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217763, 31.285277',5),(129,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(130,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(131,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(132,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',5),(133,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(134,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(135,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(136,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217749, 31.285294',6),(137,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213754, 31.285845',6),(138,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213754, 31.285845',6),(139,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213842, 31.285802',6),(140,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213842, 31.285802',6),(141,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213842, 31.285802',6),(142,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213799, 31.285812',6),(143,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(144,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(145,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(146,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(147,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(148,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213856, 31.285807',6),(149,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213856, 31.285807',6),(150,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(151,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(152,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213817, 31.28581',6),(153,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213817, 31.28581',6),(154,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213817, 31.28581',6),(155,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213817, 31.28581',6),(156,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213892, 31.285783',6),(157,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(158,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(159,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(160,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(161,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(162,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(163,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213835, 31.285804',6),(164,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213835, 31.285804',6),(165,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21383, 31.285804',6),(166,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(167,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(168,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213844, 31.285803',6),(169,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213844, 31.285803',6),(170,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213844, 31.285803',6),(171,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213844, 31.285803',6),(172,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21378, 31.285815',6),(173,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21378, 31.285815',6),(174,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21378, 31.285815',6),(175,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(176,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213796, 31.285813',6),(177,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213796, 31.285813',6),(178,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213796, 31.285813',6),(179,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21381, 31.285804',6),(180,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21381, 31.285804',6),(181,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21381, 31.285804',6),(182,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21381, 31.285804',6),(183,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21381, 31.285804',6),(184,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(185,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213869, 31.285787',6),(186,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213869, 31.285787',6),(187,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213869, 31.285787',6),(188,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213868, 31.285788',6),(189,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213868, 31.285788',6),(190,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213868, 31.285788',6),(191,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(192,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(193,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(194,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(195,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(196,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(197,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(198,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(199,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(200,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(201,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(202,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(203,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(204,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(205,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(206,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213829, 31.285812',6),(207,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(208,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(209,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(210,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(211,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(212,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(213,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21383, 31.285801',6),(214,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21383, 31.285801',6),(215,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21383, 31.285801',6),(216,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21383, 31.285801',6),(217,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(218,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(219,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(220,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(221,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(222,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(223,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(224,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(225,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213804, 31.285807',6),(226,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213804, 31.285807',6),(227,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213804, 31.285807',6),(228,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213804, 31.285807',6),(229,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213815, 31.285809',6),(230,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(231,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(232,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(233,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(234,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(235,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(236,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213822, 31.285809',6),(237,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213822, 31.285809',6),(238,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213865, 31.285795',6),(239,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(240,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(241,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213812, 31.285804',6),(242,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213812, 31.285804',6),(243,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(244,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(245,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(246,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(247,'上海市闵行区吴泾镇上海交通大学闵行校区南洋北苑(北门)','121.436266, 31.035894',6),(248,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.285804',6),(249,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.285804',6),(250,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.285804',6),(251,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.285804',6),(252,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.285804',6),(253,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213823, 31.285818',6),(254,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213823, 31.285818',6),(255,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213823, 31.285818',6),(256,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213823, 31.285818',6),(257,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(258,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(259,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(260,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(261,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(262,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(263,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(264,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(265,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(266,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(267,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(268,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(269,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(270,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285804',6),(271,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285804',6),(272,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285804',6),(273,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285804',6),(274,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(275,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(276,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(277,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(278,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213833, 31.2858',6),(279,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213833, 31.2858',6),(280,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213833, 31.2858',6),(281,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(282,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(283,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21385, 31.285797',6),(284,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21385, 31.285797',6),(285,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(286,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(287,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(288,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(289,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(290,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(291,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(292,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(293,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(294,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21379, 31.28581',6),(295,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.21379, 31.28581',6),(296,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(297,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285808',6),(298,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213825, 31.285808',6),(299,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(300,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(301,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(302,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(303,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.2858',6),(304,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.2858',6),(305,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.2858',6),(306,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.2858',6),(307,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213858, 31.2858',6),(308,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(309,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213796, 31.28582',6),(310,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(311,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213792, 31.285808',6),(312,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213792, 31.285808',6),(313,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(314,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(315,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213798, 31.285812',6),(316,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213798, 31.285812',6),(317,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213798, 31.285812',6),(318,'上海市闵行区颛桥镇都会路188号上海东华高压均质机厂','121.432995, 31.035897',6),(319,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213837, 31.285798',6),(320,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213837, 31.285798',6),(321,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213837, 31.285798',6),(322,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213837, 31.285798',6),(323,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213819, 31.28581',6),(324,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(325,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(326,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(327,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(328,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(329,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(330,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(331,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(332,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(333,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(334,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(335,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(336,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(337,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213801, 31.285804',6),(338,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213801, 31.285804',6),(339,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213801, 31.285804',6),(340,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213801, 31.285804',6),(341,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213818, 31.285817',6),(342,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(343,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(344,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(345,'广东省深圳市福田区福田街道皇岗新村皇岗新村二期','114.059648, 22.520186',6),(346,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217769, 31.285285',6),(347,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285282',6),(348,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285282',6),(349,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.28528',6),(350,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213732, 31.285808',6),(351,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213732, 31.285808',6),(352,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213736, 31.285821',6),(353,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(354,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(355,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(356,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(357,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(358,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(359,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(360,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(361,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(362,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(363,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(364,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(365,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区济事楼','121.213811, 31.282093',6),(366,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区济事楼','121.213811, 31.282093',6),(367,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区济事楼','121.213811, 31.282093',6),(368,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区济事楼','121.213811, 31.282093',6),(369,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213761, 31.285828',6),(370,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(371,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285848',6),(372,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285848',6),(373,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(374,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(375,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(376,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(377,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(378,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(379,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213741, 31.285843',6),(380,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213741, 31.285843',6),(381,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213741, 31.285843',6),(382,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213741, 31.285843',6),(383,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(384,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213739, 31.285848',6),(385,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213739, 31.285848',6),(386,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(387,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(388,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(389,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(390,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(391,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(392,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(393,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.285839',6),(394,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.285839',6),(395,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.285839',6),(396,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.285839',6),(397,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213748, 31.28585',6),(398,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',7),(399,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(400,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(401,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(402,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(403,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(404,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213748, 31.285848',6),(405,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213748, 31.285848',6),(406,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213748, 31.285848',6),(407,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',6),(408,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(409,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(410,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(411,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(412,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(413,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(414,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(415,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(416,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(417,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(418,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213748, 31.285842',5),(419,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(420,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(421,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(422,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213755, 31.285842',5),(423,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.28585',5),(424,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213752, 31.28585',5),(425,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(426,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(427,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(428,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(429,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(430,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(431,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(432,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(433,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(434,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(435,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(436,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213745, 31.285852',5),(437,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213745, 31.285852',5),(438,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213745, 31.285852',5),(439,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213745, 31.285852',5),(440,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(441,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(442,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(443,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(444,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(445,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285851',5),(446,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',8),(447,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213742, 31.285848',8),(448,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213742, 31.285848',8),(449,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213742, 31.285848',8),(450,'上海市嘉定区安亭镇同济大学嘉定校区同济大学嘉定校区安楼','121.213743, 31.285845',5),(451,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(452,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(453,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(454,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',5),(455,'广东省深圳市南山区粤海街道桃园路3688号杜鹃山(不对外开放)','113.935274, 22.530284',9),(456,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.2853',5),(457,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.2853',5),(458,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217743, 31.285296',5),(459,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217744, 31.285294',5),(460,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(461,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(462,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(463,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(464,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(465,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(466,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',5),(467,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217746, 31.285296',5),(468,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217746, 31.285296',5),(469,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217753, 31.285301',5),(470,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217753, 31.285301',5),(471,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217753, 31.285301',5),(472,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(473,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(474,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(475,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(476,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(477,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(478,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217766, 31.285282',6),(479,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217759, 31.285288',6),(480,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217759, 31.285288',6),(481,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217759, 31.285288',6),(482,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(483,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.285297',6),(484,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.285297',6),(485,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(486,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(487,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(488,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217757, 31.285285',6),(489,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(490,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(491,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217755, 31.285281',6),(492,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(493,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217742, 31.285299',6),(494,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217742, 31.285299',6),(495,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217742, 31.285299',6),(496,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217744, 31.28529',6),(497,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217744, 31.28529',6),(498,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(499,'广东省东莞市南城街道石竹路5号瑧湾汇(建设中)','113.756989, 23.017953',6),(500,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.285293',6),(501,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(502,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(503,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285281',6),(504,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285281',6),(505,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217752, 31.285291',6),(506,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217752, 31.285291',6),(507,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217755, 31.285286',6),(508,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217755, 31.285286',6),(509,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217755, 31.285286',5),(510,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217755, 31.285286',5),(511,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',5),(512,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(513,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285301',6),(514,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285301',6),(515,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285301',6),(516,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.21775, 31.285301',6),(517,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217761, 31.285296',6),(518,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(519,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217748, 31.285296',6),(520,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(521,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(522,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(523,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(524,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(525,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217758, 31.285274',6),(526,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217747, 31.285299',6),(527,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(528,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(529,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(530,'甘肃省兰州市榆中县小康营乡潘家庄','104.198088, 35.861464',6),(531,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217762, 31.285276',6),(532,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217748, 31.285294',6),(533,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217748, 31.285294',6),(534,'上海市嘉定区安亭镇同济大学嘉定校区同济大学(嘉定校区)','121.217759, 31.285277',6);
/*!40000 ALTER TABLE `location` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `model_response`
--

DROP TABLE IF EXISTS `model_response`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `model_response` (
  `response_id` int NOT NULL AUTO_INCREMENT,
  `input_id` int NOT NULL,
  `response_text` text,
  `response_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`response_id`),
  KEY `input_id` (`input_id`),
  CONSTRAINT `model_response_ibfk_1` FOREIGN KEY (`input_id`) REFERENCES `mood_record` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `model_response`
--

LOCK TABLES `model_response` WRITE;
/*!40000 ALTER TABLE `model_response` DISABLE KEYS */;
INSERT INTO `model_response` VALUES (6,125,'听起来你今天过得很愉快，这真是太好了！好的心情和宜人的天气是享受生活的好时机。有没有计划做点特别的，比如散步、阅读或者和朋友聚会？无论你做什么，都希望你的好心情能持续一整天！如果你需要建议或想要分享更多，我在这里倾听。','2024-09-25 12:43:03'),(7,126,'听起来今天气温比较低，记得多穿衣服保暖哦。如果有什么可以帮助你的，比如提供一些在家保暖的小建议或者其他帮助，随时告诉我。','2024-09-25 13:33:36'),(8,127,'您提到的“成功”没有具体指代，所以我不清楚您是在询问什么方面的成功。如果您能提供更多的上下文或具体的情况，我会更好地理解并回答您的问题。','2024-09-25 15:31:28'),(9,128,'恭喜您！如果您宣布成功了，那么请分享更多的细节，我很乐意听到您的成就和经历。如果这是一个私人的胜利，那么我也为您感到高兴！继续加油！','2024-09-25 15:33:04'),(10,129,'看起来您可能是在提到某个数量或者列表中的项目减少了。不过，由于信息仍然不够具体，我无法给出准确的回答。如果您能提供更多的上下文或者详细说明是什么“少了一条”，我或许能更好地帮助您解决问题或提供帮助。','2024-09-25 15:34:10'),(11,130,'看来您今天很辛苦呢。有什么我能帮您的吗？或许您需要一些放松的建议，或者有具体问题需要解答，都可以告诉我。希望我能为您的疲劳带来一些缓解。','2024-09-26 06:55:42'),(12,131,'您好！如果您指的是定位技术上的成功，比如GPS定位成功，那么很高兴听到这个消息。如果您需要关于定位技术或者相关应用的帮助，请告诉我，我会尽力为您提供支持和信息。如果有其他方面的问题，也欢迎随时提问。','2024-09-26 12:12:48'),(13,132,'那真是太好了！没有课的一天你可以安排得轻松自在一些。你可以利用这个时间休息放松，看一些喜欢的书籍，或者进行一些有益身心的活动。当然，如果有什么学习或者工作上的事情需要处理，这也是一个不错的机会。你有什么计划吗？需要一些建议或者帮助吗？','2024-09-27 05:10:34'),(14,133,'看来你可能没有详细的计划，只是简单地回复了数字6。如果你是在表达今天你想做的事情的数量，或者是在选择下面的一些建议，这里有几个轻松活动的建议，你可以考虑：\n\n1. 读书或者看一部电影。\n2. 做一些户外运动，比如散步、骑自行车或者慢跑。\n3. 尝试一个新的食谱，烹饪一顿美味的饭菜。\n4. 和朋友或家人聚会，享受社交的乐趣。\n5. 学习一项新技能，比如绘画、编程或者乐器。\n6. 放松一下，做做瑜伽或者冥想。\n\n如果你有其他的计划或者需要帮助，随时告诉我！希望你今天过得愉快。','2024-09-27 05:22:26'),(15,134,'666在网络语言中通常是表示“顺利”或“很棒”的意思，相当于英文中的\"awesome\"或\"cool\"。如果你有任何问题或需要帮助，请随时告诉我！我会尽力提供帮助。😊','2024-09-27 07:34:06'),(16,135,'看起来您心情不错！有什么我可以帮助您的吗？如果您有任何问题或需要协助，请随时告诉我。','2024-09-27 07:36:48'),(17,136,'您好！看来您可能遇到了一些情况或者是有某些疑问。请详细描述一下您的问题或者所遇到的情况，我会尽我所能为您提供帮助。','2024-09-27 09:30:24'),(23,142,'看起来好像出现了一些问题？如果是的话，请告诉我具体情况，我会尽力帮助你解决问题。如果这只是一次测试，那么请继续，我会跟随你的指示。','2024-09-27 11:11:32'),(24,143,'\"进度一片光明\"这个说法表达了事情进展顺利，前景非常乐观。无论您是在谈论一个项目、工作还是其他任何事情，这样的进展都是值得庆祝的。保持这种积极的态度，继续努力，相信您会取得更多成就。如果有任何问题或者需要帮助，人工智能助手都会在这里为您提供服务。','2024-09-28 07:59:19'),(25,144,'辛苦了！即将收工，回去可以好好休息一下。如果有什么需要帮助的，尽管告诉我。祝你晚上愉快！','2024-09-30 07:36:07'),(29,148,'您好！作为您的人工智能助手，我现在依然随时准备回答您的问题或者帮助您解决问题。请问您需要了解什么信息或者有什么可以帮助您的？','2024-10-01 04:40:51'),(33,152,'对不起，看起来好像出现了误会或者错误。请您详细说明一下，我会尽力帮助您解决问题。','2024-10-01 05:13:59'),(34,153,'好的，我在这里，请随时进行测试或者提出问题，我会尽力帮助您。您想测试什么呢？请告诉我具体的内容或者问题。','2024-10-01 05:48:22'),(38,161,'您好！看起来您可能没有完成问题，不过没关系，我在这里可以帮助您。如果您有任何问题或者需要帮助，请随时告诉我！','2024-10-01 06:09:35'),(39,162,'好像您想要拍照一样！虽然作为一个人工智能助手，我无法直接帮您拍照，但我可以提供一些建议或技巧来帮助您拍出更好的照片：\n\n1. **光线**：确保有充足的自然光或者使用合适的闪光灯。自然光是拍摄的最佳选择。\n\n2. **构图**：尝试使用三分法则，将拍摄对象放在画面的一侧或另一侧，而不是正中央。\n\n3. **角度**：尝试不同的角度拍摄，有时候低角度或高角度可以带来意想不到的效果。\n\n4. **稳定性**：保持相机稳定，避免模糊。如果可能，使用三脚架。\n\n5. **表情**：如果是拍摄人像，鼓励拍摄对象放松，自然的笑容往往比摆拍更好。\n\n6. **后期处理**：使用照片编辑软件或应用进行基本的后期处理，比如调整亮度、对比度、饱和度等。\n\n7. **主题明确**：确保照片中有一个清晰的焦点或主题。\n\n如果有什么具体的摄影问题或者需要关于如何拍摄特定主题的建议，请告诉我！','2024-10-01 06:10:17'),(40,163,'看起来你提到的“桀桀”是一个人名或者昵称。如果你想表达关于你和“桀桀”的关系或者想询问关于与“桀桀”相处的建议，麻烦请提供更多的背景信息或具体问题，这样我才能更好地帮助你。如果是别的问题，也请详细说明，我会尽力为你提供帮助。','2024-10-01 06:11:12'),(43,166,'好的，如果你只是想表达一个轻松的拍照邀请，那么这是一种很好的社交互动。如果你想和桀桀（或者是朋友们）一起拍些有趣的照片，这里有一些建议：\n\n1. **选择合适的时间**：黄金时刻（日出和日落时分）的光线柔和，非常适合拍照。\n\n2. **找好背景**：选择一个有趣或者有意义的背景，比如地标建筑、自然风景或者是有特色的墙画。\n\n3. **尝试不同的姿势**：不要只是站着或者坐着，可以尝试跳跃、倚靠、走路等动态姿势。\n\n4. **互动**：在拍照时，和桀桀做一些互动，比如拥抱、牵手或者做一些俏皮的动作，这样可以让照片看起来更有故事感。\n\n5. **使用滤镜和贴纸**：如果你们喜欢，可以在拍照后使用手机应用添加一些滤镜和贴纸，增加照片的趣味性。\n\n6. **抓拍瞬间**：有时候，最自然、最有感染力的照片是抓拍的瞬间，所以不妨多拍一些，总会有意想不到的惊喜。\n\n7. **创造性地构图**：尝试不同的构图方法，比如对称、三分法、框架构图等，让你的照片更有艺术感。\n\n8. **记得微笑**：微笑是最自然、最吸引人的表情，所以拍照时别忘了露出你的笑容。\n\n9. **享受过程**：最重要的是，拍照的过程应该是轻松愉快的，不要太在意拍出来的效果，享受和朋友们在一起的时光。\n\n现在，拿出你的相机或手机，和桀桀一起说：“拍拍照~”，享受这个有趣的时刻吧！','2024-10-01 07:24:47'),(49,172,'很遗憾，作为一个文本基础的AI，我无法查看或接收图片。不过，如果你需要关于如何处理、编辑或分享图片的建议，我可以提供帮助。请告诉我你需要什么样的帮助或者你想要了解的信息。','2024-10-01 08:18:23'),(50,173,'很抱歉，但作为一个文本交互的AI，我无法直接接收或查看图片。如果你有任何关于摄影、图片编辑或分享的问题，我可以尝试帮助你解答。请用文字描述你的问题或需求，我会尽力提供帮助。','2024-10-01 08:18:49'),(51,174,'当然，请问有什么我可以帮助您的？如果您有任何问题或需要信息，随时告诉我。','2024-10-01 08:28:44'),(52,175,'很抱歉，作为一个文本交互的AI，我没有拍照的功能。但是，如果您需要关于摄影的建议或者有关如何拍摄特定主题的技巧，我可以尽力帮助您。请告诉我您的具体需求。','2024-10-01 08:29:28'),(53,176,'哦，看来您可能是想要模拟拍照的情景或者表达一种轻松愉快的氛围。\"拍拍照\"通常是指用相机或手机拍照。虽然我不能实际拍照，但我们可以想象一下这个场景：\n\n\"咔嚓！捕捉这一刻的美好。阳光正好，风景这边独好。让我们摆个姿势，留下一个愉快的记忆。微笑！\"\n\n如果您有实际的摄影相关的问题或者需要分享您的摄影作品并获取意见，也欢迎您随时告诉我！','2024-10-01 08:32:33'),(54,177,'当然，如果您需要拍摄照片，请确保您遵守当地的法律和规定。如果您需要关于拍照技巧的建议或者有关摄影的任何信息，请告诉我，我会尽力帮助您。如果“拍拍照”是指想要我提供一些有关摄影的知识或者影像处理的信息，请详细说明您的需求。','2024-10-01 08:40:51'),(55,179,'今天是2023年11月4日。如果您有任何问题或需要帮助，请随时告诉我。我会尽力提供帮助。','2024-10-01 08:48:45'),(56,180,'很高兴听到这个好消息！保持好心情对身心健康都非常有益。希望您今天能继续保持这样的状态，并且享受愉快的一天！如果您需要分享什么或者有任何问题，我在这里听着。','2024-10-01 08:50:31'),(57,181,'您好！很高兴看到您再次使用这个平台。如果有任何问题或需要帮助，请随时告诉我，我会尽我所能为您提供支持和帮助。您想要了解些什么呢？😊','2024-10-01 08:54:41'),(58,182,'看起来您可能是在表达一种担忧或压力。无论您面临什么情况，都请记住，每个人都会犯错，这是学习和成长的一部分。如果您担心某个特定的决策或任务，以下是一些建议：\n\n1. 认真准备：在行动之前，尽可能多地收集信息，做好准备。\n2. 仔细思考：在做决定之前，仔细权衡所有选项和可能的结果。\n3. 寻求建议：向信任的朋友、家人或专业人士寻求意见。\n4. 学会接受：如果不幸犯了错误，学会接受它，并从中吸取教训。\n5. 保持积极：保持积极的心态，相信自己能够应对挑战。\n\n如果您愿意，可以分享更多的背景信息，我会尽力提供更具体的建议或支持。无论如何，请记住，错误是通向成功的必经之路，它们提供了学习和进步的机会。加油！','2024-10-01 08:58:32'),(59,183,'好的，我明白了，您正在测试没有图片的情况下的交流。请继续，您可以提出问题或者开始一个话题，我会用文字回应您的。如果有任何需要帮助的地方，请告诉我。','2024-10-01 08:59:15'),(60,184,'您似乎是在模拟拍照的情景，但在文字交流中，我无法直接为您拍照。不过，如果您需要关于摄影的建议、技巧或者有关如何选择相机和拍摄特定主题的信息，我很乐意提供帮助。请告诉我您想要了解的内容！','2024-10-01 09:00:14'),(61,185,'哦，看来您可能是在模拟对话或者想要表达一种轻松的气氛。\"拍拍照\"通常是指用相机或手机拍照。如果您需要讨论摄影相关的话题，或者有任何其他问题，都可以继续告诉我，我会尽力帮助您的。如果这只是个玩笑或者随意的表达，那也没问题，我们可以继续轻松地聊天！ 😄','2024-10-01 09:00:41'),(62,186,'明白了，您可能只是想要模拟一个轻松的对话场景。\"拍拍照\"在这里就像是说“来，我们拍个照留念吧！”虽然我们实际上无法拍照，但我可以配合您的话题：\n\n\"好的，摆个姿势，微笑！咔嚓——完美的一张照片！虽然我们这里只有文字，但想象中的照片总是最美的。\"\n\n如果您有其他话题或者问题想要讨论，也可以随时切换到那些内容。😄','2024-10-01 09:01:02'),(63,187,'好的，那就让我们一起“拍拍照”吧！\n\n📷🌄📸\n\n（虽然这里没有实际的图片，但我们可以想象自己正在美好的风景前拍照留念。希望这个模拟的拍照体验能给您带来一点乐趣！如果还有其他事情想要讨论，请随时告诉我。）','2024-10-01 09:02:01'),(64,188,'我作为一个人工智能助手，并没有情感或心情。但我可以帮你分析或提供一些方法来改善你的心情。如果你愿意的话，可以告诉我你的感受，我会尽我所能提供帮助。','2024-10-01 09:57:10');
/*!40000 ALTER TABLE `model_response` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mood_analysis`
--

DROP TABLE IF EXISTS `mood_analysis`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `mood_analysis` (
  `id` int NOT NULL AUTO_INCREMENT,
  `sentiment` tinyint NOT NULL,
  `confidence` decimal(5,4) DEFAULT NULL,
  `positive_prob` decimal(5,4) DEFAULT NULL,
  `negative_prob` decimal(5,4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=199 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mood_analysis`
--

LOCK TABLES `mood_analysis` WRITE;
/*!40000 ALTER TABLE `mood_analysis` DISABLE KEYS */;
INSERT INTO `mood_analysis` VALUES (112,0,0.9910,0.0040,0.9960),(113,0,0.9953,0.0021,0.9979),(114,0,0.9953,0.0021,0.9979),(115,0,0.9973,0.0012,0.9988),(116,0,0.9953,0.0021,0.9979),(117,0,0.9674,0.0147,0.9853),(118,0,0.9934,0.0030,0.9970),(119,0,0.9969,0.0014,0.9986),(120,0,0.9969,0.0014,0.9986),(121,0,0.9846,0.0069,0.9931),(122,0,0.8987,0.0456,0.9544),(123,0,0.9394,0.0273,0.9727),(124,0,0.9953,0.0021,0.9979),(125,0,0.9953,0.0021,0.9979),(126,0,0.9957,0.0020,0.9980),(127,0,0.9910,0.0040,0.9960),(128,0,0.9910,0.0040,0.9960),(129,0,0.9881,0.0054,0.9946),(130,0,0.9674,0.0147,0.9853),(131,0,0.9674,0.0147,0.9853),(132,0,0.9953,0.0021,0.9979),(133,0,0.9910,0.0040,0.9960),(134,0,0.9934,0.0030,0.9970),(135,0,0.9881,0.0054,0.9946),(136,0,0.9881,0.0054,0.9946),(137,0,0.9953,0.0021,0.9979),(138,0,0.9953,0.0021,0.9979),(139,2,0.9009,0.9554,0.0446),(140,1,0.6777,0.5161,0.4839),(141,0,0.9957,0.0020,0.9980),(142,0,0.9934,0.0030,0.9970),(143,2,0.7727,0.8977,0.1023),(144,2,0.7727,0.8977,0.1023),(145,0,0.9881,0.0054,0.9946),(146,2,0.9166,0.9625,0.0375),(147,2,0.8967,0.9535,0.0465),(148,0,0.9970,0.0013,0.9987),(149,0,0.9910,0.0040,0.9960),(150,0,0.9953,0.0021,0.9979),(151,0,0.9953,0.0021,0.9979),(152,0,0.9881,0.0054,0.9946),(153,0,0.9881,0.0054,0.9946),(154,2,0.4322,0.7445,0.2555),(155,2,0.4322,0.7445,0.2555),(156,2,0.4322,0.7445,0.2555),(157,2,0.4322,0.7445,0.2555),(158,0,0.9969,0.0014,0.9986),(159,0,0.9881,0.0054,0.9946),(160,0,0.9674,0.0147,0.9853),(161,0,0.9674,0.0147,0.9853),(162,0,0.9969,0.0014,0.9986),(163,0,0.9846,0.0069,0.9931),(164,0,0.9772,0.0103,0.9897),(165,0,0.9881,0.0054,0.9946),(166,0,0.9893,0.0048,0.9952),(167,0,0.9970,0.0013,0.9987),(168,0,0.9970,0.0013,0.9987),(169,0,0.9953,0.0021,0.9979),(170,0,0.9970,0.0013,0.9987),(171,0,0.9773,0.0102,0.9898),(172,0,0.9970,0.0013,0.9987),(173,0,0.9953,0.0021,0.9979),(174,0,0.9970,0.0013,0.9987),(175,0,0.9970,0.0013,0.9987),(176,0,0.9970,0.0013,0.9987),(177,0,0.9970,0.0013,0.9987),(178,0,0.9970,0.0013,0.9987),(179,0,0.9970,0.0013,0.9987),(180,0,0.9970,0.0013,0.9987),(181,0,0.9970,0.0013,0.9987),(182,0,0.9956,0.0020,0.9980),(183,0,0.9974,0.0012,0.9988),(184,0,0.9953,0.0021,0.9979),(185,0,0.9970,0.0013,0.9987),(186,0,0.9970,0.0013,0.9987),(187,0,0.9970,0.0013,0.9987),(188,0,0.9910,0.0040,0.9960),(189,0,0.9957,0.0020,0.9980),(190,0,0.9910,0.0040,0.9960),(191,0,0.9881,0.0054,0.9946),(192,0,0.9881,0.0054,0.9946),(193,0,0.9809,0.0086,0.9914),(194,0,0.9970,0.0013,0.9987),(195,0,0.9970,0.0013,0.9987),(196,0,0.9970,0.0013,0.9987),(197,0,0.9970,0.0013,0.9987),(198,0,0.9881,0.0054,0.9946);
/*!40000 ALTER TABLE `mood_analysis` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mood_record`
--

DROP TABLE IF EXISTS `mood_record`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `mood_record` (
  `id` int NOT NULL AUTO_INCREMENT,
  `mood_text` varchar(255) NOT NULL,
  `record_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `location_id` int DEFAULT NULL,
  `weather_id` int DEFAULT NULL,
  `analysis_id` int DEFAULT NULL,
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `weather_id` (`weather_id`),
  KEY `mood_record_ibfk_1` (`location_id`),
  KEY `mood_record_ibfk_3` (`analysis_id`),
  KEY `fk_user_id` (`user_id`),
  CONSTRAINT `fk_user_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  CONSTRAINT `mood_record_ibfk_1` FOREIGN KEY (`location_id`) REFERENCES `location` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `mood_record_ibfk_2` FOREIGN KEY (`weather_id`) REFERENCES `weather_info` (`id`),
  CONSTRAINT `mood_record_ibfk_3` FOREIGN KEY (`analysis_id`) REFERENCES `mood_analysis` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=189 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mood_record`
--

LOCK TABLES `mood_record` WRITE;
/*!40000 ALTER TABLE `mood_record` DISABLE KEYS */;
INSERT INTO `mood_record` VALUES (125,'今天心情很好，天气也不错。','2024-09-25 12:43:00',27,37,131,1),(126,'今天冷。','2024-09-25 13:33:34',27,38,132,1),(127,'真的成功了吗','2024-09-25 15:31:25',27,39,133,5),(128,'成功了！！','2024-09-25 15:33:02',27,40,134,5),(129,'怎么少了一条？','2024-09-25 15:34:08',27,41,135,5),(130,'搞了一天。。。','2024-09-26 06:55:39',27,42,136,6),(131,'定位成功','2024-09-26 12:12:46',31,43,137,6),(132,'今天没课','2024-09-27 05:10:32',35,44,138,5),(133,'6','2024-09-27 05:22:22',37,45,139,5),(134,'666','2024-09-27 07:34:04',45,46,140,5),(135,'爽了','2024-09-27 07:36:47',48,47,141,5),(136,'怎么回事呢','2024-09-27 09:30:23',63,48,142,5),(142,'完蛋了~','2024-09-27 11:11:31',134,54,148,6),(143,'进度一片光明','2024-09-28 07:59:16',229,84,149,6),(144,'即将收工','2024-09-30 07:36:05',372,220,150,6),(148,'现在呢','2024-10-01 04:40:50',459,313,158,5),(152,'又错了','2024-10-01 05:13:58',466,324,162,5),(153,'再来测试一下这边','2024-10-01 05:48:20',469,328,163,5),(158,'拍拍照~','2024-10-01 06:04:53',477,342,168,6),(159,'什么情况','2024-10-01 06:06:00',477,343,169,6),(161,'？','2024-10-01 06:09:34',477,345,171,6),(162,'拍拍照~','2024-10-01 06:10:09',477,346,172,6),(163,'我和桀桀','2024-10-01 06:11:10',477,347,173,6),(166,'拍拍照~','2024-10-01 07:24:36',485,358,176,6),(172,'上传了3张图片','2024-10-01 08:18:17',499,378,182,6),(173,'上传1张','2024-10-01 08:18:44',499,379,183,6),(174,'再试一次','2024-10-01 08:28:43',500,381,184,6),(175,'拍拍照~','2024-10-01 08:29:25',502,384,185,6),(176,'拍拍照~','2024-10-01 08:32:30',502,385,186,6),(177,'拍拍照~','2024-10-01 08:40:48',502,386,187,6),(179,'今天','2024-10-01 08:48:43',502,388,189,6),(180,'今天心情不错','2024-10-01 08:50:29',502,389,190,6),(181,'终于可以了呜呜','2024-10-01 08:54:40',502,390,191,6),(182,'真不能再错了吧','2024-10-01 08:58:26',504,393,192,6),(183,'测试没有图片的情况','2024-10-01 08:59:13',506,396,193,6),(184,'拍拍照~','2024-10-01 09:00:11',506,397,194,6),(185,'拍拍照~','2024-10-01 09:00:38',506,398,195,6),(186,'拍拍照~','2024-10-01 09:00:58',506,399,196,6),(187,'拍拍照~','2024-10-01 09:01:58',510,404,197,5),(188,'心情分析还好吗','2024-10-01 09:57:08',516,411,198,6);
/*!40000 ALTER TABLE `mood_record` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `news`
--

DROP TABLE IF EXISTS `news`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `news` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `uniquekey` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `url` varchar(255) NOT NULL,
  `category` varchar(255) DEFAULT NULL,
  `author_name` varchar(255) DEFAULT NULL,
  `date` datetime NOT NULL,
  `thumbnail_pic_s` varchar(255) DEFAULT NULL,
  `is_content` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `thumbnail_pic_s02` varchar(255) DEFAULT NULL,
  `thumbnail_pic_s03` varchar(255) DEFAULT NULL,
  `thumbnail_pics` varchar(255) DEFAULT NULL,
  `thumbnail_pics02` varchar(255) DEFAULT NULL,
  `thumbnail_pics03` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniquekey` (`uniquekey`),
  KEY `idx_news_uniquekey` (`uniquekey`),
  KEY `idx_news_category` (`category`),
  KEY `idx_news_date` (`date`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `news`
--

LOCK TABLES `news` WRITE;
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
INSERT INTO `news` VALUES (1,'dded5b1e8475a18844ae8efa43841ca3','成武县白浮图镇网格员：“网”起居民大小事 做好群众贴心人','https://mini.eastday.com/mobile/240929182753995315834.html','头条','大众网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(2,'c06ed129a9e094145a751d5b75f9c3d3','2024创交会首届市场化办会 首日签约金额超200亿元','https://mini.eastday.com/mobile/240929182714405588934.html','头条','中国网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240929/20240929182714_1a02c13e5f2781cde1f67bdb532d641b_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929182714_1a02c13e5f2781cde1f67bdb532d641b_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929182714_1a02c13e5f2781cde1f67bdb532d641b_3_mwpm_03201609.jpeg'),(3,'a10793e69684751b005ce2cd0c602265','青春华章·我们这YOUNG｜“小水滴”志愿者袁慧：守水护水，对于我们来说是天大的事情','https://mini.eastday.com/mobile/240929182141194104739.html','头条','人民网-人民视频，供稿：人民资讯','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(4,'893556868e4c81901de12297e4b8afbc','老人身陷电诈骗局 大渡口警银联动挽损10万元','https://mini.eastday.com/mobile/240929181706238289157.html','头条','上游新闻','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(5,'bfe9306b9eff21b951a7c595264f2128','新闻发布会 | 2024中国·澄迈国际经济贸易洽谈会主要内容分为“1+6+N”','https://mini.eastday.com/mobile/240929181624653164424.html','头条','南海网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(6,'e566f0eaff27f7d76701ac0ffc776d06','新闻发布会 | 2024中国·澄迈国际经济贸易洽谈大会将邀请150余家知名机构探索基金合作新机遇','https://mini.eastday.com/mobile/240929181614155408987.html','头条','南海网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(7,'1ed5211b772dcb890d582219e8a4e8de','海口一男子组织他人偷越国（边）境未遂 获刑10个月','https://mini.eastday.com/mobile/240929181504669860971.html','头条','南海网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(8,'fadea9d7d8886964496b5a568794e6ee','东湖评论：“熊孩子”一掷千金敲响网络安全警钟','https://mini.eastday.com/mobile/240929181206126741281.html','头条','荆楚网 （湖北日报网）','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'','',''),(9,'b96407f4413c19acbc725fdf92aeb7f7','2024年航天科普进校园活动在海口城西小学举行','https://mini.eastday.com/mobile/240929181021960729018.html','头条','南海网','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240929/20240929181021_e3876a9f4e274cf54fad2177149ebe9c_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929181021_e3876a9f4e274cf54fad2177149ebe9c_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929181021_e3876a9f4e274cf54fad2177149ebe9c_3_mwpm_03201609.jpeg'),(10,'6606b6c6431558234e85edf2bc9be400','以书换书 “享读曹路”让闲置书籍“流动”起来','https://mini.eastday.com/mobile/240929180844225635672.html','头条','人民网－上海频道，供稿：人民资讯','2024-09-29 19:07:24',NULL,1,'2024-09-29 11:07:24','2024-09-29 11:07:24',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240929/20240929180844_1245f807f4bb599535bb73f1fa96e39f_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929180844_1245f807f4bb599535bb73f1fa96e39f_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240929/20240929180844_1245f807f4bb599535bb73f1fa96e39f_3_mwpm_03201609.jpeg'),(11,'703f80182f9d38c0a29f3ff84baba059','一生一事｜超越血缘的牵挂','https://mini.eastday.com/mobile/240930141823627554414.html','头条','人民网-人民视频，供稿：人民资讯','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'','',''),(12,'6419445acd63cc66b0908773d3498f58','于芝涛：海信出海二十年 继续探索中国企业全球化有效实践','https://mini.eastday.com/mobile/240930124326882705851.html','头条','缘之心','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240930/20240930124326_678a4008bc71224828b3e57307b2ef17_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240930/20240930124326_678a4008bc71224828b3e57307b2ef17_2_mwpm_03201609.jpeg',''),(13,'bfd15b055fc751934817dbac6c3e6a33','9月中国制造业PMI升至49.8% 企业生产加快','https://mini.eastday.com/mobile/240930124326184110109.html','头条','缘之心','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'','',''),(14,'c47567e373e8b2db37a47e5764345ee0','9月中国非制造业经营活动运行平稳','https://mini.eastday.com/mobile/240930124325639229186.html','头条','缘之心','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'','',''),(15,'2304ca59db05a7ab858a93642fb9ad22','中新真探：鸡蛋过敏的人不能接种流感疫苗？','https://mini.eastday.com/mobile/240930124323772458204.html','头条','缘之心','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240930/20240930124323_2431af8b033a64c7e090eb2f8dfaddbe_1_mwpm_03201609.jpeg','',''),(16,'e56897646852e41fd0ac4575767b6beb','农行临西银新支行：零钞清点 高效服务','https://mini.eastday.com/mobile/240930124007670680331.html','头条','大众网','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240930/20240930124007_a0a33322fa9f429ad96b80077f573628_1_mwpm_03201609.jpeg','',''),(17,'530b95835b46d2274f55f83c9bd5a543','农行临西兴业路支行：关爱行动不便老人，农业银行在行动','https://mini.eastday.com/mobile/240930123958054924778.html','头条','大众网','2024-09-30 14:32:32',NULL,1,'2024-09-30 06:32:32','2024-09-30 06:32:32',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240930/20240930123958_1b699c8474eb28aaad81cd0f4249c54a_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240930/20240930123958_1b699c8474eb28aaad81cd0f4249c54a_2_mwpm_03201609.jpeg',''),(18,'dde255d6951a0a591b5c25411d690819','潜山法院成功审结一起破产清算案件','https://mini.eastday.com/mobile/240930143846926589513.html','头条','人民网－安徽频道，供稿：人民资讯','2024-09-30 14:49:28',NULL,1,'2024-09-30 06:49:28','2024-09-30 06:49:28',NULL,NULL,'','',''),(19,'9bdef235e1d4da4141744fcb4e436565','青春华章·我们这YOUNG｜“钥匙阿姨”兰长燕：志愿者精神应该一代代传承下去','https://mini.eastday.com/mobile/240930143407647195855.html','头条','人民网-人民视频，供稿：人民资讯','2024-09-30 14:49:28',NULL,1,'2024-09-30 06:49:28','2024-09-30 06:49:28',NULL,NULL,'','',''),(20,'eb97abc85de658d86f6edd2f254f17af','马鞍山雨山区市场监管局助力企业创新发展','https://mini.eastday.com/mobile/240930160219847222466.html','头条','人民网－安徽频道，供稿：人民资讯','2024-09-30 16:23:30',NULL,1,'2024-09-30 08:23:30','2024-09-30 08:23:30',NULL,NULL,'','',''),(21,'e9b7397cf7a3aa87e4a6ce4e16f6c393','温暖中国 | 这个九月，中国青年因拼搏而自带光芒','https://mini.eastday.com/mobile/240930155552500479671.html','头条','人民网，供稿：人民资讯','2024-09-30 16:23:30',NULL,1,'2024-09-30 08:23:30','2024-09-30 08:23:30',NULL,NULL,'','',''),(22,'f64a9fddf5e954a2d4ba566bed8e50d3','组图：撑船行医25载 “孤岛”上的医者仁心','https://mini.eastday.com/mobile/240930162310071360160.html','头条','人民网，供稿：人民资讯','2024-09-30 16:42:48',NULL,1,'2024-09-30 08:42:48','2024-09-30 08:42:48',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20240930/20240930162310_a291a438a4ce24c1a689f5ad4d314f56_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240930/20240930162310_a291a438a4ce24c1a689f5ad4d314f56_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20240930/20240930162310_a291a438a4ce24c1a689f5ad4d314f56_3_mwpm_03201609.jpeg'),(23,'d768045b38b855a9f39fcb75865a1751','青岛平度：“醉美金秋”高登舟、舒杰、空间陈设书画展开展','https://mini.eastday.com/mobile/241001115228325648047.html','头条','鲁网','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001115228_32e035a68097f03adb9b7c30f4e58a03_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001115228_32e035a68097f03adb9b7c30f4e58a03_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001115228_32e035a68097f03adb9b7c30f4e58a03_3_mwpm_03201609.jpeg'),(24,'8207134ef2869aad609357dfdaad4d8e','电影“新大头儿子6”首映 蔡国庆父子演唱主题曲','https://mini.eastday.com/mobile/241001114826801795817.html','头条','缘之心','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001114826_3af606300f0dfa7394e130df3ad67721_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001114826_3af606300f0dfa7394e130df3ad67721_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001114826_3af606300f0dfa7394e130df3ad67721_3_mwpm_03201609.jpeg'),(25,'fd3defe563fc55ceb22db995cd6e10df','群众喜悦之情溢于言表 东昌府公安分局2天内拘3人 破10案！','https://mini.eastday.com/mobile/241001114249987503243.html','头条','大众网','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001114249_b1b25d86dece389063d5d4d6f4c91782_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001114249_b1b25d86dece389063d5d4d6f4c91782_2_mwpm_03201609.jpeg',''),(26,'fc551aa5c73f5e156fc016c7c6e20954','莒县刘官庄镇中心小学开展防震逃生演练','https://mini.eastday.com/mobile/241001113913229180417.html','头条','大众报业·齐鲁壹点','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001113913_310a586fd8ab94b6fb853a3ae913e630_1_mwpm_03201609.jpeg','',''),(27,'91fa05c74cc7c9b967348dbe8c15bf53','乘客和驾驶员的双向奔赴 他们都得到一段回味无穷的回忆','https://mini.eastday.com/mobile/241001113702221316087.html','头条','上游新闻','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001113702_ca9403ff82f69de63cef9a9ef197d5fa_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001113702_ca9403ff82f69de63cef9a9ef197d5fa_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001113702_ca9403ff82f69de63cef9a9ef197d5fa_3_mwpm_03201609.jpeg'),(28,'c2b58417405876aea4f76ff3789d9f40','国庆我在岗丨五星级公交驾驶员余平：给别人带来快乐，也是一件很幸福的事情','https://mini.eastday.com/mobile/241001113646892782253.html','头条','上游新闻','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001113646_2f91bcd55a129e25ff1a263cc455670b_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001113646_2f91bcd55a129e25ff1a263cc455670b_2_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001113646_2f91bcd55a129e25ff1a263cc455670b_3_mwpm_03201609.jpeg'),(29,'adc81db222f64edee46f876a69624b8a','泰安市中心医院：“5G+急诊急救” 为抢救生命加速','https://mini.eastday.com/mobile/241001113242785793812.html','头条','大众网','2024-10-01 12:27:37',NULL,1,'2024-10-01 04:27:37','2024-10-01 04:27:37',NULL,NULL,'https://dfzximg02.dftoutiao.com/news/20241001/20241001113242_467b541014963a5a814af9aea14aa026_1_mwpm_03201609.jpeg','https://dfzximg02.dftoutiao.com/news/20241001/20241001113242_467b541014963a5a814af9aea14aa026_2_mwpm_03201609.jpeg','');
/*!40000 ALTER TABLE `news` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `soup_quotes`
--

DROP TABLE IF EXISTS `soup_quotes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `soup_quotes` (
  `id` int NOT NULL AUTO_INCREMENT,
  `text` text NOT NULL,
  `record_date` timestamp NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `soup_quotes`
--

LOCK TABLES `soup_quotes` WRITE;
/*!40000 ALTER TABLE `soup_quotes` DISABLE KEYS */;
INSERT INTO `soup_quotes` VALUES (1,'在这一个温暖的季节里，在树林里，许多的树木都开满了鲜艳的花朵；大家都不肯相让，红的黄的白的紫的，各种各样的花真像一个美丽的大花坛。许许多多的蝴蝶和蜜蜂都闻到了花的香味，都不约而同地飞来采蜜，在半空中飞来飞去。','2024-09-27 16:00:00'),(2,'人活的之所以累，是放不下架子撕不开面子解不开情节。','2024-09-27 16:00:00'),(3,'天再高又怎样，踮起脚尖就更接近阳光。','2024-09-27 16:00:00'),(4,'幸福是许多人都追求的，而且很多人花了老大的心思寻找幸福都没有找到，其实幸福就在我们的身边，是需要我们用心体会的，我的感受就是幸福就在我身边，一天都没有离开过我，甚至在我生病的时候。','2024-09-28 06:42:00'),(5,'任何时候，抱怨只是证明你的能力不行，并不代表困难和问题不可以存在。抱怨其实是世上最不值钱的废话。','2024-09-28 07:00:00'),(6,'有的时候我很感谢生活，但更多的时候我恨生活，生活能把每个人推到巅峰一样会把每个人推向地狱。','2024-09-28 08:00:00'),(7,'昨日已经过去，即使昨日发生了再美的事情，我们也无法让它重新来过，明天还未来到，你把未来想象的像花一样那也是以后的事情，纵使你的手在长也无法抓到，我们唯一能够抓得到，掌控的了的就是今日。','2024-09-28 09:00:00'),(8,'命运如同手中的掌纹，无论多曲折，终掌握在自己手中。','2024-09-28 10:26:46'),(9,' \"风说:它经过你家乡,于是我变为楚楚烟云,让它带我去到你那美丽的家乡; 夜言:它看到了你的寂寞,于是我幻化为点点繁星,听你心事,陪你度过。\"','2024-09-28 11:00:00'),(10,'爱情是灯，友情是影子，当灯灭了，你会发现你的周围都是影子。朋友，是在最后可以给你力量的人。','2024-09-29 06:00:01'),(11,'要成功，就要时时怀着得意淡然、失意坦然的乐观态度，笑对自己的挫折和苦难，去做，去努力，去争取成功！','2024-09-29 07:00:00'),(12,'生命是需要奋斗的，奋斗与不奋斗，造就的结果截然不同。生无所息，保持奋斗的姿态，让世界变得如此灿烂，让你的人生绚烂多姿。千万不能满足小溪的平缓，否则你也就满足了自己的平庸，只有欣赏到山峰的险峻，才有机会欣赏自己。','2024-09-29 08:00:01'),(13,'想和你一起浅浅淡淡的生活，分享每一天的平凡，每一刻的幸福，感动，每一秒的丝丝甜蜜。我不知道这算不算奢求，反正我也早就习惯了奢求。','2024-09-30 06:00:00'),(14,'不管我们曾经遇见还是错过，总有些人和事让我们难以忘却。我们生命中的每一个过客，不管是一面之缘，还是文字之缘，总有些东西在我们的印象里定格。一句祝福一个微笑的距离，远远大于人与人之间的模糊。相识便是缘，相知更是一生的福分。','2024-09-30 07:00:00'),(15,'人的矛盾总在于，渴望被理解，又害怕被看穿。','2024-09-30 08:00:00'),(16,'人生无法预测，结局无法改变，生活就是皮鞭，每一天都在鞭策。','2024-09-30 09:00:00'),(17,'如果可以和你在一起，我宁愿让天空所有的星光全部损落，因为你的眼睛，是我生命里最亮的光芒。','2024-09-30 11:12:14'),(18,'何为爱情？一个身子两颗心；何为友谊？两个身子一颗心。','2024-10-01 05:00:00'),(19,'大事小事好事坏事真事假事旧事新事，在生活看来，那都是快乐的。假若没有这么多的“事”，生活就会很枯燥，没有了意义。一个人的快乐是快乐，两个人的快乐是分享，三个人的快乐是攀比快乐，而好多人的快乐，是生活的快乐。生活的快乐，就是世界的祝福。','2024-10-01 06:00:00'),(20,'如果回忆如钢铁般坚硬，我是该微笑，还是哭泣；如果钢铁如记忆般腐蚀，那这里是幻城，还是废墟。','2024-10-01 07:00:00'),(21,'男人的微笑可以如梦，女人的微笑可以似花。男人的魅力和女人的妩媚，尽可蕴含在不言的微笑之中。','2024-10-01 08:00:00'),(22,'身累的时候你可以休息、休养、疏筋、按摩，很快就能恢复过来；而心累则无方可施，无药可治，伤其精，损其神。重则如履薄冰，随时都有生命之忧；轻者如其多病，病来如山倒，病去如抽丝。','2024-10-01 09:00:00'),(23,'有朋友的人，生活才有乐趣，一个人喝茶，不能品出味道；就是一个人单独吃饭，也不会有太大的胃口，多个人在一起吃饭，就会增加香味。','2024-10-01 10:00:00'),(24,'端正自己，用心做事。坚守信仰，感恩现在。','2024-10-01 12:00:00');
/*!40000 ALTER TABLE `soup_quotes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(100) NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'testuser','1','testuser@example.com','2024-09-25 09:31:27'),(2,'default_username','default_password','default_email@example.com','2024-09-25 09:35:44'),(4,'default_user','default_password','unique_email@example.com','2024-09-25 09:37:19'),(5,'1','1','1@qq.com','2024-09-25 13:15:15'),(6,'Sheerio','Led647716','2900952121@qq.com','2024-09-25 15:23:47'),(7,'6','6','6@99','2024-09-30 08:10:32'),(8,'Yuen','Lyh647716','2253551@tongji.edu.cn','2024-09-30 08:55:24'),(9,'7','7','7@q.com','2024-09-30 09:02:40');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `weather_info`
--

DROP TABLE IF EXISTS `weather_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `weather_info` (
  `id` int NOT NULL AUTO_INCREMENT,
  `text` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `temp` double DEFAULT NULL,
  `detail` varchar(255) DEFAULT NULL,
  `location_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_location_id` (`location_id`),
  CONSTRAINT `fk_location_id` FOREIGN KEY (`location_id`) REFERENCES `location` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=431 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `weather_info`
--

LOCK TABLES `weather_info` WRITE;
/*!40000 ALTER TABLE `weather_info` DISABLE KEYS */;
INSERT INTO `weather_info` VALUES (12,'阴',21.5,'今日全球各地昼夜等长',16),(13,'晴',12.1,'时至秋分，暑热已消，天气转凉',15),(14,'多云',25.5,'秋季第四个节气-秋分到了',19),(15,'多云',25.5,'过了秋分，气温降速加快',19),(16,'多云',26.4,'过了秋分，气温降速加快',19),(17,'多云',23.6,'时至秋分，暑热已消，天气转凉',19),(18,'多云',22.9,'秋分平分秋季，日夜等长',19),(19,'多云',22.9,'过了秋分，气温降速加快',19),(20,'多云',22.9,'今日全球各地昼夜等长',19),(21,'多云',22.9,'时至秋分，暑热已消，天气转凉',19),(22,'晴',19.2,'今日全球各地昼夜等长',21),(23,'晴',19.2,'秋分平分秋季，日夜等长',21),(24,'晴',19.2,'时至秋分，暑热已消，天气转凉',21),(25,'多云',22.1,'秋分平分秋季，日夜等长',22),(26,'晴',16,'今日全球各地昼夜等长',27),(27,'晴',16,'今日全球各地昼夜等长',27),(28,'晴',16,'秋分平分秋季，日夜等长',27),(29,'晴',16,'过了秋分，气温降速加快',27),(30,'晴',14.3,'时至秋分，暑热已消，天气转凉',27),(31,'晴',14.3,'秋季第四个节气-秋分到了',27),(32,'晴',14.3,'过了秋分，气温降速加快',27),(33,'晴',19.2,'天气有点凉，出门不穿单',27),(34,'晴',19.1,'有点湿凉，穿件外套刚刚好',27),(35,'晴',19.1,'有点湿凉，穿件外套刚刚好',27),(36,'晴',16.9,'有点湿凉，穿件外套刚刚好',27),(37,'晴',16.9,'有点湿凉，穿件外套刚刚好',27),(38,'晴',16.1,'有点湿凉，穿件外套刚刚好',27),(39,'晴',16.1,'有点湿凉，穿件外套刚刚好',27),(40,'晴',16.1,'有点湿凉，穿件外套刚刚好',27),(41,'晴',16.1,'有点湿凉，穿件外套刚刚好',27),(42,'多云',21.9,'冷热适宜，心情也很美丽',27),(43,'阴',25,'有些闷热，清凉着装',31),(44,'晴',31.8,'闷热难耐，仿佛身在桑拿房',35),(45,'晴',31.6,'我不是胖，只是热得膨胀',37),(46,'晴',33.2,'天气热乎乎，身上黏糊糊',45),(47,'晴',33.2,'无风狂出汗，心静也不凉',48),(48,'晴',26.7,'有些闷热，清凉着装',63),(49,'晴',26.7,'天气有点儿闷，适当少穿点',65),(50,'晴',26.7,'有些闷热，清凉着装',65),(51,'晴',31.8,'天气闷热，当心中暑哦',73),(52,'晴',31.8,'天气热乎乎，身上黏糊糊',78),(53,'晴',31.8,'无风狂出汗，心静也不凉',79),(54,'晴',29.9,'闷热难耐，仿佛身在桑拿房',134),(55,'多云',28.9,'天气有点儿闷，适当少穿点',132),(56,'晴',29.3,'无风狂出汗，心静也不凉',200),(57,'晴',29.3,'无风狂出汗，心静也不凉',200),(58,'晴',27.9,'天气略微有点儿热哦',203),(59,'晴',27.9,'略微偏热，适当穿得清凉些',203),(60,'晴',27.9,'略微偏热，适当穿得清凉些',205),(61,'晴',27.9,'略微偏热，适当穿得清凉些',206),(62,'晴',27.9,'天气略微有点儿热哦',206),(63,'晴',29.3,'天气闷热，当心中暑哦',208),(64,'晴',29.3,'天气热乎乎，身上黏糊糊',208),(65,'晴',29.3,'天气闷热，当心中暑哦',210),(66,'晴',29.3,'天气热乎乎，身上黏糊糊',210),(67,'晴',29.3,'天气闷热，当心中暑哦',212),(68,'晴',29.3,'无风狂出汗，心静也不凉',212),(69,'晴',29.3,'天气热乎乎，身上黏糊糊',212),(70,'晴',27.9,'天气略微有点儿热哦',215),(71,'晴',27.9,'略微偏热，适当穿得清凉些',216),(72,'晴',29.3,'天气热乎乎，身上黏糊糊',217),(73,'晴',29.3,'无风狂出汗，心静也不凉',218),(74,'晴',29.3,'天气闷热，当心中暑哦',219),(75,'晴',29.3,'无风狂出汗，心静也不凉',220),(76,'晴',29.3,'无风狂出汗，心静也不凉',221),(77,'晴',29.3,'天气闷热，当心中暑哦',222),(78,'晴',29.3,'无风狂出汗，心静也不凉',223),(79,'晴',29.3,'天气闷热，当心中暑哦',224),(80,'晴',29.3,'天气热乎乎，身上黏糊糊',224),(81,'晴',27.9,'天气略微有点儿热哦',226),(82,'晴',27.9,'天气略微有点儿热哦',227),(83,'晴',27.9,'略微偏热，适当穿得清凉些',228),(84,'晴',27.9,'天气略微有点儿热哦',229),(85,'晴',27.9,'天气略微有点儿热哦',229),(86,'晴',29.3,'无风狂出汗，心静也不凉',230),(87,'晴',29.3,'天气闷热，当心中暑哦',231),(88,'晴',29.3,'无风狂出汗，心静也不凉',232),(89,'晴',29.3,'无风狂出汗，心静也不凉',232),(90,'晴',29.3,'天气闷热，当心中暑哦',234),(91,'晴',29.3,'无风狂出汗，心静也不凉',235),(92,'晴',29.3,'天气热乎乎，身上黏糊糊',235),(93,'晴',27.9,'天气略微有点儿热哦',237),(94,'晴',27.9,'略微偏热，适当穿得清凉些',238),(95,'晴',27.9,'略微偏热，适当穿得清凉些',238),(96,'晴',29.3,'天气闷热，当心中暑哦',240),(97,'晴',29.3,'无风狂出汗，心静也不凉',240),(98,'晴',27.9,'略微偏热，适当穿得清凉些',241),(99,'晴',27.9,'天气略微有点儿热哦',242),(100,'晴',29.3,'无风狂出汗，心静也不凉',243),(101,'晴',29.3,'天气闷热，当心中暑哦',244),(102,'晴',29.3,'天气热乎乎，身上黏糊糊',245),(103,'晴',29.3,'天气热乎乎，身上黏糊糊',246),(104,'晴',28.8,'略微偏热，适当穿得清凉些',247),(105,'晴',28.8,'天气略微有点儿热哦',247),(106,'晴',28.8,'略微偏热，适当穿得清凉些',247),(107,'晴',28.8,'略微偏热，适当穿得清凉些',247),(108,'晴',27.6,'天气有点儿闷，适当少穿点',251),(109,'晴',27.6,'天气有点儿闷，适当少穿点',252),(110,'晴',27.6,'有些闷热，清凉着装',252),(111,'晴',27.6,'天气有点儿闷，适当少穿点',252),(112,'晴',27.6,'天气有点儿闷，适当少穿点',255),(113,'晴',27.6,'有些闷热，清凉着装',256),(114,'晴',28.8,'天气略微有点儿热哦',257),(115,'晴',28.8,'天气略微有点儿热哦',258),(116,'晴',28.8,'略微偏热，适当穿得清凉些',259),(117,'晴',28.8,'天气略微有点儿热哦',260),(118,'晴',28.8,'略微偏热，适当穿得清凉些',261),(119,'晴',28.8,'略微偏热，适当穿得清凉些',262),(120,'晴',28.8,'天气略微有点儿热哦',263),(121,'晴',28.8,'略微偏热，适当穿得清凉些',264),(122,'晴',28.8,'天气略微有点儿热哦',265),(123,'晴',28.8,'天气略微有点儿热哦',266),(124,'晴',28.8,'略微偏热，适当穿得清凉些',267),(125,'晴',28.8,'略微偏热，适当穿得清凉些',268),(126,'晴',28.8,'天气略微有点儿热哦',269),(127,'晴',27.6,'天气有点儿闷，适当少穿点',270),(128,'晴',27.6,'天气有点儿闷，适当少穿点',271),(129,'晴',27.6,'天气有点儿闷，适当少穿点',272),(130,'晴',27.6,'天气有点儿闷，适当少穿点',273),(131,'晴',27.6,'天气有点儿闷，适当少穿点',273),(132,'晴',27.6,'天气有点儿闷，适当少穿点',273),(133,'晴',28.8,'略微偏热，适当穿得清凉些',276),(134,'晴',28.8,'天气略微有点儿热哦',277),(135,'晴',27.6,'天气有点儿闷，适当少穿点',278),(136,'晴',27.6,'天气有点儿闷，适当少穿点',279),(137,'晴',27.6,'有些闷热，清凉着装',280),(138,'晴',28.8,'天气略微有点儿热哦',281),(139,'晴',28.8,'略微偏热，适当穿得清凉些',282),(140,'晴',28.8,'天气略微有点儿热哦',282),(141,'晴',27.6,'有些闷热，清凉着装',284),(142,'晴',27.6,'有些闷热，清凉着装',284),(143,'晴',27.6,'天气有点儿闷，适当少穿点',284),(144,'晴',28.8,'略微偏热，适当穿得清凉些',287),(145,'晴',28.8,'天气略微有点儿热哦',288),(146,'晴',28.8,'天气略微有点儿热哦',288),(147,'晴',28.8,'略微偏热，适当穿得清凉些',290),(148,'晴',28.8,'天气略微有点儿热哦',290),(149,'晴',28.8,'天气略微有点儿热哦',290),(150,'晴',28.8,'天气略微有点儿热哦',293),(151,'晴',27.6,'有些闷热，清凉着装',294),(152,'晴',27.6,'天气有点儿闷，适当少穿点',295),(153,'晴',28.8,'天气略微有点儿热哦',296),(154,'晴',27.6,'天气有点儿闷，适当少穿点',297),(155,'晴',27.6,'天气有点儿闷，适当少穿点',298),(156,'晴',28.8,'略微偏热，适当穿得清凉些',299),(157,'晴',28.8,'略微偏热，适当穿得清凉些',299),(158,'晴',28.8,'天气略微有点儿热哦',301),(159,'晴',28.8,'略微偏热，适当穿得清凉些',302),(160,'晴',27.6,'天气有点儿闷，适当少穿点',303),(161,'晴',27.6,'有些闷热，清凉着装',304),(162,'晴',27.6,'天气有点儿闷，适当少穿点',305),(163,'晴',27.6,'有些闷热，清凉着装',306),(164,'晴',27.6,'有些闷热，清凉着装',307),(165,'晴',28.8,'略微偏热，适当穿得清凉些',308),(166,'晴',27.6,'天气有点儿闷，适当少穿点',309),(167,'晴',28.8,'略微偏热，适当穿得清凉些',310),(168,'晴',27.6,'天气有点儿闷，适当少穿点',311),(169,'晴',27.6,'天气有点儿闷，适当少穿点',312),(170,'晴',28.8,'天气略微有点儿热哦',313),(171,'晴',28.8,'略微偏热，适当穿得清凉些',314),(172,'晴',26.5,'有些闷热，清凉着装',315),(173,'晴',26.5,'天气有点儿闷，适当少穿点',316),(174,'晴',26.5,'天气有点儿闷，适当少穿点',317),(175,'晴',27.2,'有些闷热，清凉着装',318),(176,'晴',27.2,'有些闷热，清凉着装',318),(177,'晴',27.2,'天气有点儿闷，适当少穿点',318),(178,'晴',26.5,'有些闷热，清凉着装',321),(179,'晴',26.5,'有些闷热，清凉着装',322),(180,'晴',26.5,'天气有点儿闷，适当少穿点',323),(181,'晴',26.5,'天气有点儿闷，适当少穿点',323),(182,'多云',27.3,'有些闷热，清凉着装',325),(183,'多云',27.3,'天气有点儿闷，适当少穿点',326),(184,'多云',27.3,'天气有点儿闷，适当少穿点',327),(185,'多云',27.3,'天气有点儿闷，适当少穿点',328),(186,'多云',27.3,'有些闷热，清凉着装',329),(187,'多云',27.3,'有些闷热，清凉着装',330),(188,'多云',27.3,'天气有点儿闷，适当少穿点',331),(189,'多云',27.3,'有些闷热，清凉着装',331),(190,'多云',27.3,'有些闷热，清凉着装',333),(191,'多云',27.3,'天气有点儿闷，适当少穿点',334),(192,'多云',27.3,'天气有点儿闷，适当少穿点',335),(193,'多云',27.3,'有些闷热，清凉着装',336),(194,'晴',26.5,'天气有点儿闷，适当少穿点',337),(195,'晴',26.5,'有些闷热，清凉着装',337),(196,'晴',26.5,'有些闷热，清凉着装',339),(197,'晴',26.5,'有些闷热，清凉着装',340),(198,'晴',26.5,'有些闷热，清凉着装',341),(199,'多云',27.3,'有些闷热，清凉着装',342),(200,'多云',27.3,'天气有点儿闷，适当少穿点',343),(201,'多云',27.3,'天气有点儿闷，适当少穿点',344),(202,'多云',27.3,'天气有点儿闷，适当少穿点',345),(203,'晴',26.5,'天气有点儿闷，适当少穿点',346),(204,'晴',26.5,'天气有点儿闷，适当少穿点',347),(205,'晴',26.5,'天气有点儿闷，适当少穿点',348),(206,'晴',29,'我不是胖，只是热得膨胀',349),(207,'晴',29,'闷热难耐，仿佛身在桑拿房',350),(208,'晴',28.9,'有些闷热，清凉着装',351),(209,'多云',30.1,'我不是胖，只是热得膨胀',352),(210,'晴',33.2,'闷热难耐，仿佛身在桑拿房',353),(211,'晴',33.2,'我不是胖，只是热得膨胀',363),(212,'晴',33.8,'天气热乎乎，身上黏糊糊',364),(213,'晴',33.8,'轻度污染，敏感人群注意防护',364),(214,'多云',29.7,'闷热难耐，仿佛身在桑拿房',366),(215,'多云',29.7,'闷热难耐，仿佛身在桑拿房',367),(216,'多云',29.1,'闷热难耐，仿佛身在桑拿房',368),(217,'多云',29.1,'闷热难耐，仿佛身在桑拿房',369),(218,'晴',33.8,'轻度污染，敏感人群注意防护',370),(219,'多云',29.1,'我不是胖，只是热得膨胀',371),(220,'多云',29.1,'我不是胖，只是热得膨胀',372),(221,'多云',29.1,'闷热难耐，仿佛身在桑拿房',372),(222,'晴',33.8,'天气热乎乎，身上黏糊糊',373),(223,'晴',33.8,'轻度污染，敏感人群注意防护',374),(224,'晴',33.8,'轻度污染，敏感人群注意防护',375),(225,'晴',33.8,'轻度污染，敏感人群注意防护',375),(226,'晴',33.8,'无风狂出汗，心静也不凉',375),(227,'晴',33.8,'轻度污染，敏感人群注意防护',375),(228,'晴',33.8,'轻度污染，敏感人群注意防护',378),(229,'晴',33.8,'天气热乎乎，身上黏糊糊',378),(230,'多云',29.1,'闷热难耐，仿佛身在桑拿房',380),(231,'多云',29.1,'闷热难耐，仿佛身在桑拿房',381),(232,'多云',29.1,'我不是胖，只是热得膨胀',382),(233,'晴',33.8,'天气热乎乎，身上黏糊糊',383),(234,'晴',33.8,'天气闷热，当心中暑哦',383),(235,'多云',29.1,'闷热难耐，仿佛身在桑拿房',385),(236,'晴',33.8,'天气热乎乎，身上黏糊糊',386),(237,'晴',33.8,'天气闷热，当心中暑哦',386),(238,'晴',33.8,'轻度污染，敏感人群注意防护',388),(239,'晴',33.8,'轻度污染，敏感人群注意防护',389),(240,'晴',33.8,'天气热乎乎，身上黏糊糊',390),(241,'晴',33.8,'天气热乎乎，身上黏糊糊',390),(242,'晴',33.8,'天气热乎乎，身上黏糊糊',392),(243,'多云',29.1,'闷热难耐，仿佛身在桑拿房',393),(244,'多云',29.1,'闷热难耐，仿佛身在桑拿房',394),(245,'多云',29.1,'我不是胖，只是热得膨胀',395),(246,'多云',29.1,'闷热难耐，仿佛身在桑拿房',396),(247,'多云',29.2,'闷热难耐，仿佛身在桑拿房',397),(248,'晴',33.2,'天气闷热，当心中暑哦',399),(249,'晴',33.2,'轻度污染，敏感人群注意防护',400),(250,'晴',33.2,'天气闷热，当心中暑哦',401),(251,'晴',33.2,'轻度污染，敏感人群注意防护',402),(252,'晴',33.2,'轻度污染，敏感人群注意防护',403),(253,'多云',29.2,'闷热难耐，仿佛身在桑拿房',404),(254,'多云',29.2,'我不是胖，只是热得膨胀',405),(255,'多云',29.2,'我不是胖，只是热得膨胀',406),(256,'晴',33.2,'无风狂出汗，心静也不凉',132),(257,'晴',33.2,'轻度污染，敏感人群注意防护',408),(258,'晴',33.2,'无风狂出汗，心静也不凉',409),(259,'晴',33.2,'无风狂出汗，心静也不凉',410),(260,'晴',33.2,'无风狂出汗，心静也不凉',411),(261,'晴',33.2,'轻度污染，敏感人群注意防护',412),(262,'晴',33.2,'天气热乎乎，身上黏糊糊',413),(263,'晴',33.2,'轻度污染，敏感人群注意防护',414),(264,'晴',33.2,'无风狂出汗，心静也不凉',415),(265,'晴',33.2,'天气热乎乎，身上黏糊糊',415),(266,'晴',33.2,'天气热乎乎，身上黏糊糊',416),(267,'晴',33.2,'轻度污染，敏感人群注意防护',417),(268,'多云',29.2,'我不是胖，只是热得膨胀',418),(269,'晴',33.2,'天气闷热，当心中暑哦',419),(270,'晴',33.2,'天气热乎乎，身上黏糊糊',420),(271,'晴',33.2,'轻度污染，敏感人群注意防护',421),(272,'多云',29.2,'我不是胖，只是热得膨胀',422),(273,'多云',29.2,'闷热难耐，仿佛身在桑拿房',423),(274,'多云',29.2,'我不是胖，只是热得膨胀',424),(275,'晴',33.2,'轻度污染，敏感人群注意防护',425),(276,'晴',33.2,'无风狂出汗，心静也不凉',426),(277,'晴',33.2,'天气热乎乎，身上黏糊糊',427),(278,'晴',33.2,'无风狂出汗，心静也不凉',428),(279,'晴',33.2,'无风狂出汗，心静也不凉',429),(280,'晴',33.2,'无风狂出汗，心静也不凉',430),(281,'晴',33.2,'轻度污染，敏感人群注意防护',431),(282,'晴',33.2,'轻度污染，敏感人群注意防护',432),(283,'晴',33.2,'轻度污染，敏感人群注意防护',433),(284,'晴',33.2,'无风狂出汗，心静也不凉',434),(285,'晴',33.2,'天气热乎乎，身上黏糊糊',435),(286,'晴',33.2,'轻度污染，敏感人群注意防护',435),(287,'晴',33.2,'天气热乎乎，身上黏糊糊',435),(288,'多云',29.2,'我不是胖，只是热得膨胀',438),(289,'多云',29.2,'我不是胖，只是热得膨胀',439),(290,'多云',29.2,'我不是胖，只是热得膨胀',440),(291,'多云',29.2,'闷热难耐，仿佛身在桑拿房',441),(292,'多云',29.2,'闷热难耐，仿佛身在桑拿房',442),(293,'多云',29.2,'我不是胖，只是热得膨胀',443),(294,'多云',29.2,'闷热难耐，仿佛身在桑拿房',444),(295,'晴',33.2,'轻度污染，敏感人群注意防护',446),(296,'晴',33.2,'轻度污染，敏感人群注意防护',446),(297,'多云',29.2,'我不是胖，只是热得膨胀',448),(298,'多云',29.2,'我不是胖，只是热得膨胀',445),(299,'多云',29.2,'我不是胖，只是热得膨胀',450),(300,'晴',33.2,'轻度污染，敏感人群注意防护',451),(301,'晴',33.2,'天气闷热，当心中暑哦',452),(302,'晴',33.2,'天气热乎乎，身上黏糊糊',453),(303,'多云',31.1,'人山人海，我后悔出来了',454),(304,'阴',23.3,'为祖国妈妈庆生！',456),(305,'阴',23.3,'人山人海，我后悔出来了',457),(306,'阴',23.3,'七天长假如何过？',457),(307,'阴',23.3,'最幸福的，莫过长假才开始',457),(308,'阴',23.3,'最幸福的，莫过长假才开始',458),(309,'阴',23.3,'七天长假如何过？',459),(310,'阴',23.3,'宅在家里不失一个选择',459),(311,'阴',23.3,'人山人海，我后悔出来了',459),(312,'阴',23.3,'人山人海，我后悔出来了',459),(313,'阴',23.3,'宅在家里不失一个选择',459),(314,'阴',23.3,'七天长假如何过？',459),(315,'多云',31.9,'人山人海，我后悔出来了',460),(316,'多云',31.9,'宅在家里不失一个选择',461),(317,'多云',31.9,'人山人海，我后悔出来了',461),(318,'多云',31.9,'为祖国妈妈庆生！',461),(319,'多云',31.9,'宅在家里不失一个选择',462),(320,'多云',31.9,'宅在家里不失一个选择',463),(321,'多云',31.9,'宅在家里不失一个选择',464),(322,'多云',31.9,'人山人海，我后悔出来了',464),(323,'多云',31.9,'宅在家里不失一个选择',465),(324,'多云',31.9,'为祖国妈妈庆生！',466),(325,'多云',31.9,'七天长假如何过？',466),(326,'阴',23.3,'人山人海，我后悔出来了',467),(327,'阴',22.2,'为祖国妈妈庆生！',468),(328,'阴',22.2,'人山人海，我后悔出来了',469),(329,'阴',22.2,'最幸福的，莫过长假才开始',469),(330,'阴',22.2,'为祖国妈妈庆生！',470),(331,'多云',32.1,'人山人海，我后悔出来了',407),(332,'多云',31.2,'为祖国妈妈庆生！',472),(333,'多云',31.2,'人山人海，我后悔出来了',473),(334,'多云',31.2,'人山人海，我后悔出来了',474),(335,'多云',31.2,'最幸福的，莫过长假才开始',474),(336,'多云',31.2,'为祖国妈妈庆生！',475),(337,'多云',31.2,'人山人海，我后悔出来了',476),(338,'多云',31.2,'为祖国妈妈庆生！',476),(339,'多云',31.2,'最幸福的，莫过长假才开始',476),(340,'多云',31.2,'为祖国妈妈庆生！',476),(341,'多云',31.2,'为祖国妈妈庆生！',477),(342,'多云',31.2,'宅在家里不失一个选择',477),(343,'多云',31.2,'宅在家里不失一个选择',477),(344,'多云',31.2,'七天长假如何过？',477),(345,'多云',31.2,'最幸福的，莫过长假才开始',477),(346,'多云',31.2,'最幸福的，莫过长假才开始',477),(347,'多云',31.2,'七天长假如何过？',477),(348,'多云',31.2,'为祖国妈妈庆生！',477),(349,'阴',22.1,'人山人海，我后悔出来了',478),(350,'阴',22.1,'为祖国妈妈庆生！',479),(351,'阴',22.1,'为祖国妈妈庆生！',480),(352,'阴',22.1,'七天长假如何过？',481),(353,'多云',31.1,'为祖国妈妈庆生！',482),(354,'多云',31.1,'人山人海，我后悔出来了',482),(355,'阴',22,'宅在家里不失一个选择',483),(356,'阴',22,'七天长假如何过？',484),(357,'阴',22,'人山人海，我后悔出来了',484),(358,'多云',31.1,'宅在家里不失一个选择',485),(359,'多云',31.1,'为祖国妈妈庆生！',485),(360,'多云',31.1,'七天长假如何过？',486),(361,'多云',31.1,'最幸福的，莫过长假才开始',487),(362,'阴',22,'为祖国妈妈庆生！',488),(363,'多云',31.1,'最幸福的，莫过长假才开始',489),(364,'多云',31.1,'宅在家里不失一个选择',490),(365,'阴',22,'最幸福的，莫过长假才开始',491),(366,'多云',31.1,'宅在家里不失一个选择',492),(367,'多云',31.1,'七天长假如何过？',492),(368,'多云',31.1,'七天长假如何过？',492),(369,'阴',22,'七天长假如何过？',493),(370,'阴',22,'为祖国妈妈庆生！',494),(371,'阴',22,'最幸福的，莫过长假才开始',495),(372,'阴',22,'人山人海，我后悔出来了',495),(373,'阴',22,'宅在家里不失一个选择',495),(374,'阴',22,'七天长假如何过？',496),(375,'阴',22,'为祖国妈妈庆生！',497),(376,'阴',22,'人山人海，我后悔出来了',497),(377,'多云',31.1,'七天长假如何过？',498),(378,'多云',31.1,'七天长假如何过？',499),(379,'多云',31.1,'人山人海，我后悔出来了',499),(380,'多云',30.9,'七天长假如何过？',499),(381,'阴',21.6,'为祖国妈妈庆生！',500),(382,'阴',21.6,'人山人海，我后悔出来了',500),(383,'晴',14.8,'最幸福的，莫过长假才开始',501),(384,'晴',14.8,'人山人海，我后悔出来了',502),(385,'晴',14.8,'最幸福的，莫过长假才开始',502),(386,'晴',14.8,'人山人海，我后悔出来了',502),(387,'晴',14.8,'为祖国妈妈庆生！',502),(388,'晴',14.8,'宅在家里不失一个选择',502),(389,'晴',14.8,'人山人海，我后悔出来了',502),(390,'晴',14.8,'七天长假如何过？',502),(391,'晴',14.8,'为祖国妈妈庆生！',502),(392,'阴',21.6,'为祖国妈妈庆生！',503),(393,'阴',21.6,'宅在家里不失一个选择',504),(394,'阴',21.6,'宅在家里不失一个选择',504),(395,'阴',21.6,'人山人海，我后悔出来了',505),(396,'阴',21.6,'人山人海，我后悔出来了',506),(397,'阴',21.6,'七天长假如何过？',506),(398,'阴',21.6,'人山人海，我后悔出来了',506),(399,'阴',21.6,'最幸福的，莫过长假才开始',506),(400,'阴',21.6,'宅在家里不失一个选择',506),(401,'阴',21.6,'最幸福的，莫过长假才开始',507),(402,'阴',21.6,'最幸福的，莫过长假才开始',471),(403,'阴',21.6,'为祖国妈妈庆生！',509),(404,'小雨',21.6,'人山人海，我后悔出来了',510),(405,'小雨',21.6,'宅在家里不失一个选择',510),(406,'小雨',21.6,'最幸福的，莫过长假才开始',508),(407,'晴',14.7,'宅在家里不失一个选择',512),(408,'小雨',20.5,'人山人海，我后悔出来了',513),(409,'小雨',20.5,'人山人海，我后悔出来了',514),(410,'小雨',20.5,'七天长假如何过？',515),(411,'阴',20.5,'七天长假如何过？',516),(412,'阴',20.5,'人山人海，我后悔出来了',516),(413,'阴',20.6,'为祖国妈妈庆生！',517),(414,'晴',9.6,'为祖国妈妈庆生！',518),(415,'阴',20.6,'人山人海，我后悔出来了',519),(416,'阴',20.6,'宅在家里不失一个选择',519),(417,'阴',20.6,'七天长假如何过？',519),(418,'阴',20.6,'宅在家里不失一个选择',519),(419,'阴',20.6,'为祖国妈妈庆生！',523),(420,'阴',20.6,'人山人海，我后悔出来了',524),(421,'阴',20.6,'人山人海，我后悔出来了',525),(422,'阴',20.6,'宅在家里不失一个选择',526),(423,'阴',20.6,'人山人海，我后悔出来了',526),(424,'阴',20.6,'为祖国妈妈庆生！',526),(425,'晴',8.1,'七天长假如何过？',529),(426,'晴',8.1,'人山人海，我后悔出来了',530),(427,'阴',20.6,'宅在家里不失一个选择',531),(428,'阴',20.6,'为祖国妈妈庆生！',532),(429,'阴',20.6,'为祖国妈妈庆生！',533),(430,'阴',20.6,'人山人海，我后悔出来了',534);
/*!40000 ALTER TABLE `weather_info` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-10-01 20:51:02
</file>

<file path="moodbloom_springboot/moodbloom/.idea/compiler.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="moodbloom" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="moodbloom" options="-parameters" />
    </option>
  </component>
</project>
</file>

<file path="moodbloom_springboot/moodbloom/.idea/encodings.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
  </component>
</project>
</file>

<file path="moodbloom_springboot/moodbloom/.idea/jarRepositories.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>
</file>

<file path="moodbloom_springboot/moodbloom/.idea/misc.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK" />
</project>
</file>

<file path="moodbloom_springboot/moodbloom/.idea/workspace.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="ab8de133-24b8-4133-8942-d42be3064f0c" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="HTML File" />
        <option value="Kotlin Class" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2mIB5rQNZ6P8PVXKyJ8qv6b48CK" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
    &quot;Maven.moodbloom [package].executor&quot;: &quot;Run&quot;,
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;Spring Boot.MoodbloomApplication.executor&quot;: &quot;Run&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;G:/university/project-moodbloom/moodbloom/moodbloom/pom.xml&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;http.proxy&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration default="true" type="JetRunConfigurationType">
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <option name="filePath" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="MoodbloomApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="moodbloom" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="sheerio.moodbloom.moodbloom.MoodbloomApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ab8de133-24b8-4133-8942-d42be3064f0c" name="Changes" comment="" />
      <created>1726754030252</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1726754030252</updated>
      <workItem from="1726754031458" duration="609000" />
      <workItem from="1726806932867" duration="4630000" />
      <workItem from="1726811998214" duration="19627000" />
      <workItem from="1726916949821" duration="7421000" />
      <workItem from="1726926906286" duration="15001000" />
      <workItem from="1727002237296" duration="7000" />
      <workItem from="1727002307618" duration="18000" />
      <workItem from="1727002354467" duration="9731000" />
      <workItem from="1727096379060" duration="3291000" />
      <workItem from="1727164093421" duration="1433000" />
      <workItem from="1727230633637" duration="68441000" />
      <workItem from="1727754039054" duration="21929000" />
      <workItem from="1728215486116" duration="2331000" />
      <workItem from="1728370107854" duration="1631000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <breakpoint enabled="true" type="java-exception">
          <properties class="org.springframework.beans.factory.BeanCreationException" package="org.springframework.beans.factory" />
          <option name="timeStamp" value="1" />
        </breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>
</file>

<file path="moodbloom_springboot/moodbloom/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="moodbloom_springboot/moodbloom/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>sheerio.moodbloom</groupId>
	<artifactId>moodbloom</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>moodbloom</name>
	<description>A mood tracking application</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>


		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<version>4.9.3</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20230227</version> <!-- 使用最新版本 -->
		</dependency>



	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/AppConfig.java">
package sheerio.moodbloom.moodbloom.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/CorsConfig.java">
package sheerio.moodbloom.moodbloom.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // 允许所有路径
                .allowedOrigins(
                        "http://localhost:8080",
                        "https://124.222.156.13", // 你服务器的公网IP
                        "https://yuen.club" // 你服务器的域名
                ) // 允许多个来源的跨域请求
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // 允许的HTTP方法
                .allowedHeaders("*") // 允许所有头部
                .allowCredentials(true) // 允许携带凭证（如Cookies）
                .maxAge(3600); // 预检请求的缓存时间，单位为秒
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/config/TextRequest.java">
package sheerio.moodbloom.moodbloom.config;

public class TextRequest {
    private String text;

    // Getter 和 Setter
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/HomeController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/speech")
    public String speechRecognition() {
        return "speechRecognition";  // 对应 templates/speechRecognition.html
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/LocationController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.service.LocationService;
import sheerio.moodbloom.moodbloom.service.UserService;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/location")
@CrossOrigin(origins = "http://127.0.0.1:5501")  // 允许从该前端地址访问
public class LocationController {

    @Autowired
    private LocationService locationService;

    @Autowired
    private UserService userService;

    // 接收前端的POST请求，保存位置信息到数据库
    @PostMapping("/save")
    public ResponseEntity<Location> saveLocation(@RequestBody Location location, @RequestParam Integer userId) {
        // 根据 userId 获取 User 实体
        User user = userService.findById(userId);

        if (user == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);  // 如果 userId 无效，返回 404
        }

        // 将 User 设置到 Location 中
        location.setUser(user);

        // 调用服务层保存位置信息
        Location savedLocation = locationService.saveLocation(location);

        // 返回保存后的位置信息
        return new ResponseEntity<>(savedLocation, HttpStatus.CREATED);
    }

    @GetMapping("/current")
    public ResponseEntity<?> getLatestLocation(@RequestParam("userId") Integer userId) {
        try {
            // 通过用户ID获取最新的位置信息
            Optional<Location> locationOpt = locationService.getLatestLocationByUserId(userId);
            Map<String, Object> result = new HashMap<>();

            if (locationOpt.isPresent()) {
                Location location = locationOpt.get();
                result.put("location", location);  // 将位置信息放入返回结果中
                return ResponseEntity.ok(result);
            } else {
                return ResponseEntity.status(404).body("用户ID " + userId + " 没有找到位置信息");
            }
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }



}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/ModelResponseController.java">
package sheerio.moodbloom.moodbloom.controller;

import sheerio.moodbloom.moodbloom.service.ModelResponseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/model-response")
public class ModelResponseController {

    @Autowired
    private ModelResponseService modelResponseService;

    @GetMapping("/send/{moodRecordId}")
    public String sendModelResponse(@PathVariable Integer moodRecordId) {
        return modelResponseService.sendToModelAndSaveResponse(moodRecordId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodAnalysisController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.config.TextRequest;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;
import sheerio.moodbloom.moodbloom.service.MoodAnalysisService;

@RestController
@RequestMapping("/api/mood")
public class MoodAnalysisController {
    private final MoodAnalysisService moodAnalysisService;

    public MoodAnalysisController(MoodAnalysisService moodAnalysisService) {
        this.moodAnalysisService = moodAnalysisService;
    }

    // 修改为使用 @RequestBody 接收 JSON 格式的请求
    @PostMapping("/analyze")
    public ResponseEntity<MoodAnalysis> analyzeMood(@RequestBody TextRequest textRequest) {
        try {
            MoodAnalysis result = moodAnalysisService.analyzeMood(textRequest.getText());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).build();
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/MoodRecordController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;
import sheerio.moodbloom.moodbloom.service.MoodRecordService;
import sheerio.moodbloom.moodbloom.service.ModelResponseService;
import sheerio.moodbloom.moodbloom.service.UploadImageService;

import java.time.LocalDate;
import java.util.*;

@RestController
@RequestMapping("/api/mood")
public class MoodRecordController {

    @Autowired
    private MoodRecordService moodRecordService;

    @Autowired
    private ModelResponseService modelResponseService;

    @Autowired
    private UploadImageService uploadImageService;

    // 新增心情记录并支持图片上传
    @PostMapping("/add")
    public ResponseEntity<?> addMoodRecord(@RequestParam("userId") Integer userId,
                                           @RequestParam(value = "moodText", required = false) String moodText,
                                           @RequestParam(value = "images", required = false) MultipartFile[] images) {
        try {
            MoodRecord moodRecord = new MoodRecord();
            moodRecord.setMoodText(moodText);

            // 添加心情记录，并处理图片上传
            MoodRecord newMoodRecord = moodRecordService.addMoodRecord(moodRecord, userId, images);

            // 调用 AI 模型生成回复
            String aiResponse = modelResponseService.sendToModelAndSaveResponse(newMoodRecord.getId());

            // 返回心情记录和 AI 回复
            Map<String, Object> result = new HashMap<>();
            result.put("moodRecord", newMoodRecord);
            result.put("aiResponse", aiResponse);

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }


    // 查询指定用户的所有心情记录及其对应的AI回复
    @GetMapping("/all")
    public ResponseEntity<?> getAllMoodRecords(@RequestParam("userId") Integer userId,
                                               @RequestParam(value = "view", defaultValue = "both") String view) {
        try {
            List<MoodRecord> moodRecords = moodRecordService.getMoodRecordsByUserId(userId);
            Map<String, Object> result = new HashMap<>();

            if (view.equals("mood")) {
                result.put("moodRecords", moodRecords);
            } else {
                Map<Integer, String> aiResponses = new HashMap<>();
                for (MoodRecord moodRecord : moodRecords) {
                    ModelResponse modelResponse = modelResponseService.getResponseByMoodRecordId(moodRecord.getId());
                    String aiResponse = modelResponse != null ? modelResponse.getResponseText() : "AI 回复不存在";
                    aiResponses.put(moodRecord.getId(), aiResponse);
                }
                result.put("moodRecords", moodRecords);
                result.put("aiResponses", aiResponses);
            }

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }

    @GetMapping("/byDate")
    public ResponseEntity<?> getMoodRecordsByDate(
            @RequestParam("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @RequestParam("userId") Integer userId,
            @RequestParam(value = "includeAIResponses", required = false) Boolean includeAIResponses) {
        try {
            // 查询特定日期和用户的心情记录
            List<MoodRecord> moodRecords = moodRecordService.getMoodRecordsByDateAndUserId(date, userId);

            // 创建一个新的列表，用来存放心情记录、AI回复和图片URLs
            List<Map<String, Object>> moodRecordsWithDetails = new ArrayList<>();

            for (MoodRecord moodRecord : moodRecords) {
                Map<String, Object> moodDetails = new HashMap<>();
                moodDetails.put("moodRecord", moodRecord);

                // 获取与心情记录关联的图片URLs
                List<String> imageUrls = new ArrayList<>();
                if (moodRecord.getImages() != null) {
                    for (UploadImage image : moodRecord.getImages()) {
                        imageUrls.add(image.getImageUrl());
                    }
                }
                moodDetails.put("imageUrls", imageUrls);

                // 获取对应的AI回复
                if (Boolean.TRUE.equals(includeAIResponses)) {
                    ModelResponse modelResponse = modelResponseService.getResponseByMoodRecordId(moodRecord.getId());
                    String aiResponse = modelResponse != null ? modelResponse.getResponseText() : "AI 回复不存在";
                    moodDetails.put("aiResponse", aiResponse);
                }

                moodRecordsWithDetails.add(moodDetails);
            }

            // 返回心情记录和AI回复及图片URLs
            return ResponseEntity.ok(moodRecordsWithDetails);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }


    // 根据用户ID和记录ID删除心情记录
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deleteMoodRecord(@PathVariable Integer id, @RequestParam("userId") Integer userId) {
        try {
            boolean isDeleted = moodRecordService.deleteMoodRecordByIdAndUserId(id, userId);
            if (isDeleted) {
                return ResponseEntity.noContent().build();
            } else {
                return ResponseEntity.status(403).body("Not authorized to delete this record.");
            }
        } catch (Exception e) {
            return ResponseEntity.status(404).body("Error: " + e.getMessage());
        }
    }

    // 获取指定心情记录的图片
    @GetMapping("/images/{moodRecordId}")
    public ResponseEntity<?> getImagesByMoodRecordId(@PathVariable Integer moodRecordId) {
        try {
            // 获取与心情记录关联的图片
            List<UploadImage> images = uploadImageService.getImagesByMoodRecordId(moodRecordId);
            if (images.isEmpty()) {
                return ResponseEntity.ok("No images found for this mood record.");
            }

            // 返回图片的 URL 列表
            List<String> imageUrls = new ArrayList<>();
            for (UploadImage image : images) {
                imageUrls.add(image.getImageUrl());
            }

            return ResponseEntity.ok(imageUrls);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/NewsController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.News;
import sheerio.moodbloom.moodbloom.service.NewsService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/news")
public class NewsController {

    @Autowired
    private NewsService newsService;


    //从API获取今日7条新闻并保存到数据库
    @GetMapping("/fetch")
    public ResponseEntity<String> fetchNews() {
        try {
            newsService.fetchAndSaveNews();
            return ResponseEntity.ok("新闻数据已成功获取并保存到数据库。");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("获取新闻数据时发生错误：" + e.getMessage());
        }
    }

    // 获取最新的7条新闻
    @GetMapping("/latest")
    public ResponseEntity<List<News>> getLatestNews() {
        try {
            List<News> latestNews = newsService.getLatestNews();
            return ResponseEntity.ok(latestNews);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/SoupQuotesController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;
import sheerio.moodbloom.moodbloom.dao.Interface.SoupQuotesRepository;
import sheerio.moodbloom.moodbloom.service.SoupQuotesService;

import java.util.List;

@RestController
@RequestMapping("/api/soup-quotes")
public class SoupQuotesController {

    @Autowired
    private SoupQuotesService soupQuotesService;

    @Autowired
    private SoupQuotesRepository soupQuotesRepository;

    // 获取并保存心灵鸡汤语录
    @PostMapping("/fetch")
    public String fetchAndSaveQuote() {
        soupQuotesService.fetchAndSaveQuote();
        return "心灵鸡汤语录已成功获取并保存!";
    }

    // 获取数据库中所有心灵鸡汤语录
    @GetMapping("/all")
    public List<SoupQuotes> getAllQuotes() {
        return soupQuotesRepository.findAll();
    }

    // 根据ID获取特定的心灵鸡汤语录
    @GetMapping("/{id}")
    public SoupQuotes getQuoteById(@PathVariable Integer id) {
        return soupQuotesRepository.findById(id).orElse(null);
    }

    // 获取最新的心灵鸡汤语录
    @GetMapping("/latest")
    public SoupQuotes getLatestQuote() {
        return soupQuotesRepository.findLatestQuote();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/TextToImageController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.service.TextToImageService;
import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/api/txt2img")
public class TextToImageController {

    private final TextToImageService textToImageService;

    public TextToImageController(TextToImageService textToImageService) {
        this.textToImageService = textToImageService;
    }

    @PostMapping("/generate")
    public ResponseEntity<String> generateImage(@RequestBody Map<String, String> request) {
        String text = request.get("text");
        if (text == null || text.isEmpty()) {
            return ResponseEntity.badRequest().body("Text cannot be null or empty");
        }

        try {
            // Step 1: 生成图片的UID
            String uid = textToImageService.generateImageUid(text);

            // Step 2: 使用带轮询机制的方法获取图片链接
            String imageLink = textToImageService.getImageLinkWithPolling(uid);

            // 返回图片链接
            return ResponseEntity.ok(imageLink);
        } catch (IOException | InterruptedException e) {
            return ResponseEntity.status(500).body("Error generating image: " + e.getMessage());
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/UserController.java">
package sheerio.moodbloom.moodbloom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.service.UserService;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody Map<String, String> userDTO) {
        String username = userDTO.get("username");
        String password = userDTO.get("password");
        String email = userDTO.get("email");

        System.out.println("Attempting to register user with username: " + username + " and email: " + email);

        try {
            User user = userService.registerUser(username, password, email);
            Map<String, Object> response = new HashMap<>();
            response.put("id", user.getId());
            response.put("username", user.getUsername());
            response.put("email", user.getEmail());
            response.put("createdAt", user.getCreatedAt());
            System.out.println("User registered successfully: " + user.getUsername());
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            System.out.println("Registration error: " + e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }


    // 用户登录接口
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody Map<String, String> loginDTO) {
        String username = loginDTO.get("username");
        String password = loginDTO.get("password");

        try {
            User user = userService.loginUser(username, password);
            // 构建单独的响应结构，直接返回 userId 等字段
            Map<String, Object> response = new HashMap<>();
            response.put("message", "Login successful");
            response.put("userId", user.getId());
            response.put("username", user.getUsername());
            response.put("email", user.getEmail());
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/controller/WeatherController.java">
package sheerio.moodbloom.moodbloom.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;
import sheerio.moodbloom.moodbloom.dao.Interface.LocationRepository ;
import sheerio.moodbloom.moodbloom.service.LocationService;
import sheerio.moodbloom.moodbloom.service.WeatherService;
import sheerio.moodbloom.moodbloom.dao.Interface.WeatherInfoRepository;

import java.io.IOException;
import java.util.Optional;

@RestController
@RequestMapping("/api/weather")
public class WeatherController {

    @Autowired
    private WeatherService weatherService;

    @Autowired
    private LocationRepository locationRepository;

    @Autowired
    private WeatherInfoRepository weatherInfoRepository;

    @Autowired
    private LocationService locationService;

    // 获取指定 Location 的天气信息
    @GetMapping("/fetch/{locationId}")
    public ResponseEntity<?> fetchWeatherForLocation(@PathVariable Integer locationId) {
        // 查找 Location 实体
        Optional<Location> locationOpt = locationRepository.findById(locationId);

        if (locationOpt.isPresent()) {
            Location location = locationOpt.get();

            try {
                // 调用 WeatherService 获取天气信息并保存到数据库
                WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);
                return ResponseEntity.ok(weatherInfo);  // 返回天气信息
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(500).body("Error fetching weather: " + e.getMessage());
            }
        } else {
            return ResponseEntity.status(404).body("Location not found with id: " + locationId);
        }
    }

    // 获取当前用户最新位置的天气信息
    @GetMapping("/current")
    public ResponseEntity<?> fetchWeatherForCurrentUser(@RequestParam("userId") Integer userId) {
        // 获取当前用户的最新位置信息
        Optional<Location> locationOpt = locationService.getLatestLocationByUserId(userId);

        if (locationOpt.isPresent()) {
            Location location = locationOpt.get();

            try {
                // 调用 WeatherService 获取天气信息
                WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);
                return ResponseEntity.ok(weatherInfo);  // 返回天气信息
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(500).body("Error fetching weather: " + e.getMessage());
            }
        } else {
            return ResponseEntity.status(404).body("No location found for user ID: " + userId);
        }
    }

    // 返回所有的天气信息
    @GetMapping("/all")
    public ResponseEntity<?> getAllWeatherInfo() {
        return ResponseEntity.ok(weatherInfoRepository.findAll());
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/LocationRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import java.util.Optional;

public interface LocationRepository extends JpaRepository<Location, Integer> {

    // 获取最近保存的位置信息
    Optional<Location> findTopByOrderByIdDesc();

    Optional<Location> findTopByUserIdOrderByIdDesc(Integer userId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/ModelResponseRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;

@Repository
public interface ModelResponseRepository extends JpaRepository<ModelResponse,Integer> {
    ModelResponse findByMoodRecordId(Integer moodRecordId);

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodAnalysisRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;

@Repository
public interface MoodAnalysisRepository extends JpaRepository<MoodAnalysis, Integer> {

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/MoodRecordRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;
import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.User;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface MoodRecordRepository extends JpaRepository<MoodRecord, Integer> {
    List<MoodRecord> findByUserId(Integer userId);
    List<MoodRecord> findByUserIdAndRecordTimeBetween(Integer userId, LocalDateTime startOfDay, LocalDateTime endOfDay);
    MoodRecord findByIdAndUserId(Integer id, Integer userId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/NewsRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.News;

import java.util.List;
import java.util.Optional;

@Repository
public interface NewsRepository extends JpaRepository<News, Long> {
    // 自定义方法，根据uniquekey查找新闻
    Optional<News> findByUniquekey(String uniquekey);

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/SoupQuotesRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;

public interface SoupQuotesRepository extends JpaRepository<SoupQuotes, Integer> {
    //获取最新的语录
    @Query(value = "SELECT * FROM soup_quotes ORDER BY record_date DESC LIMIT 1", nativeQuery = true)
    SoupQuotes findLatestQuote();
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UploadImageRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;

import java.util.List;


@Repository
public interface UploadImageRepository extends JpaRepository<UploadImage, Integer> {
    List<UploadImage> findByMoodRecord(MoodRecord moodRecord);

    // 根据心情记录ID查询图片
    List<UploadImage> findByMoodRecordId(Integer moodRecordId);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/UserRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.User;



public interface UserRepository extends JpaRepository<User, Integer> {
    User findByUsername(String username);
    User findByEmail(String email);
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/Interface/WeatherInfoRepository.java">
package sheerio.moodbloom.moodbloom.dao.Interface;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;

import java.util.List;

@Repository
public interface WeatherInfoRepository extends JpaRepository<WeatherInfo, Integer> {

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/Location.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;

@Entity
@Table(name = "location")
public class Location {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "location_msg", length = 255)
    private String location_msg;

    @Column(name = "lonlat", length = 255)
    private String lonlat;

    // 添加外键关联 user_id
    @ManyToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    private User user;

    // Getters and Setters

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocation_msg() {
        return location_msg;
    }

    public void setLocation_msg(String location_msg) {
        this.location_msg = location_msg;
    }

    public String getLonlat() {
        return lonlat;
    }

    public void setLonlat(String lonlat) {
        this.lonlat = lonlat;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/ModelResponse.java">
package sheerio.moodbloom.moodbloom.dao.model;
import java.time.LocalDateTime;
import jakarta.persistence.*;


@Entity
@Table(name = "model_response")
public class ModelResponse {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer responseId;

    @ManyToOne
    @JoinColumn(name = "input_id", referencedColumnName = "id",nullable = false)
    private MoodRecord moodRecord;

    @Column(name = "response_text", columnDefinition = "TEXT")
    private String responseText;

    @Column(name = "response_time", nullable = false)
    private LocalDateTime responseTime;

    public Integer getResponseId() {
        return responseId;
    }

    public void setResponseId(Integer responseId) {
        this.responseId = responseId;
    }

    public MoodRecord getMoodRecord() {
        return moodRecord;
    }

    public void setMoodRecord(MoodRecord moodRecord) {
        this.moodRecord = moodRecord;
    }

    public String getResponseText() {
        return responseText;
    }

    public void setResponseText(String responseText) {
        this.responseText = responseText;
    }

    public LocalDateTime getResponseTime() {
        return responseTime;
    }

    public void setResponseTime(LocalDateTime responseTime) {
        this.responseTime = responseTime;
    }


}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodAnalysis.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "mood_analysis")
public class MoodAnalysis {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "sentiment", nullable = false)
    private Byte sentiment;

    @Column(name = "confidence", precision = 5, scale = 4)
    private BigDecimal confidence;

    @Column(name = "positive_prob", precision = 5, scale = 4)
    private BigDecimal positiveProb;

    @Column(name = "negative_prob", precision = 5, scale = 4)
    private BigDecimal negativeProb;



    // Getters and Setters

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Byte getSentiment() {
        return sentiment;
    }

    public void setSentiment(Byte sentiment) {
        this.sentiment = sentiment;
    }

    public BigDecimal getConfidence() {
        return confidence;
    }

    public void setConfidence(BigDecimal confidence) {
        this.confidence = confidence;
    }

    public BigDecimal getPositiveProb() {
        return positiveProb;
    }

    public void setPositiveProb(BigDecimal positiveProb) {
        this.positiveProb = positiveProb;
    }

    public BigDecimal getNegativeProb() {
        return negativeProb;
    }

    public void setNegativeProb(BigDecimal negativeProb) {
        this.negativeProb = negativeProb;
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/MoodRecord.java">
package sheerio.moodbloom.moodbloom.dao.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "mood_record")
public class MoodRecord {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "mood_text", nullable = false)
    private String moodText;

    @Column(name = "record_time", nullable = false)
    private LocalDateTime recordTime;

    @ManyToOne
    @JoinColumn(name = "location_id", referencedColumnName = "id", nullable = true)
    private Location location;

    @ManyToOne
    @JoinColumn(name = "weather_id", referencedColumnName = "id", nullable = true)
    private WeatherInfo weatherInfo;

    @ManyToOne
    @JoinColumn(name = "analysis_id", referencedColumnName = "id", nullable = true)
    private MoodAnalysis moodAnalysis;

    // 关联到 User 实体，表示 user_id 是外键
    @ManyToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false)
    private User user;


    @OneToMany(mappedBy = "moodRecord", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties("moodRecord") // 防止递归引用
    private List<UploadImage> images = new ArrayList<>();


    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getMoodText() {
        return moodText;
    }

    public void setMoodText(String moodText) {
        this.moodText = moodText;
    }

    public LocalDateTime getRecordTime() {
        return recordTime;
    }

    public void setRecordTime(LocalDateTime recordTime) {
        this.recordTime = recordTime;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public WeatherInfo getWeatherInfo() {
        return weatherInfo;
    }

    public void setWeatherInfo(WeatherInfo weatherInfo) {
        this.weatherInfo = weatherInfo;
    }

    public MoodAnalysis getMoodAnalysis() {
        return moodAnalysis;
    }

    public void setMoodAnalysis(MoodAnalysis moodAnalysis) {
        this.moodAnalysis = moodAnalysis;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<UploadImage> getImages() {
        return images;
    }

    public void setImages(List<UploadImage> images) {
        this.images = images;
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/News.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.Date;

@Entity
public class News {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String uniquekey;  // 新闻的唯一标识符

    @Column(nullable = false)
    private String title;      // 新闻标题

    @Column(nullable = false)
    private String url;        // 新闻链接

    private String category;   // 新闻类别

    private String authorName; // 作者名称

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private Date date;         // 新闻发布时间

    private String thumbnailPicS;   // 缩略图1的URL

    private String thumbnailPicS02; // 缩略图2的URL

    private String thumbnailPicS03; // 缩略图3的URL

    @Column(nullable = false)
    private boolean isContent;  // 是否有详细内容

    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt = new Date(); // 记录创建时间

    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt = new Date(); // 记录更新时间

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUniquekey() {
        return uniquekey;
    }

    public void setUniquekey(String uniquekey) {
        this.uniquekey = uniquekey;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getAuthorName() {
        return authorName;
    }

    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getThumbnailPicS() {
        return thumbnailPicS;
    }

    public void setThumbnailPicS(String thumbnailPicS) {
        this.thumbnailPicS = thumbnailPicS;
    }

    public String getThumbnailPicS02() {
        return thumbnailPicS02;
    }

    public void setThumbnailPicS02(String thumbnailPicS02) {
        this.thumbnailPicS02 = thumbnailPicS02;
    }

    public String getThumbnailPicS03() {
        return thumbnailPicS03;
    }

    public void setThumbnailPicS03(String thumbnailPicS03) {
        this.thumbnailPicS03 = thumbnailPicS03;
    }

    public boolean getIsContent() {
        return isContent;
    }

    public void setIsContent(boolean isContent) {
        this.isContent = isContent;
    }

    public Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    public Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/SoupQuotes.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
@Table(name = "soup_quotes")
public class SoupQuotes {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "text", nullable = false, columnDefinition = "TEXT")
    private String text;

    @Column(name = "record_date", nullable = false)
    private LocalDateTime recordDate;

    // Getter and Setter methods
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public LocalDateTime getRecordDate() {
        return recordDate;
    }

    public void setRecordDate(LocalDateTime recordDate) {
        this.recordDate = recordDate;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/UploadImage.java">
package sheerio.moodbloom.moodbloom.dao.model;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "images")
public class UploadImage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    // 存储图片的文件路径或URL
    @Column(name = "image_url", nullable = false)
    private String imageUrl;

    // 图片上传时间
    @Column(name = "upload_time", nullable = false)
    private LocalDateTime uploadTime;

    // 关联到 MoodRecord 实体，表示 mood_record_id 是外键
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mood_record_id", referencedColumnName = "id", nullable = false)
    @JsonIgnoreProperties("images")
    private MoodRecord moodRecord;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public LocalDateTime getUploadTime() {
        return uploadTime;
    }

    public void setUploadTime(LocalDateTime uploadTime) {
        this.uploadTime = uploadTime;
    }

    public MoodRecord getMoodRecord() {
        return moodRecord;
    }

    public void setMoodRecord(MoodRecord moodRecord) {
        this.moodRecord = moodRecord;
    }


}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/User.java">
package sheerio.moodbloom.moodbloom.dao.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "username", unique = true, nullable = false, length = 50)
    private String username;

    @Column(name = "password", nullable = false, length = 255)
    private String password;

    @Column(name = "email", unique = true, nullable = false, length = 100)
    private String email;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    // 一对多关联，User 和 MoodRecord 之间的关系
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<MoodRecord> moodRecords;


    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public List<MoodRecord> getMoodRecords() {
        return moodRecords;
    }

    public void setMoodRecords(List<MoodRecord> moodRecords) {
        this.moodRecords = moodRecords;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/dao/model/WeatherInfo.java">
package sheerio.moodbloom.moodbloom.dao.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "weather_info")
public class WeatherInfo {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "text", length = 50)
    private String text;

    @Column(name = "temp")
    private Double temp;

    @Column(name = "detail", length = 255)
    private String detail;

    // 这里引用 location_id
    @ManyToOne
    @JoinColumn(name = "location_id", referencedColumnName = "id")
    private Location location;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Double getTemp() {
        return temp;
    }

    public void setTemp(Double temp) {
        this.temp = temp;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/MoodbloomApplication.java">
package sheerio.moodbloom.moodbloom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class MoodbloomApplication {

	public static void main(String[] args) {
		SpringApplication.run(MoodbloomApplication.class, args);
	}

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/LocationService.java">
package sheerio.moodbloom.moodbloom.service;

import sheerio.moodbloom.moodbloom.dao.model.Location;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.LocationRepository;

import java.util.Optional;

@Service
public class LocationService {

    @Autowired
    private LocationRepository locationRepository;

    // 保存位置信息的方法
    public Location saveLocation(Location location) {
        return locationRepository.save(location);
    }

    // 获取最近保存的位置信息
    public Optional<Location> getLatestLocation() {
        return locationRepository.findTopByOrderByIdDesc();
    }

    // 获取指定用户的最近位置信息
    public Optional<Location> getLatestLocationByUserId(Integer userId) {
        return locationRepository.findTopByUserIdOrderByIdDesc(userId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ModelResponseService.java">
package sheerio.moodbloom.moodbloom.service;

import sheerio.moodbloom.moodbloom.dao.model.ModelResponse;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.Interface.ModelResponseRepository;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpMethod;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ModelResponseService {

    @Autowired
    private MoodRecordRepository moodRecordRepository;

    @Autowired
    private ModelResponseRepository modelResponseRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 文件中注入配置
    @Value("${chatglm-api.url}")
    private String apiUrl;

    @Value("${chatglm-api.key}")
    private String apiKey;

    @Value("${chatglm-api.model}")
    private String modelName;

    private List<Map<String, String>> chatHistory = new ArrayList<>();

    // 调用 AI 模型生成回复并保存
    public String sendToModelAndSaveResponse(Integer moodRecordId) {
        // 获取 MoodRecord 中的 mood_text
        MoodRecord moodRecord = moodRecordRepository.findById(moodRecordId)
                .orElseThrow(() -> new RuntimeException("MoodRecord not found"));
        String moodText = moodRecord.getMoodText();

        // 创建用户输入消息
        Map<String, String> userMessage = new HashMap<>();
        userMessage.put("role", "user");
        userMessage.put("content", moodText);

        // 添加到聊天历史记录
        chatHistory.add(userMessage);

        // 准备请求体
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", modelName);
        requestBody.put("messages", chatHistory);

        // 设置请求头
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + apiKey);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        try {
            // 调用 API
            ResponseEntity<String> response = restTemplate.exchange(apiUrl, HttpMethod.POST, request, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                String responseBody = response.getBody();

                // 解析响应
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseObject = objectMapper.readTree(responseBody);
                JsonNode choices = responseObject.path("choices");

                if (choices.isArray() && choices.size() > 0) {
                    JsonNode message = choices.get(0).path("message");
                    String assistantMessage = message.path("content").asText();

                    // 将助手的消息添加到聊天历史
                    Map<String, String> assistantResponse = new HashMap<>();
                    assistantResponse.put("role", "assistant");
                    assistantResponse.put("content", assistantMessage);
                    chatHistory.add(assistantResponse);

                    // 创建 ModelResponse 实体并保存到数据库
                    ModelResponse modelResponse = new ModelResponse();
                    modelResponse.setMoodRecord(moodRecord);
                    modelResponse.setResponseText(assistantMessage);
                    modelResponse.setResponseTime(LocalDateTime.now());

                    modelResponseRepository.save(modelResponse);

                    return assistantMessage;
                } else {
                    return "响应解析失败，未找到消息内容。";
                }
            } else {
                return "API 请求失败，状态码：" + response.getStatusCode();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "调用 API 时发生错误：" + e.getMessage();
        }
    }

    // 根据 MoodRecord ID 获取对应的 AI 回复
    public ModelResponse getResponseByMoodRecordId(Integer moodRecordId) {
        return modelResponseRepository.findByMoodRecordId(moodRecordId);
    }

    // 获取所有 ModelResponse 记录
    public List<ModelResponse> getAllModelResponses() {
        return modelResponseRepository.findAll();
    }

    // 根据回复 ID 删除 AI 回复
    public void deleteModelResponseById(Integer responseId) {
        modelResponseRepository.deleteById(responseId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodAnalysisService.java">
package sheerio.moodbloom.moodbloom.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodAnalysisRepository;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;

import java.io.IOException;
import java.math.BigDecimal;

@Service
public class MoodAnalysisService {

    private final RestTemplate restTemplate;
    private final MoodAnalysisRepository moodAnalysisRepository;
    private final ObjectMapper objectMapper;

    @Value("${baidu.nlp.api-url}")
    private String apiUrl;

    @Value("${baidu.nlp.access-token}")
    private String accessToken;

    public MoodAnalysisService(RestTemplate restTemplate, MoodAnalysisRepository moodAnalysisRepository, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.moodAnalysisRepository = moodAnalysisRepository;
        this.objectMapper = objectMapper;
    }

    public MoodAnalysis analyzeMood(String text) throws Exception {
        // 构建请求
        String requestUrl = apiUrl + "?access_token=" + accessToken;
        String requestBody = "{\"text\":\"" + text + "\"}";

        // 发送请求
        String response = restTemplate.postForObject(requestUrl, requestBody, String.class);

        // 解析响应
        JsonNode root = objectMapper.readTree(response);
        JsonNode items = root.path("items").get(0);

        // 获取情感分析结果
        Byte sentiment = (byte) items.path("sentiment").asInt();
        BigDecimal confidence = BigDecimal.valueOf(items.path("confidence").asDouble());
        BigDecimal positiveProb = BigDecimal.valueOf(items.path("positive_prob").asDouble());
        BigDecimal negativeProb = BigDecimal.valueOf(items.path("negative_prob").asDouble());

        // 保存结果到数据库
        MoodAnalysis moodAnalysis = new MoodAnalysis();
        moodAnalysis.setSentiment(sentiment);
        moodAnalysis.setConfidence(confidence);
        moodAnalysis.setPositiveProb(positiveProb);
        moodAnalysis.setNegativeProb(negativeProb);

        return moodAnalysisRepository.save(moodAnalysis);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/MoodRecordService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import sheerio.moodbloom.moodbloom.dao.Interface.MoodRecordRepository;
import sheerio.moodbloom.moodbloom.dao.Interface.UploadImageRepository;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.MoodAnalysis;
import sheerio.moodbloom.moodbloom.dao.model.MoodRecord;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;
import sheerio.moodbloom.moodbloom.dao.model.User;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@Service
public class MoodRecordService {

    @Autowired
    private MoodRecordRepository moodRecordRepository;

    @Autowired
    private UploadImageRepository uploadImageRepository;

    @Autowired
    private LocationService locationService;

    @Autowired
    private WeatherService weatherService;

    @Autowired
    private MoodAnalysisService moodAnalysisService;

    // 从配置文件中读取图片存储路径
    @Value("${file.upload-dir}")
    private String uploadDir;

    // 创建心情记录时自动获取位置信息、天气信息并调用情感分析，同时处理多张图片上传
    public MoodRecord addMoodRecord(MoodRecord moodRecord, Integer userId, MultipartFile[] images) throws Exception {
        // 关联用户ID到心情记录
        User user = new User();
        user.setId(userId);
        moodRecord.setUser(user);

        // 检查是否有提供位置信息
        Location location = moodRecord.getLocation();

        // 如果没有提供位置信息，从数据库中获取最近的位置信息
        if (location == null) {
            Optional<Location> latestLocation = locationService.getLatestLocation();
            if (latestLocation.isPresent()) {
                location = latestLocation.get();
            } else {
                throw new Exception("No location information available.");
            }
        }

        // 获取天气信息
        WeatherInfo weatherInfo = weatherService.fetchWeatherInfo(location);

        // 将位置信息和天气信息关联到心情记录
        moodRecord.setLocation(location);
        moodRecord.setWeatherInfo(weatherInfo);

        // 如果 moodText 为空，则自动填充占位符
        if (moodRecord.getMoodText() == null || moodRecord.getMoodText().trim().isEmpty()) {
            moodRecord.setMoodText("拍拍照~");
        }

        // 调用情感分析服务获取情感分析结果
        MoodAnalysis moodAnalysis = moodAnalysisService.analyzeMood(moodRecord.getMoodText());

        // 将情感分析结果关联到心情记录
        moodRecord.setMoodAnalysis(moodAnalysis);

        // 设置记录时间为当前时间
        moodRecord.setRecordTime(LocalDateTime.now());

        // 保存心情记录
        MoodRecord savedMoodRecord = moodRecordRepository.save(moodRecord);

        // 如果有上传的图片，逐一保存图片
        if (images != null && images.length > 0) {
            for (MultipartFile image : images) {
                if (!image.isEmpty()) {
                    String imageUrl = saveImage(image);  // 保存图片并返回其URL
                    UploadImage uploadImage = new UploadImage();
                    uploadImage.setImageUrl(imageUrl);
                    uploadImage.setUploadTime(LocalDateTime.now());
                    uploadImage.setMoodRecord(savedMoodRecord);

                    // 保存图片记录到数据库
                    uploadImageRepository.save(uploadImage);
                    savedMoodRecord.getImages().add(uploadImage);  // 将图片关联到心情记录
                    System.out.println("Image URL saved to database: " + imageUrl);
                }
            }
        }

        // 返回保存的心情记录
        return savedMoodRecord;
    }

    // 保存图片到配置的上传目录，并返回图片的 URL 路径
    public String saveImage(MultipartFile image) throws IOException {
        // 获取文件名
        String fileName = image.getOriginalFilename();
        // 生成保存图片的完整路径
        String imagePath = uploadDir + "/" + fileName;
        File file = new File(imagePath);

        // 创建目录如果不存在
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
            System.out.println("Directory created: " + file.getParentFile().getAbsolutePath());
        }

        // 将文件保存到指定路径
        image.transferTo(file);
        System.out.println("Image saved to: " + imagePath);

        // 返回浏览器可以访问的 URL 路径
        return "/images/" + fileName;
    }


    // 获取指定用户的所有心情记录
    public List<MoodRecord> getMoodRecordsByUserId(Integer userId) {
        return moodRecordRepository.findByUserId(userId);
    }

    // 根据用户ID和记录ID删除心情记录
    public boolean deleteMoodRecordByIdAndUserId(Integer recordId, Integer userId) throws Exception {
        MoodRecord record = moodRecordRepository.findByIdAndUserId(recordId, userId);
        if (record != null) {
            moodRecordRepository.delete(record);
            return true;
        } else {
            throw new Exception("Mood record not found or user not authorized.");
        }
    }

    // 按日期查询指定用户的心情记录
    public List<MoodRecord> getMoodRecordsByDateAndUserId(LocalDate date, Integer userId) {
        LocalDateTime startOfDay = date.atStartOfDay();
        LocalDateTime endOfDay = date.atTime(LocalTime.MAX);
        return moodRecordRepository.findByUserIdAndRecordTimeBetween(userId, startOfDay, endOfDay);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/NewsService.java">
package sheerio.moodbloom.moodbloom.service;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.Interface.NewsRepository;
import sheerio.moodbloom.moodbloom.dao.model.News;

import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class NewsService {

    @Autowired
    private NewsRepository newsRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 读取 API 的相关配置信息
    @Value("${news.api.key}")
    private String apiKey;

    @Value("${news.api.url}")
    private String apiUrl;

    @Value("${news.api.type}")
    private String apiType;

    @Value("${news.api.page}")
    private int apiPage;

    @Value("${news.api.page_size}")
    private int apiPageSize;

    @Value("${news.api.is_filter}")
    private int isFilter;

    // 从 API 获取新闻并保存到数据库
    public void fetchAndSaveNews() {
        // 构建 API URL
        String apiRequestUrl = String.format("%s?type=%s&page=%d&page_size=%d&is_filter=%d&key=%s",
                apiUrl, apiType, apiPage, apiPageSize, isFilter, apiKey);

        // 调用 API 获取新闻数据
        String response = restTemplate.getForObject(apiRequestUrl, String.class);

        // 解析返回的 JSON 数据
        JSONObject jsonObject = new JSONObject(response);
        if (!jsonObject.has("result")) {
            // 错误处理：API 返回结果不包含新闻数据
            return;
        }

        JSONArray newsArray = jsonObject.getJSONObject("result").getJSONArray("data");

        // 遍历新闻数据并保存到数据库
        for (int i = 0; i < newsArray.length(); i++) {
            JSONObject newsItem = newsArray.getJSONObject(i);

            // 检查新闻是否已经存在于数据库中
            Optional<News> existingNews = newsRepository.findByUniquekey(newsItem.getString("uniquekey"));

            if (!existingNews.isPresent()) {
                // 如果新闻不存在，保存新新闻
                News news = new News();
                news.setUniquekey(newsItem.getString("uniquekey"));
                news.setTitle(newsItem.getString("title"));
                news.setUrl(newsItem.getString("url"));
                news.setCategory(newsItem.optString("category", "未分类"));
                news.setAuthorName(newsItem.optString("author_name", "未知"));
                news.setDate(new Date());  // 使用当前时间，或根据需求修改为 API 返回的时间
                news.setThumbnailPicS(newsItem.optString("thumbnail_pic_s", ""));
                news.setThumbnailPicS02(newsItem.optString("thumbnail_pic_s02", ""));
                news.setThumbnailPicS03(newsItem.optString("thumbnail_pic_s03", ""));
                news.setIsContent(newsItem.optInt("is_content", 0) == 1);

                // 保存新闻到数据库
                newsRepository.save(news);
            }
        }
    }

    // 获取最新的7条新闻
    public List<News> getLatestNews() {
        // 按照日期降序排列，获取前7条记录
        return newsRepository.findAll(
                PageRequest.of(0, 7, Sort.by(Sort.Direction.DESC, "date"))).getContent();
    }

}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/ScheduledTasks.java">
package sheerio.moodbloom.moodbloom.service;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ScheduledTasks {

    @Autowired
    private SoupQuotesService soupQuotesService;

    // 使用cron表达式配置任务每小时执行一次，表达式："0 0 * * * ?"
    @Scheduled(cron = "0 0 * * * ?")
    public void fetchSoupQuote() {
        // 调用SoupQuotesService的API获取和保存数据的方法
        soupQuotesService.fetchAndSaveQuote();
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/SoupQuotesService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import sheerio.moodbloom.moodbloom.dao.model.SoupQuotes;
import sheerio.moodbloom.moodbloom.dao.Interface.SoupQuotesRepository;

import java.time.LocalDateTime;
import java.util.Map;

@Service
public class SoupQuotesService {

    @Autowired
    private SoupQuotesRepository soupQuotesRepository;

    @Autowired
    private RestTemplate restTemplate;

    // 从 application.yml 读取 API 的相关配置信息
    @Value("${soup-quotes.api.url}")
    private String apiUrl;

    @Value("${soup-quotes.api.key}")
    private String apiKey;

    // 调用 API 并保存鸡汤语录
    public void fetchAndSaveQuote() {
        // 构建 API URL
        String apiRequestUrl = String.format("%s?key=%s", apiUrl, apiKey);

        // 调用 API
        Map<String, Object> response = restTemplate.getForObject(apiRequestUrl, Map.class);

        // 解析 API 响应
        if (response != null && "success".equals(response.get("reason"))) {
            Map<String, String> result = (Map<String, String>) response.get("result");
            String quoteText = result.get("text");

            // 创建新的 SoupQuotes 实体
            SoupQuotes soupQuote = new SoupQuotes();
            soupQuote.setText(quoteText);
            soupQuote.setRecordDate(LocalDateTime.now());

            // 保存到数据库
            soupQuotesRepository.save(soupQuote);
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/TextToImageService.java">
package sheerio.moodbloom.moodbloom.service;

import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

@Service
public class TextToImageService {

    private final OkHttpClient okHttpClient = new OkHttpClient().newBuilder().build();
    private final ObjectMapper objectMapper = new ObjectMapper();  // 创建 Jackson ObjectMapper 实例

    @Value("${pic.space.token}")
    private String apiToken;

    @Value("${pic.txt2img.url}")
    private String txt2ImgUrl;

    @Value("${pic.query.image.url}")
    private String queryImageUrl;

    // Step 1: 调用API生成图片，返回uid
    public String generateImageUid(String text) throws IOException {
        // 构造请求体，包含用户提供的文本
        String jsonBody = String.format("{\"task\":\"txt2img.sd\",\"params\":{\"model\":\"anime\",\"text\":\"%s\"}}", text);
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonBody);

        // 构造请求，发送 POST 请求生成图片
        Request request = new Request.Builder()
                .url(txt2ImgUrl)
                .post(body)
                .addHeader("X-APISpace-Token", apiToken)
                .addHeader("Content-Type", "application/json")
                .build();

        // 执行请求并获取响应
        Response response = okHttpClient.newCall(request).execute();
        if (!response.isSuccessful()) {
            throw new IOException("Error generating image UID: " + response);
        }

        // 解析 JSON 响应并提取 UID
        String responseBody = response.body() != null ? response.body().string() : null;
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        return jsonNode.get("data").get("uid").asText();  // 返回生成的 UID
    }

    // Step 2: 根据uid查询图片链接
    public String getImageLink(String uid) throws IOException {
        String jsonBody = String.format("{\"uid\":\"%s\"}", uid);
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonBody);

        Request request = new Request.Builder()
                .url(queryImageUrl)
                .post(body)
                .addHeader("X-APISpace-Token", apiToken)
                .addHeader("Content-Type", "application/json")
                .build();

        try (Response response = okHttpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("Error querying image link: " + response);
            }

            // 读取并保存响应体
            String responseBody = response.body() != null ? response.body().string() : null;
            System.out.println("Image Link Response: " + responseBody);

            return responseBody;
        }
    }


    public String getImageLinkWithPolling(String uid) throws IOException, InterruptedException {
        int retries = 100;  // 最大重试次数
        int interval = 2000;  // 每次重试间隔 2 秒

        for (int i = 0; i < retries; i++) {
            String responseBody = getImageLink(uid);

            // 打印调试信息，检查完整的 API 响应
            System.out.println("Full API Response: " + responseBody);

            if (responseBody == null || responseBody.isEmpty()) {
                System.out.println("Empty or null response body.");
                throw new IOException("Received empty response body from API.");
            }

            // 解析返回的JSON
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(responseBody);

            // 检查是否存在 "data" 节点
            JsonNode dataNode = jsonNode.get("data");
            if (dataNode == null) {
                System.out.println("No 'data' field in the response.");
                throw new IOException("No 'data' field in the response");
            }

            // 获取 "status" 节点
            String status = dataNode.get("status").asText();
            System.out.println("Image generation status: " + status);

            // 如果状态为 "finished"，获取图片链接
            if ("finished".equals(status)) {
                String cdn = dataNode.get("cdn").asText();  // 获取图片链接
                if (cdn != null && !cdn.isEmpty()) {
                    return cdn;  // 返回图片链接
                } else {
                    throw new IOException("Image link (cdn) is empty or null.");
                }
            }

            // 如果状态不是 "finished"，等待一段时间后重试
            System.out.println("Image generation in progress, retrying in " + (interval / 1000) + " seconds...");
            Thread.sleep(interval);  // 等待后重试
        }

        throw new IOException("Failed to get image link after retries");
    }





}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UploadImageService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.UploadImageRepository;
import sheerio.moodbloom.moodbloom.dao.model.UploadImage;

import java.util.List;

@Service
public class UploadImageService {

    @Autowired
    private UploadImageRepository uploadImageRepository;

    // 根据心情记录ID获取图片
    public List<UploadImage> getImagesByMoodRecordId(Integer moodRecordId) {
        return uploadImageRepository.findByMoodRecordId(moodRecordId);
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/UserService.java">
package sheerio.moodbloom.moodbloom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.Interface.UserRepository;
import sheerio.moodbloom.moodbloom.dao.model.User;

import java.time.LocalDateTime;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    // 注册用户
    public User registerUser(String username, String password, String email) {
        // 检查是否用户名或邮箱已经存在
        if (userRepository.findByUsername(username) != null) {
            throw new IllegalArgumentException("Username already exists");
        }
        if (userRepository.findByEmail(email) != null) {
            throw new IllegalArgumentException("Email already exists");
        }

        // 创建新用户对象
        User user = new User();
        user.setUsername(username);
        user.setPassword(password);
        user.setEmail(email);
        user.setCreatedAt(LocalDateTime.now());

        // 保存新用户到数据库，并返回保存后的用户对象
        return userRepository.save(user);
    }

    // 登录用户
    public User loginUser(String username, String password) {
        User user = userRepository.findByUsername(username);
        // 校验用户名和密码
        if (user == null || !user.getPassword().equals(password)) {
            throw new IllegalArgumentException("Invalid username or password");
        }
        return user;
    }
    // 根据ID查找用户
    public User findById(Integer id) {
        return userRepository.findById(id).orElse(null);  // 使用 JpaRepository 提供的 findById 方法
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/java/sheerio/moodbloom/moodbloom/service/WeatherService.java">
package sheerio.moodbloom.moodbloom.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import sheerio.moodbloom.moodbloom.dao.model.Location;
import sheerio.moodbloom.moodbloom.dao.model.WeatherInfo;
import sheerio.moodbloom.moodbloom.dao.Interface.WeatherInfoRepository;

import java.io.IOException;

@Service
public class WeatherService {

    @Value("${weather-api.key}") // 从 application.yml 中读取 API key
    private String apiKey;

    @Value("${weather-api.base-url}") // 从 application.yml 中读取 API URL
    private String baseUrl;

    private final OkHttpClient client = new OkHttpClient().newBuilder().build();
    private final ObjectMapper objectMapper = new ObjectMapper(); // Jackson 用于解析 JSON

    @Autowired
    private WeatherInfoRepository weatherInfoRepository;

    // 获取并保存天气信息
    public WeatherInfo fetchWeatherInfo(Location location) throws IOException {
        String lonlat = location.getLonlat();  // 获取经纬度

        // 构建API请求URL
        String url = baseUrl + "?lonlat=" + lonlat;

        // 构建请求
        Request request = new Request.Builder()
                .url(url)
                .addHeader("X-APISpace-Token", apiKey)
                .build();

        // 发送请求
        Response response = client.newCall(request).execute();

        if (response.isSuccessful() && response.body() != null) {
            String responseBody = response.body().string();

            // 使用 Jackson 解析 JSON 响应
            JsonNode rootNode = objectMapper.readTree(responseBody);
            JsonNode resultNode = rootNode.path("result").path("realtime");

            // 提取 "text", "temp", "detail" 字段
            String text = resultNode.path("text").asText();
            Double temp = resultNode.path("temp").asDouble();
            String detail = resultNode.path("detail").asText();

            // 创建并保存 WeatherInfo
            WeatherInfo weatherInfo = new WeatherInfo();
            weatherInfo.setLocation(location);
            weatherInfo.setText(text);
            weatherInfo.setTemp(temp);
            weatherInfo.setDetail(detail);

            return weatherInfoRepository.save(weatherInfo);
        } else {
            throw new IOException("Failed to fetch weather info: " + response.message());
        }
    }
}
</file>

<file path="moodbloom_springboot/moodbloom/src/main/resources/application.yml">
spring:
  application:
    name: moodbloom

  datasource:
    url: jdbc:mysql://localhost:3306/moodbloom_db?characterEncoding=utf-8
    username: root
    password: Led647716
#  datasource:
#    url: jdbc:mysql://124.222.156.13:3306/moodbloom_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#    username: share
#    password: '#Led647716'
#    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  security:
    user:
      name: 1
      password: 1

  servlet:
    multipart:
      max-file-size: 100MB    # 单个文件最大大小
      max-request-size: 500MB # 总请求大小

server:
  port: 8800
  forward-headers-strategy: framework

jackson:
  serialization:
    indent_output: true

baidu:
  nlp:
    api-url: https://aip.baidubce.com/rpc/2.0/nlp/v1/sentiment_classify
    access-token: 24.ec6c793f644f73ebc430e234b9050eff.2592000.1729571332.282335-115644524

weather-api:
  key: zda6e38ivoov0cbjx607oh12l3ddeh7b
  base-url: https://eolink.o.apispace.com/456456/weather/v001/now

chatglm-api:
  url: https://open.bigmodel.cn/api/paas/v4/chat/completions
  key: f9990643faa52cb57ab08c1ee3a498cc.db2kUmJw19Ccjfff
  model: glm-4

soup-quotes:
  api:
    key: c08415d16aae86f01f2b02157dd3ec7f
    url: https://apis.juhe.cn/fapig/soup/query


news:
  api:
    key: f32188420603a20434462e0c48bd82ac
    url: http://v.juhe.cn/toutiao/index
    type: top
    page: 1
    page_size: 7
    is_filter: 1

pic:
  space:
    token: zda6e38ivoov0cbjx607oh12l3ddeh7b
  txt2img:
    url: https://23329.o.apispace.com/aigc/txt2img
  query:
    image:
      url: https://23329.o.apispace.com/aigc/query-image


logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicTypeDescriptor: TRACE
      springframework:
        security: DEBUG

file:
  upload-dir: /home/lighthouse/images/
</file>

<file path="moodbloom_springboot/moodbloom/src/test/java/sheerio/moodbloom/moodbloom/MoodbloomApplicationTests.java">
package sheerio.moodbloom.moodbloom;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class MoodbloomApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="moodbloom_springboot/moodbloom/target/classes/application.yml">
spring:
  application:
    name: moodbloom

  datasource:
    url: jdbc:mysql://localhost:3306/moodbloom_db?characterEncoding=utf-8
    username: root
    password: Led647716
#  datasource:
#    url: jdbc:mysql://124.222.156.13:3306/moodbloom_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#    username: share
#    password: '#Led647716'
#    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  security:
    user:
      name: 1
      password: 1

  servlet:
    multipart:
      max-file-size: 100MB    # 单个文件最大大小
      max-request-size: 500MB # 总请求大小

server:
  port: 8800
  forward-headers-strategy: framework

jackson:
  serialization:
    indent_output: true

baidu:
  nlp:
    api-url: https://aip.baidubce.com/rpc/2.0/nlp/v1/sentiment_classify
    access-token: 24.ec6c793f644f73ebc430e234b9050eff.2592000.1729571332.282335-115644524

weather-api:
  key: zda6e38ivoov0cbjx607oh12l3ddeh7b
  base-url: https://eolink.o.apispace.com/456456/weather/v001/now

chatglm-api:
  url: https://open.bigmodel.cn/api/paas/v4/chat/completions
  key: f9990643faa52cb57ab08c1ee3a498cc.db2kUmJw19Ccjfff
  model: glm-4

soup-quotes:
  api:
    key: c08415d16aae86f01f2b02157dd3ec7f
    url: https://apis.juhe.cn/fapig/soup/query


news:
  api:
    key: f32188420603a20434462e0c48bd82ac
    url: http://v.juhe.cn/toutiao/index
    type: top
    page: 1
    page_size: 7
    is_filter: 1

pic:
  space:
    token: zda6e38ivoov0cbjx607oh12l3ddeh7b
  txt2img:
    url: https://23329.o.apispace.com/aigc/txt2img
  query:
    image:
      url: https://23329.o.apispace.com/aigc/query-image


logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicTypeDescriptor: TRACE
      springframework:
        security: DEBUG

file:
  upload-dir: /home/lighthouse/images/
</file>

<file path="moodbloom_springboot/moodbloom/target/maven-archiver/pom.properties">
artifactId=moodbloom
groupId=sheerio.moodbloom
version=0.0.1-SNAPSHOT
</file>

<file path="moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst">
sheerio\moodbloom\moodbloom\dao\Interface\MoodAnalysisRepository.class
sheerio\moodbloom\moodbloom\service\MoodAnalysisService.class
sheerio\moodbloom\moodbloom\service\LocationService.class
sheerio\moodbloom\moodbloom\service\MoodRecordService.class
sheerio\moodbloom\moodbloom\config\AppConfig.class
sheerio\moodbloom\moodbloom\dao\model\MoodAnalysis.class
sheerio\moodbloom\moodbloom\dao\Interface\ModelResponseRepository.class
sheerio\moodbloom\moodbloom\dao\model\ModelResponse.class
sheerio\moodbloom\moodbloom\controller\NewsController.class
sheerio\moodbloom\moodbloom\service\ModelResponseService.class
sheerio\moodbloom\moodbloom\dao\model\WeatherInfo.class
sheerio\moodbloom\moodbloom\MoodbloomApplication.class
sheerio\moodbloom\moodbloom\controller\MoodAnalysisController.class
sheerio\moodbloom\moodbloom\config\TextRequest.class
sheerio\moodbloom\moodbloom\service\ScheduledTasks.class
sheerio\moodbloom\moodbloom\service\TextToImageService.class
sheerio\moodbloom\moodbloom\dao\Interface\LocationRepository.class
sheerio\moodbloom\moodbloom\dao\Interface\MoodRecordRepository.class
sheerio\moodbloom\moodbloom\dao\Interface\WeatherInfoRepository.class
sheerio\moodbloom\moodbloom\dao\model\MoodRecord.class
sheerio\moodbloom\moodbloom\service\UploadImageService.class
sheerio\moodbloom\moodbloom\dao\Interface\NewsRepository.class
sheerio\moodbloom\moodbloom\dao\Interface\UploadImageRepository.class
sheerio\moodbloom\moodbloom\controller\LocationController.class
sheerio\moodbloom\moodbloom\controller\UserController.class
sheerio\moodbloom\moodbloom\service\UserService.class
sheerio\moodbloom\moodbloom\controller\WeatherController.class
sheerio\moodbloom\moodbloom\service\WeatherService.class
sheerio\moodbloom\moodbloom\controller\SoupQuotesController.class
sheerio\moodbloom\moodbloom\dao\model\User.class
sheerio\moodbloom\moodbloom\controller\TextToImageController.class
sheerio\moodbloom\moodbloom\dao\Interface\SoupQuotesRepository.class
sheerio\moodbloom\moodbloom\dao\Interface\UserRepository.class
sheerio\moodbloom\moodbloom\dao\model\Location.class
sheerio\moodbloom\moodbloom\dao\model\SoupQuotes.class
sheerio\moodbloom\moodbloom\config\CorsConfig.class
sheerio\moodbloom\moodbloom\dao\model\UploadImage.class
sheerio\moodbloom\moodbloom\controller\ModelResponseController.class
sheerio\moodbloom\moodbloom\controller\MoodRecordController.class
sheerio\moodbloom\moodbloom\dao\model\News.class
sheerio\moodbloom\moodbloom\service\SoupQuotesService.class
sheerio\moodbloom\moodbloom\controller\HomeController.class
sheerio\moodbloom\moodbloom\service\NewsService.class
</file>

<file path="moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst">
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\config\AppConfig.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\config\CorsConfig.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\config\TextRequest.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\HomeController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\LocationController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\ModelResponseController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\MoodAnalysisController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\MoodRecordController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\NewsController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\SoupQuotesController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\TextToImageController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\UserController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\controller\WeatherController.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\LocationRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\ModelResponseRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\MoodAnalysisRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\MoodRecordRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\NewsRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\SoupQuotesRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\UploadImageRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\UserRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\Interface\WeatherInfoRepository.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\Location.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\ModelResponse.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\MoodAnalysis.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\MoodRecord.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\News.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\SoupQuotes.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\UploadImage.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\User.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\dao\model\WeatherInfo.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\MoodbloomApplication.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\LocationService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\ModelResponseService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\MoodAnalysisService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\MoodRecordService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\NewsService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\ScheduledTasks.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\SoupQuotesService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\TextToImageService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\UploadImageService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\UserService.java
G:\university\project-moodbloom\moodbloom\moodbloom\src\main\java\sheerio\moodbloom\moodbloom\service\WeatherService.java
</file>

<file path="moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst">
sheerio\moodbloom\moodbloom\MoodbloomApplicationTests.class
</file>

<file path="moodbloom_springboot/moodbloom/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst">
G:\university\project-moodbloom\moodbloom\moodbloom\src\test\java\sheerio\moodbloom\moodbloom\MoodbloomApplicationTests.java
</file>

<file path="moodbloom_vue/.gitignore">
.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="moodbloom_vue/babel.config.js">
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}
</file>

<file path="moodbloom_vue/jsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}
</file>

<file path="moodbloom_vue/package.json">
{
  "name": "moodbloom-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.6.0",
    "@iconify/vue": "^4.1.2",
    "axios": "^1.7.7",
    "core-js": "^3.8.3",
    "date-fns": "^4.1.0",
    "vee-validate": "^4.13.2",
    "vue": "^3.2.13",
    "vue-router": "^4.4.5"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ]
}
</file>

<file path="moodbloom_vue/public/index.html">
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <link href="https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
</file>

<file path="moodbloom_vue/README.md">
# 心晴日记

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).
</file>

<file path="moodbloom_vue/src/App.vue">
<template>
  <div id="app">
    <!-- 只在特定页面显示导航栏 -->
    <nav v-if="showNav">
      <ul>
        <!-- 注销按钮，使用 Font Awesome 的退出图标 -->
        <li>
          <a href="javascript:void(0)" @click="logout">
            <i class="fas fa-sign-out-alt"></i>
          </a>
        </li>
        
        <!-- 首页按钮，使用 Font Awesome 的首页图标 -->
        <li>
          <router-link to="/HomePage">
            <i class="fas fa-home"></i>
          </router-link>
        </li>
      </ul>
    </nav>
    
    <!-- 添加缩放过渡效果 -->
    <transition name="zoom" mode="out-in">
      <router-view></router-view>
    </transition>
  </div>
</template>

<script>
export default {
  computed: {
    showNav() {
      // 如果当前页面不是登录或注册页面，显示导航栏
      return this.$route.path !== '/';
    }
  },
  methods: {
    logout() {
      // 弹出确认框
      if (confirm("确定要退出登录吗？")) {
        // 清除 localStorage 中的用户数据
        localStorage.removeItem("userId");
        localStorage.removeItem("username");
        // 跳转到登录注册页面
        this.$router.push("/");
      }
    },
    checkLoginStatus() {
      const userId = localStorage.getItem("userId");
      const username = localStorage.getItem("username");

      // 仅在不是登录页面时检查用户登录状态
      if (this.$route.path !== '/' && (!userId || !username)) {
        // 用户未登录，跳转到登录注册页面
        alert("请先登录");
        this.$router.push("/");
      }
    }
  },
  mounted() {
    // 页面加载时检测登录状态
    this.checkLoginStatus();
  },
  name: 'App',
};
</script>

<style scoped>
nav {
  position: fixed;
  top: -10px;
  left: -30px;
  z-index: 9999;
  display: flex;
}

nav ul {
  list-style: none;
  display: flex;
  gap: 10px; /* 两个图标之间的间距 */
}

nav ul li {
  font-size: 1.5em; /* 图标大小 */
}

nav ul li a {
  color: rgb(213, 216, 216);
  text-decoration: none;
  display: flex;
  align-items: center;
  padding: 5px;
}

nav ul li a:hover {
  color: #eaf0f0; /* 悬停时颜色变化 */
}

nav ul li a i {
  font-size: 1.5em; /* 图标大小 */
}

/* 缩放过渡效果 */
.zoom-enter-active, .zoom-leave-active {
  transition: transform 0.5s ease, opacity 0.5s ease;
}

.zoom-enter-from, .zoom-leave-to {
  transform: scale(0.8);
  opacity: 0;
}

.zoom-enter-to, .zoom-leave-from {
  transform: scale(1);
  opacity: 1;
}
</style>
</file>

<file path="moodbloom_vue/src/components/CalendarNav.vue">
<template>
  <div class="calendar-nav-container">
    <!-- 显示当前选中日期并允许用户修改 -->
    <div class="date-input">
      <span class="selected-date" v-html="formatFullDate(selectedDate)" @click="editDate"></span>

      <!-- 日期输入框，点击显示，选择完日期后隐藏 -->
      <input 
        v-if="isEditing" 
        type="date" 
        id="datePicker" 
        v-model="inputDate" 
        @change="updateSelectedDate" 
        @blur="isEditing = false" 
      />
    </div>

    <!-- 横向日历导航 -->
    <div class="calendar-nav">
      <button @click="previousWeek" class="arrow-btn">
        <i class="fas fa-chevron-left"></i>
      </button>
      <div class="date-list">
        <div v-for="date in displayedDates" :key="date" class="date-item" @click="selectDate(date)">
          <span :class="{ selected: selectedDate === date }">{{ formatDateDisplay(date) }}</span>
        </div>
      </div>
      <button @click="nextWeek" class="arrow-btn">
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
</template>

<script>
import { format, addDays, parseISO } from 'date-fns';

export default {
  props: {
    selectedDate: {
      type: Date,
      required: true
    }
  },
  emits: ['date-selected'],
  data() {
    return {
      isEditing: false, // 控制输入框的显示与隐藏
      inputDate: format(this.selectedDate, 'yyyy-MM-dd'), // 输入框的日期
      displayedDates: Array.from({ length: 7 }, (_, i) => addDays(new Date(), i)) // 默认显示7天
    };
  },
  methods: {
    // 选择日期
    selectDate(date) {
      this.$emit('date-selected', date); // 触发事件通知父组件选中的日期
    },
    // 上一周
    previousWeek() {
      this.updateDisplayedDates(-7);
    },
    // 下一周
    nextWeek() {
      this.updateDisplayedDates(7);
    },
    // 更新显示的日期列表
    updateDisplayedDates(offset) {
      const startDate = addDays(this.displayedDates[0], offset);
      this.displayedDates = Array.from({ length: 7 }, (_, i) => addDays(startDate, i));
    },
    // 当用户输入日期时更新选中的日期
    updateSelectedDate() {
      const parsedDate = parseISO(this.inputDate); // 将输入的日期字符串解析为日期对象
      this.selectDate(parsedDate); // 调用选择日期方法
      this.displayedDates = Array.from({ length: 7 }, (_, i) => addDays(parsedDate, i)); // 更新显示的日期
      this.isEditing = false; // 关闭编辑模式
    },
    // 启动编辑模式，显示日期输入框
    editDate() {
      this.isEditing = true;
    },
    // 格式化显示日期
    formatFullDate(date) {
      const year = format(date, 'yyyy');
      const month = format(date, 'M');
      const day = format(date, 'd');

      return `<span class="small-date">${year}</span> 
              <span class="large-date">${month}</span><span class="small-date">月</span> 
              <span class="large-date">${day}</span><span class="small-date">日</span>`;
    },
    // 格式化日期显示，只显示日
    formatDateDisplay(date) {
      return format(date, 'd');
    }
  },
  watch: {
    selectedDate(newDate) {
      this.inputDate = format(newDate, 'yyyy-MM-dd'); // 当父组件更新选中的日期时，更新输入框
    }
  }
};
</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700&display=swap');

.calendar-nav-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 20px;
}

.date-input {
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: #333;
  justify-content: flex-start;
  width: 90%;
}

.selected-date {
  cursor: pointer;
  color: #f5a623; /* 橙色 */
  font-family: 'Cinzel Decorative', serif; 
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: left;
  width: 20%;
}

.small-date {
  font-size: 16px !important;
  font-weight: normal;
  font-family: 'Cinzel Decorative', serif; /* 确保小字体部分也用同样风格 */
}

.large-date {
  font-size: 40px !important; /* 放大月和日以突出 */
  font-weight: bold;
  font-family: 'Cinzel Decorative', serif; /* 中世纪风格 */
}

input[type="date"] {
  margin-left: 10px;
  font-size: 16px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.calendar-nav {
  display: flex;
  align-items: center;
  justify-content: space-between; /* 改为两端对齐，防止按钮遮挡 */
  width: 100%; /* 确保导航栏充满父容器 */
  position: relative; /* 为左右按钮留出空间 */
}

.arrow-btn {
  background: none;
  border: none;
  font-size: 30px;
  cursor: pointer;
  color: #f5a623;
  padding: 5px;
  z-index: 1;
}

.arrow-btn:hover {
  transform: scale(1.1);
  z-index: 2;
}

.date-list {
  display: flex;
  gap: 15px;
}

.date-item {
  padding: 10px;
  cursor: pointer;
  border-radius: 12px;
  background-color: rgba(245, 245, 245, 0.8);
  text-align: center;
  width: 50px;
  height: 50px;
  line-height: 50px;
  transition: background-color 0.3s, transform 0.3s;
  font-size: 18px;
  color: #f5a623;
  margin: 0 10px; 
}

.date-item:hover {
  background-color: #ffe4c4;
  transform: scale(1.05);
  z-index: 1;
}
</style>

<style>
.small-date {
  font-size: 24px;
  font-weight: normal;
  font-family: 'Cinzel Decorative', serif;
}

.large-date {
  font-size: 60px;
  /* font-weight: bold; */
  font-family: 'Cinzel Decorative', serif;
}
</style>
</file>

<file path="moodbloom_vue/src/components/LocationMap.vue">
<template>
  <div class="location-wrapper">
    <div id="map-container" class="map-container"></div> <!-- 地图容器，覆盖显示 -->
    <div class="location-info">{{ statusMessage }}</div> <!-- 显示当前位置信息 -->
  </div>
</template>

<script>
/* global AMap */
export default {
  data() {
    return {
      statusMessage: "定位中...",
      resultMessage: "",
      map: null  // 保存地图实例
    };
  },
  mounted() {
    this.loadGeolocation();
  },
  methods: {
    loadGeolocation() {
      // 检查是否已经加载了高德地图脚本，避免重复加载
      if (!window.AMap) {
        window._AMapSecurityConfig = {
          securityJsCode: "37652e7f4e6a36d44a26b9135b35ecbd"
        };

        const script = document.createElement("script");
        script.src = "https://webapi.amap.com/maps?v=2.0&key=f6ee75cf708809feecc24c159cc6ebb1";
        script.onload = () => {
          this.initMap();  // 初始化地图
          this.initGeolocation();
        };
        document.head.appendChild(script);
      } else {
        this.initMap(); // 如果已经加载，直接初始化地图
        this.initGeolocation();
      }
    },
    initMap() {
      // 初始化地图，绑定到 #map-container 容器
      this.map = new AMap.Map("map-container", {
        zoom: 15,  // 地图缩放等级
        center: [116.397428, 39.90923],  // 初始地图中心点
      });
    },
    initGeolocation() {
      AMap.plugin("AMap.Geolocation", () => {
        const geolocation = new AMap.Geolocation({
          enableHighAccuracy: true,
          timeout: 10000,
          needAddress: true
        });
        geolocation.getCurrentPosition((status, result) => {
          if (status === "complete") {
            this.onComplete(result);
          } else {
            this.onError(result);
          }
        });
      });
    },
    onComplete(data) {
      this.statusMessage = `${data.formattedAddress}`; // 显示地址信息
      const lngLat = `${data.position.lng}, ${data.position.lat}`;

      // 将地图的中心点设置为当前定位的坐标
      this.map.setCenter([data.position.lng, data.position.lat]);

      // 在地图上添加定位点标记
      const marker = new AMap.Marker({
        position: new AMap.LngLat(data.position.lng, data.position.lat)
      });
      this.map.add(marker);
      
      // 从 localStorage 中获取 user_id
      const userId = localStorage.getItem('userId');
      if (!userId) {
        console.error('用户未登录或 user_id 未找到');
        return;
      }

      // 将位置信息通过POST请求发送到后端
      fetch(`https://124.222.156.13/api/location/save?userId=${userId}`, {  // 将 userId 作为请求参数传递
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          location_msg: data.formattedAddress,
          lonlat: lngLat
        })
      })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error("Failed to save location");
          }
        })
        .then(data => {
          console.log("位置信息已成功保存", data);
        })
        .catch(error => {
          console.error("保存位置信息失败：", error.message);
        });
    },
    onError(data) {
      this.statusMessage = "定位失败";
      console.error("定位失败：", data);
    }
  }
};
</script>

<style scoped>
/* 为地图设置为覆盖层，并确保box6的布局不变 */
.location-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  padding-bottom: 70%; 
}

.map-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.location-info {
  position: absolute;
  bottom: 10px;
  left: 10px;
  z-index: 2;
  color: #fff;
  background-color: rgba(0, 0, 0, 0.5);
  padding: 5px 10px;
  border-radius: 5px;
  font-size: 14px;
}
</style>
</file>

<file path="moodbloom_vue/src/config.js">
// src/config.js
const config = {
    apiBaseUrl: process.env.NODE_ENV === 'production'
      ? 'https://124.222.156.13'  // 生产环境的基础 URL
      : 'https://124.222.156.13'  // 开发环境的基础 URL
  };
  
  export default config;
</file>

<file path="moodbloom_vue/src/main.js">
import { createApp } from 'vue';
import App from './App.vue';
import router from './router';
import '@fortawesome/fontawesome-free/css/all.css';
import '@fortawesome/fontawesome-free/js/all.js';


createApp(App).use(router).mount('#app');
</file>

<file path="moodbloom_vue/src/router/index.js">
import { createRouter, createWebHistory } from 'vue-router';
import LoginAndRegister from '../views/LoginAndRegister.vue';//登陆注册页面
import HomePage from '../views/HomePage.vue';//主页面
import RecordMood from '../views/RecordMood.vue'; // 心情记录页面
import ViewMood from '../views/ViewMood.vue'; // 查看心情页面
import NewsPage from '../views/NewsPage.vue';//查看每日头条界面


const routes = [
  {
    path: '/',
    name: 'LoginAndRegister',
    component: LoginAndRegister,
    meta:{title:'欢迎加入'}
  },
  {
    path: '/HomePage',
    name: 'HomePage',
    component: HomePage,
    meta:{title:'首页'}
  },
  {
    path: '/RecordMood',
    name: 'RecordMood',
    component: RecordMood,
    meta:{title:'记录'}
  },
  {
    path: '/ViewMood',
    name: 'ViewMood',
    component: ViewMood,
    meta:{title:'回顾'}
  },
  {
    path: '/NewsPage',
    name: 'NewsPage',
    component: NewsPage,
    meta:{title:'今日头条'}
  }
];

const router = createRouter({
    history: createWebHistory(process.env.BASE_URL),
    routes
  });
  
  export default router;
</file>

<file path="moodbloom_vue/src/views/HomePage.vue">
<template>
  <div class="app-body">
    <div class="container">
      <transition name="fade" mode="out-in">
        <router-view></router-view>
      </transition>

      <div class="box box1">
        <div class="box1-content">
          <p class="welcome-message">欢迎 <span class="highlight-username">{{ username }}</span> 来到主页！</p>
          <p class="user-activity">
            <i class="user-activity-icon">🔥</i> 已陪伴你 {{ activeDays }} 天!
          </p>

          <p class="weather-info" v-if="weather">
            <i class="weather-icon" :class="getWeatherIcon(weather.text)"></i> 
            <span class="weather-description">{{ weather.text }}</span> 
            <span class="weather-temp">{{ weather.temp }}°C</span>
          </p>

          <transition name="fade">
            <blockquote v-if="latestQuote" class="quote-text">
              “{{ latestQuote }}”
            </blockquote>
          </transition>
        </div>
      </div>


      <div class="box box2">
        <div class="music-player">
          <div :class="['record', { playing: isPlaying }]">
            <i class="fas fa-compact-disc"></i>
          </div>
          <div class="song-info">
            <h3 class="song-title">Shape of you</h3>
            <p class="artist-name">Ed Sheeran</p>
          </div>
          <div class="player-controls">
            <button class="prev-btn"><i class="fas fa-backward"></i></button>
            <button class="play-btn" @click="togglePlayPause">
              <span style="font-weight: bold;">{{ isPlaying ? '||' : '▶' }}</span>
            </button>
            <button class="next-btn"><i class="fas fa-forward"></i></button>
          </div>
        </div>
        <!-- 隐藏的 audio 元素 -->
        <audio ref="audio" @ended="handleEnded">
          <source src="/audio/soy.mp3" type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
      </div>


      <div class="box box3" @click="navigateTo('/RecordMood')">
        <span>心境随笔</span>
      </div>


      <div class="box box4" @click="navigateTo('/ViewMood')">
        <div class="flip-card-inner">
          <div class="flip-card-front">
            <span>济忆</span>
          </div>
          <div class="flip-card-back">
            <img src="@/assets/view-mood-icon.png" alt="查看心情图片" class="mood-image" />
          </div>
        </div>
      </div>


      <!-- news -->
      <div class="box box5" @click="navigateTo('/NewsPage')">
        <div class="content-left">
          <h2>此时此刻</h2>
        </div>
        <div class="content-right">
          <img src="../assets/default.png" alt="News Image" class="news-thumbnail">
        </div>
      </div>



      <div class="box box6">
        <LocationMap />
      </div>
    </div>
  </div>
</template>

<script>
import LocationMap from '../components/LocationMap.vue'; // 引入 LocationMap 组件
import axios from 'axios';
export default {
  name: 'HomePageBentoLayout',
  components: {
    LocationMap,  // 注册 LocationMap 组件
  },
  data() {
    return {
      username: '',// 初始化用户名为空
      latestQuote: '', // 用于存储最新的鸡汤语录
      activeDays: 0, // 用于存储用户活跃天数
      weather: null,  // 用于存储天气信息
      isPlaying: false, // 初始化为未播放状态
    };
  },
  mounted() {
    // 从 localStorage 中获取用户名
    this.username = localStorage.getItem('username');

    // 计算用户活跃天数
    this.calculateActiveDays();

    // 获取最新心灵鸡汤语录
    this.getLatestQuote();

    // 获取天气信息
    this.fetchWeatherInfo();
  },
  methods: {
    // 跳转到不同的路由
    navigateTo(route) {
      this.$router.push(route);
    },
    // 获取最新心灵鸡汤语录
    getLatestQuote() {
      axios
        .get(`https://124.222.156.13/api/soup-quotes/latest`) // 请求后端API获取最新语录
        .then(response => {
          this.latestQuote = response.data.text; // 将语录赋值给latestQuote
        })
        .catch(error => {
          console.error("获取心灵鸡汤失败: ", error); // 错误处理
        });
    },
    // 计算用户活跃天数
    calculateActiveDays() {
      const username = this.username; // 假设你有用户名信息
      const firstLoginKey = `firstLoginDate_${username}`; // 为每个用户生成唯一的 key
      
      const firstLoginDate = localStorage.getItem(firstLoginKey);

      if (firstLoginDate) {
        // 计算当前日期与首次登录日期的时间差
        const diffTime = Math.abs(new Date() - new Date(firstLoginDate));
        this.activeDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); // 换算成天数
      } else {
        // 如果是首次登录，则将当前日期存储为首次登录日期
        localStorage.setItem(firstLoginKey, new Date());
        this.activeDays = 1; // 活跃天数为1天
      }
    },

    // 获取当前用户的天气信息
    fetchWeatherInfo() {
      const userId = localStorage.getItem('userId'); // 假设用户ID保存在localStorage中
      axios
        .get(`https://124.222.156.13/api/weather/current?userId=${userId}`) // 调用后端天气API
        .then(response => {
          this.weather = response.data; // 存储天气信息
        })
        .catch(error => {
          console.error("获取天气信息失败: ", error);
        });
    },
    getWeatherIcon(weatherText) {
      switch (weatherText) {
        case '晴天':
          return 'wi wi-day-sunny';
        case '雨天':
          return 'wi wi-rain';
        case '多云':
          return 'wi wi-cloudy';
        case '雪天':
          return 'wi wi-snow';
        default:
          return 'wi wi-day-cloudy'; // 默认图标
      }
    },
    togglePlayPause() {
      const audio = this.$refs.audio;
      if (this.isPlaying) {
        audio.pause(); // 暂停音频
      } else {
        audio.play(); // 播放音频
      }
      this.isPlaying = !this.isPlaying; // 切换播放状态
    },
    handleEnded() {
      // 当音频播放结束时，自动将 isPlaying 设为 false
      this.isPlaying = false;
    },
    
  }
};
</script>

<style scoped>
/* 导入字体 */
@import url('https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap');

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden; /* 防止出现滚动条 */
}

.app-body {
  font-family: 'Poppins', sans-serif;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(163, 218, 243, 1) 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  backdrop-filter: blur(10px);
}

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 30px;
  padding: 20px;
  width: 90vw;
  height: 90vh;
  max-width: 1200px;
  max-height: 800px;
}

.box {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 15px;
  color: #fff;
  font-size: 22px;
  font-weight: bold;
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  background: linear-gradient(45deg, #7f8c8d, #34495e);
  padding: 10px;
  border: 2px solid rgba(255, 255, 255, 0.4);
  backdrop-filter: blur(5px);
  cursor: pointer; 
}


.box1 {
  background: linear-gradient(135deg, #9c89b8, #6a4c93);
  grid-column: span 1;
  grid-row: span 2;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  border-radius: 20px;
  height: 100%; /* 确保 box1 高度完全填充 */
  width: 100%;  /* 确保 box1 宽度完全填充 */
}

.box1-content {
  text-align: center; /* 内容居中 */
  width: 100%;
  height: 100%; /* 确保内容区域也填充父元素 */
  display: flex;
  flex-direction: column; /* 使子元素垂直排列 */
  justify-content: center; /* 垂直居中 */
}

.weather-info {
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.2));
  border-radius: 10px;
  padding: 10px 20px;
  margin-top: 20px;
  color: #fff;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  font-size: 16px;
}

.weather-icon {
  font-size: 30px;
  margin-right: 10px;
}

.weather-temp {
  font-size: 16px;
  color: #fff;
}

.weather-description {
  margin-right: 5px;
}

.welcome-message {
  font-size: 24px;
  font-weight: bold;
  color: #fff;
  margin-bottom: 15px;
}

.highlight-username {
  color: #88d7f1; /* 改变颜色为金色 */
  font-size: 30px; /* 比普通文字稍大 */
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}


.user-activity {
  font-size: 18px;
  font-weight: bold;
  color: #f7f7f4;
  background: linear-gradient(135deg, #cde7eb, #88d7f1);
  padding: 10px 20px;
  border-radius: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  margin-bottom: 20px;
  display: inline-block;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.user-activity-icon {
  margin-right: 8px;
  font-size: 18px;
  vertical-align: middle;
  color: white;
}

.quote-text {
  font-size: 12px;
  font-style: italic;
  color: #f0e6f6;
  text-align: center;
  line-height: 1.5;
  padding: 10px;
  border-left: 5px solid #f0e6f6;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
}



.box2 {
  position: relative;
  background: #e0e0e0; /* 灰色背景 */
  grid-column: span 2;
  grid-row: span 1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  border-radius: 30px; /* 圆角 */
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2); /* 柔和的阴影 */
  overflow: hidden;
}

.music-player {
  display: flex;
  align-items: center;
  width: 100%;
  max-width: 600px;
  justify-content: space-between; /* 左右两侧分布 */
}

.record {
  width: 120px;
  height: 120px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 100px; /* 图标大小 */
  color: #333; /* 图标颜色 */
  transition: transform 0.3s ease; /* 旋转动画 */
}

.record.playing {
  animation: spin 4s linear infinite; /* 旋转动画 */
}

@keyframes spin {
  100% {
    transform: rotate(360deg);
  }
}

.song-info {
  flex-grow: 1;
  margin-left: 20px;
  text-align: left;
}

.song-title {
  font-size: 20px;
  font-weight: bold;
  color: #333;
  margin: 0;
}

.artist-name {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.6);
  margin: 5px 0 0;
}

.player-controls {
  display: flex;
  align-items: center;
}

button {
  background-color: transparent;
  border: none;
  color: #333;
  font-size: 24px;
  margin: 0 10px;
  cursor: pointer;
}

button:focus {
  outline: none;
}


.box3 {
  position: relative;
  background: linear-gradient(135deg, #e0f7da, #b2fab4);
  grid-column: span 1;
  grid-row: span 1;
  border-radius: 15px;
  display: flex;
  flex-direction: column; /* 使图案和文字垂直排列 */
  justify-content: center;
  align-items: center;
  color: #fff;
  font-size: 22px;
  font-weight: bold;
  text-align: center;
  padding: 20px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
  overflow: hidden;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}


.box3::before {
  content: '';
  position: absolute;
  top: -10px; 
  left: -10px;
  width: 90px; /* 调整图案大小以适配 box3 */
  height: 90px;
  background: url('@/assets/record-mood-icon.png') no-repeat center center; /* 更新图案路径 */
  background-size: contain; 
  border-radius: 50%; /* 图片变为圆形，增加柔和感 */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 轻微阴影，增加立体感 */
  opacity: 0.9; 
  z-index: 0;
  transition: transform 0.3s ease, opacity 0.3s ease;
}

.box3:hover {
  transform: scale(1.05); /* 鼠标悬停时，略微放大 */
  transform: translateY(-5px); 
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3); /* 悬停时增加阴影 */
}

.box3:hover::before {
  transform: scale(1.1); /* 图片在悬停时放大 */
  opacity: 1; /* 悬停时增加图片的清晰度 */
}

.box3::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  border: 2px solid rgba(255, 255, 255, 0.4);
  transition: border-color 0.3s ease;
}

.box3:hover::after {
  border-color: rgba(255, 255, 255, 0.8); /* 悬停时改变边框颜色 */
}



.box4 {
  position: relative;
  perspective: 1000px; /* 添加透视效果，创造3D空间 */
  width: 100%;
  height: 100%;
  border: none;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 轻柔阴影 */
  background: #f6a6b2;
  border-radius: 15px; /* 确保容器有圆角 */
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.6s;
  transform-style: preserve-3d; /* 保持3D翻转效果 */
  border-radius: 15px; /* 圆角效果 */
}

.box4:hover .flip-card-inner {
  transform: rotateY(180deg); /* 悬停时翻转 */
}

.flip-card-front, .flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden; /* 隐藏背面内容 */
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 15px; 
}

.flip-card-front {
  background: #f6a6b2; /* 前面背景 */
  color: #fff;
  box-shadow: none; 
}

.flip-card-back {
  background: #f6a6b2; /* 反面背景 */
  color: #fff;
  transform: rotateY(180deg); /* 反面旋转180度 */
  box-shadow: none; 
  padding: 0; /* 去除内边距，确保图片完全填充 */
  overflow: hidden; /* 确保图片不会溢出容器 */
}

/* 调整图片的样式，确保自然填充 */
.mood-image {
  width: 100%; 
  height: 100%; 
  object-fit: cover; 
  border-radius: 15px; 
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
}


.box5 {
  background: linear-gradient(135deg, #ffd97d, #ffb347);
  grid-column: span 2;
  grid-row: span 1;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0;
  border-radius: 10px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  overflow: hidden;
}

.box5:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
}

/* 左侧梯形 */
.content-left {
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  background-color: #ffd97d;
  clip-path: polygon(0 0, 100% 0, 80% 100%, 0% 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 24px;
  font-weight: bold;
}

/* 右侧互补梯形 */
.content-right {
  position: absolute;
  top: 0;
  right: 0;
  width: 62%;
  height: 100%;
  clip-path: polygon(20% 0, 100% 0, 100% 100%, 0% 100%);
  overflow: hidden;
}

.news-thumbnail {
  width: 100%;
  height: 100%;
  object-fit: cover;
}



.box6 {
  background: linear-gradient(135deg, #a8d0e6, #84b3d0);
  grid-column: span 1;
  grid-row: span 1;
}

.fade-enter-active, .fade-leave-active {
  transition: opacity 0.5s;
}
.fade-enter, .fade-leave-to  {
  opacity: 0;
}

</style>
</file>

<file path="moodbloom_vue/src/views/LoginAndRegister.vue">
<template>
  <div class="auth-page"> <!-- 包含背景的容器 -->
    <!-- 动态文字 -->
    <div class="dynamic-text">
      <span v-for="(word, index) in words" :key="index" class="word">{{ word }}</span>
    </div>

    <div class="auth-container">
      <div class="wrapper">
        <!-- 注册表单 -->
        <div v-if="isRegister">
          <h2>注册</h2>
          <form @submit.prevent="register">
            <div class="input-box">
              <input v-model="registerForm.username" type="text" required />
              <label>用户名</label>
            </div>
            <div class="input-box">
              <input v-model="registerForm.email" type="email" required />
              <label>邮箱</label>
            </div>
            <div class="input-box">
              <input v-model="registerForm.password" type="password" required />
              <label>密码</label>
            </div>
            <button type="submit" class="btn">注册</button>
          </form>
          <div class="signup-link">
            <p>已有账户？<a href="#" @click="toggleForm">点击这里登录</a></p>
          </div>
        </div>

        <!-- 登录表单 -->
        <div v-else>
          <h2>登录</h2>
          <form @submit.prevent="login">
            <div class="input-box">
              <input v-model="loginForm.username" type="text" required />
              <label>用户名</label>
            </div>
            <div class="input-box">
              <input v-model="loginForm.password" type="password" required />
              <label>密码</label>
            </div>
            <button type="submit" class="btn">登录</button>
          </form>
          <div class="signup-link">
            <p>没有账户？<a href="#" @click="toggleForm">点击这里注册</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

  <script>
  import axios from 'axios';

  export default {

    data() {
      return {
        words: [],
        isRegister: false,
        // 注册表单数据
        registerForm: {
          username: '',
          email: '',
          password: ''
        },
        // 登录表单数据
        loginForm: {
          username: '',
          password: ''
        }
      };
    },

    mounted() {
      const fullText = '可以写点东西~';
      let index = 0;

      const typingEffect = () => {
        if (index < fullText.length) {
          this.words.push(fullText[index]);
          index++;
          setTimeout(typingEffect, 150); // 控制文字出现的速度
        }
      };

      typingEffect();
    },


    methods: {
      toggleForm() {
        this.isRegister = !this.isRegister;
      },
      async register() {
        try {
            await axios.post(`https://124.222.156.13/api/user/register`, this.registerForm);
            alert('注册成功！请登录');
            this.toggleForm();  // 注册成功后切换到登录表单
        } catch (error) {
            // 改进错误信息提示
            const errorMessage = error.response && error.response.data ? error.response.data : error.message;
            alert('注册失败: ' + errorMessage);
        }
        },
      async login() {
        try {
            const response = await axios.post(`https://124.222.156.13/api/user/login`, this.loginForm);

            // 检查登录响应是否包含用户名和 userId
            if (response.data.userId && response.data.username) {
            const userId = response.data.userId;
            const username = response.data.username;

            // 保存 userId 和 username 到 localStorage
            localStorage.setItem('userId', userId);
            localStorage.setItem('username', username); // 保存用户名

            alert('登录成功！欢迎 ' + username);
            this.$router.push('/HomePage');  // 跳转到首页
            } else {
            alert('登录响应中缺少用户名或 userId');
            }
        } catch (error) {
            alert('登录失败: ' + (error.response ? error.response.data : error.message));
        }
        }
    }
  };
</script>


<style scoped>
* {
    font-family: "Poppins", sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.auth-page {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #282a37; /* 深灰色背景 */
}

.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; /* 占满整个屏幕高度 */
}

.wrapper {
    position: relative;
    width: 400px;
    height: 450px;
    background: #3e404d;
    border: 2px solid rgba(255, 255, 255, 0.5);
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(15px);
    box-shadow: 0px 0px 15px 5px rgba(255, 255, 255, 0.2);
}

.wrapper:hover {
    box-shadow: 0 0 40px rgba(255,255,255,0.5);
    background: #46474e;
}

.wrapper h1, .wrapper h2 {
    font-size: 2em;
    color: #fff;
    text-align: center;
}

.wrapper .input-box {
    position: relative;
    width: 310px;
    margin: 30px 0;
    border-bottom: 2px solid #fff;
}

.wrapper .input-box input {
    width: 100%;
    height: 50px;
    background: transparent;
    outline: none;
    border: none;
    font-size: 1em;
    color: #fff;
    padding: 0 40px 0 5px;
    border-bottom: 1px solid #ccc;
}

.wrapper .input-box label {
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    font-size: 1em;
    color: #fff;
    pointer-events: none;
    transition: 0.5s;
}

.wrapper .input-box input:focus ~ label {
    border-bottom: 1px solid #fff; /* 聚焦时边框变白 */
}

.wrapper .input-box input:focus ~ label,
.wrapper .input-box input:valid ~ label {
    top: -5px;
}

.wrapper .input-box .icon {
    position: absolute;
    right: 8px;
    color: #fff;
    font-size: 1.2em;
    line-height: 57px;
}

.wrapper .btn {
    width: 100%;
    height: 40px;
    background: #fff;
    outline: none;
    border: none;
    border-radius: 40px;
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    color: #000;
    margin-top: 10px;
    border-radius: 20px;
}

.btn:hover {
    background: #ffffea;
}

.wrapper .signup-link {
    font-size: 0.9em;
    color: #fff;
    text-align: center;
    margin: 25px 0 10px;
}

.wrapper .signup-link a {
    color: #fff;
    text-decoration: none;
    font-weight: 600;
}

.wrapper .signup-link a:hover {
    text-decoration: underline;
    color: #aaa;
}

.dynamic-text {
  position: absolute;
  letter-spacing: 0.1em;
  top: 40px; 
  left: 4cqi;
  font-size: 24px;
  color: white;
  font-family: 'ZCOOL KuaiLe', 'Microsoft YaHei', 'PingFang SC', 'WenQuanYi Micro Hei', sans-serif !important;
  animation: fade-in 2.0s ease-in-out;
}


.word {
  display: inline-block;
  opacity: 0;
  animation: fade-in-word 0.5s ease forwards;
}

@keyframes fade-in-word {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>
</file>

<file path="moodbloom_vue/src/views/NewsPage.vue">
<template>
  <div class="app-body">
    <div class="container">
      <div v-for="(news, index) in newsList.slice(0, 7)" :key="index" :class="'box box' + (index + 1)" @click="openNews(index)">
        <img :src="news.thumbnailPicS || require('@/assets/default.png')" :alt="'新闻' + (index + 1)" class="news-image">

        <div class="news-content">
          <h2 class="news-title">{{ news.title || '新闻标题 ' + (index + 1) }}</h2>
          <p class="news-snippet">{{ news.authorName || '新闻摘要内容 ' + (index + 1) }}，点击阅读更多。</p>
        </div>
      </div>
    </div>
  </div>
</template>


<script>
import axios from 'axios';

export default {
  name: 'NewsLayout',
  data() {
    return {
      newsList: []  // 用于存储最新的7条新闻
    };
  },
  methods: {
    // 先调用 /fetch 获取并保存新闻数据
    fetchAndSaveNews() {
      axios.get(`https://124.222.156.13/api/news/fetch`)  // 调用后端的 fetch 接口
        .then(() => {
          // 获取成功后，再调用获取最新新闻的接口
          this.fetchLatestNews();
        })
        .catch(error => {
          console.error("获取新闻数据时发生错误: ", error);
        });
    },
    // 获取最新的7条新闻
    fetchLatestNews() {
      axios.get('https://124.222.156.13/api/news/latest')  // 调用后端的 latest 接口
        .then(response => {
          this.newsList = response.data;  // 将最新新闻数据绑定到 newsList
        })
        .catch(error => {
          console.error("获取最新新闻时发生错误: ", error);
        });
    },
    openNews(index) {
      const news = this.newsList[index];
      if (news && news.url) {
        window.open(news.url, '_blank');  // 打开新闻的链接
      } else {
        console.log('无法打开新闻，URL 不存在');
      }
    }
  },
  mounted() {
    // 在组件挂载时，先获取并保存新闻数据，然后展示最新7条新闻
    this.fetchAndSaveNews();
  }
};
</script>


<style scoped>
/* 导入字体 */
@import url('https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap');

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.app-body {
  font-family: 'Roboto', sans-serif;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #f4f4f4;
  display: flex;
  justify-content: center;
  align-items: center;
}

.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* 三列 */
  grid-template-rows: auto;
  grid-template-areas:
    "box1 box1 box2"
    "box3 box4 box5"
    "box6 box7 box7";
  gap: 20px;
  padding: 20px;
  width: 90vw;
  max-width: 1200px;
  max-height: 90vh;
  overflow-y: auto;
}

.box {
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  display: flex;
  flex-direction: column;
}

.box:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.news-image {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.news-content {
  padding: 15px;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.news-title {
  font-size: 20px;
  font-weight: bold;
  color: #333;
  margin-bottom: 10px;
}

.news-snippet {
  font-size: 14px;
  color: #666;
  flex-grow: 1;
}

.news-image {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.news-title, .news-snippet {
  word-wrap: break-word; /* 确保长文本不会溢出 */
}

.news-snippet {
  font-size: 14px;
  color: #666;
  flex-grow: 1;
}

.box1 {
  grid-area: box1;
}

.box2 {
  grid-area: box2;
}

.box3 {
  grid-area: box3;
}

.box4 {
  grid-area: box4;
}

.box5 {
  grid-area: box5;
}

.box6 {
  grid-area: box6;
}

.box7 {
  grid-area: box7;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .container {
    grid-template-columns: 1fr 1fr;
    grid-template-areas:
      "box1 box1"
      "box2 box2"
      "box3 box4"
      "box5 box6"
      "box7 box7";
  }
}
</style>
</file>

<file path="moodbloom_vue/src/views/RecordMood.vue">
<template>
  <div class="view-mood-container">
    <!-- 日历导航 -->
    <CalendarNav :selectedDate="selectedDate" @date-selected="selectDate" />

    <!-- 已记录心情列表 -->
    <div v-if="moodRecords.length" class="timeline-container">
      <div v-for="moodRecord in moodRecords" :key="moodRecord.moodRecord.id" class="timeline-item">
        <!-- 时间 -->
        <div class="timeline-time">{{ formatTime(moodRecord.moodRecord.recordTime) }}</div>

        <div class="mood-record-container">

          <!-- 心情记录 -->
          <div class="mood-record">
            <p class="record-title">{{ moodRecord.moodRecord.moodText }}</p>
          </div>

          <!-- 图片展示 -->
          <div v-if="moodRecord.imageUrls && moodRecord.imageUrls.length > 0" class="image-gallery">
            <div v-for="(imageUrl, index) in moodRecord.imageUrls" :key="index" class="image-container">
              <img :src="getFullImageUrl(imageUrl)" alt="心情图片" class="mood-image" />
            </div>
          </div>

          <!-- AI 回复 -->
          <div class="ai-response">
            <div class="bubble-connector"></div> <!-- 虚线连接器 -->
            <div class="ai-bubble">
              <i class="fas fa-lightbulb ai-icon"></i> <!-- 添加 ai-icon 类 -->

              <div class="ai-text">
                <p>{{ moodRecord.aiResponse }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div v-else class="empty-message">
      <p>这里空空如也~</p>
    </div>

    <!-- 心情记录表单 -->
    <div class="mood-input-container">
      
      <!-- 图片预览区域 -->
      <div v-if="selectedImages.length" class="image-preview-container">
        <div v-for="(image, index) in selectedImages" :key="index" class="image-preview">
          <img :src="image.previewUrl" class="preview-image" alt="心情图片" />
          <!-- 删除按钮 -->
          <button @click="removeSelectedImage(index)" class="remove-button">×</button>
        </div>
      </div>

      <!-- 输入框和按钮 -->
      <div class="input-and-buttons">
        <!-- 图片上传按钮 -->
        <div class="icon-button">
          <label for="image-upload">
            <i class="fas fa-image"></i> <!-- 添加图片图标 -->
          </label>
          <input type="file" id="image-upload" @change="handleImageUpload" accept="image/*" style="display: none;" multiple />
        </div>

        <!-- 生成图片按钮 -->
        <div class="icon-button" @click="openModal">
          <i class="fas fa-paint-brush"></i> <!-- 新增的图标 -->
        </div>

        <!-- 输入框 -->
        <input type="text" v-model="newMoodText" placeholder="想记些什么呢？" />

        <!-- 发送按钮 -->
        <div class="icon-button" @click="addMoodRecord">
          <i class="fas fa-paper-plane"></i> <!-- 纸飞机图标 -->
        </div>
      </div>
    </div>


    <!-- 新增的模态框 -->
    <div v-if="showModal" class="modal">
      <div class="modal-content">
        <span class="close" @click="closeModal">&times;</span>
        <h3>发挥你的阳光积极的想象力！！</h3>
        <input type="text" v-model="inputText" placeholder="请输入描述文本">
        <button @click="generateImage">发送</button>
      </div>
    </div>
  </div>
</template>


<script>
import axios from 'axios';
import { format } from 'date-fns';
import CalendarNav from '@/components/CalendarNav.vue'; // 导入日历组件

export default {
  components: {
    CalendarNav
  },
  data() {
    return {
      moodRecords: [], // 初始化为空数组
      selectedDate: new Date(), // 当前选中的日期，默认为今天
      newMoodText: '', // 新的心情文本
      selectedImages: [] ,// 存储用户选中的图片文件数组
      showModal: false, // 控制模态框显示
      inputText: '', // 存储用户输入的文本
    };
  },
  methods: {
    // 打开模态框
    openModal() {
      this.showModal = true;
    },
    // 关闭模态框
    closeModal() {
      this.showModal = false;
    },
  // 生成图片并打开图片链接
  async generateImage() {
    try {
      // 用户点击发送时生成图片
      const response = await fetch(`https://124.222.156.13/api/txt2img/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ text: this.inputText })
      });

      // 检查响应状态码
      if (!response.ok) {
        // 如果状态码不是 2xx，显示友好的提示
        console.error("生成图片失败，状态码: ", response.status);
        alert("哎呀，换一张呢！");
        return;
      }

      // 获取图片链接
      const imageUrl = await response.text();
      console.log("Generated Image URL:", imageUrl);

      if (!imageUrl) {
        // 如果未能成功获取到图片链接，给出友好提示
        alert("哎呀，换一张呢！");
        return;
      }

      // 打开图片链接
      window.open(imageUrl, '_blank');

      // 关闭模态框
      this.showModal = false;
    } catch (error) {
      // 捕获异常并给出友好提示
      console.error("生成图片失败: ", error);
      alert("哎呀，换一张呢！");
    }
  },
    

    // 获取指定日期的心情记录及其AI回复
    async fetchMoodRecords(date) {
      try {
        const formattedDate = format(date, 'yyyy-MM-dd');
        const userId = localStorage.getItem('userId'); 
        const response = await axios.get(`https://124.222.156.13/api/mood/byDate?date=${formattedDate}&userId=${userId}&includeAIResponses=true`);
        
        // 如果有数据，按照recordTime从新到旧进行排序
        this.moodRecords = (response.data || []).sort((a, b) => {
          return new Date(b.moodRecord.recordTime) - new Date(a.moodRecord.recordTime); // 从新到旧排序
        });
      } catch (error) {
        console.error("获取心情记录失败: ", error);
      }
    },
    // 选择日期并获取记录
    selectDate(date) {
      this.selectedDate = date;
      this.fetchMoodRecords(date);
    },
    // 格式化时间为小时和分钟
    formatTime(dateStr) {
      return format(new Date(dateStr), 'HH:mm');
    },

    // 添加心情记录
    async addMoodRecord() {
      // 验证用户是否输入内容或选择了图片
      if (!this.newMoodText.trim() && this.selectedImages.length === 0) {
        alert("记录生活~");
        return;
      }

      try {
        const userId = localStorage.getItem('userId');
        const formData = new FormData();
        formData.append('userId', userId);
        formData.append('moodText', this.newMoodText);

        // 确保所有图片都使用相同的字段名 'images'
        this.selectedImages.forEach((image) => {
          formData.append('images', image.file);  // 所有图片都用 'images' 作为键
        });

        const response = await axios.post('https://124.222.156.13/api/mood/add', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });

        // 将新记录插入数组的顶部
        this.moodRecords.unshift({
          moodRecord: response.data.moodRecord,
          aiResponse: response.data.aiResponse
        });
        
        // 清空输入框和图片预览
        this.newMoodText = '';
        this.selectedImages = [];
        document.getElementById('image-upload').value = ''; // 清空文件输入框
      } catch (error) {
        console.error("添加心情记录失败: ", error);
      }
    },



    handleImageUpload(event) {
      const files = Array.from(event.target.files);
      
      // 调试信息
      console.log("Selected files:", files);
      
      const totalImagesAfterUpload = this.selectedImages.length + files.length;

      if (totalImagesAfterUpload > 3) {
        alert("最多只能上传三张图片。");
        return; // 超过三张图片，停止执行并给出提示
      }

      files.forEach(file => {
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            console.log("Image preview URL:", e.target.result); // 检查预览 URL
            this.selectedImages.push({ file: file, previewUrl: e.target.result }); // 将文件和预览URL加入数组
          };
          reader.readAsDataURL(file); // 异步读取文件内容并生成图片预览
        }
      });

      // 调试信息：查看 `selectedImages` 数组是否正确更新
      console.log("Updated selectedImages:", this.selectedImages);
    },



    removeSelectedImage(index) {
      this.selectedImages.splice(index, 1); // 根据索引删除选中的图片
    },


    getFullImageUrl(imageUrl) {
      return `https://124.222.156.13${imageUrl}`; 
    },

  },
  mounted() {
    this.fetchMoodRecords(this.selectedDate); // 初始加载当前日期的心情记录
  }
};
</script>

<style scoped>
.view-mood-container {
  padding: 20px;
  background-color: #f9f9f9;
}

.timeline-container {
  display: flex;
  flex-direction: column;
  position: relative;
  padding-left: 40px;
  border-left: 2px dashed #999;
  padding-bottom: 50px; 
}

.timeline-item {
  display: flex;
  flex-direction: column;
  margin-bottom: 20px;
  position: relative;
}

.timeline-time {
  position: absolute;
  left: -60px;
  font-size: 16px;
  color: #f5a623;
  font-weight: bold;
  margin-top: 10px;
  background-color: #f9f9f9; 
  z-index: 1;
  padding: 8px 10px;
  line-height: 2; 
}

.mood-record-container {
  display: flex;
  flex-direction: column;
  margin-left: 10px;
  padding: 15px;
  background: linear-gradient(135deg, #f9f9f9, #f1f1f1); /* 渐变背景 */
  border: 1px solid #ddd;
  border-radius: 20px;
  margin-bottom: 10px;
  z-index: 0;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 添加阴影 */
  transition: transform 0.3s ease, box-shadow 0.3s ease; /* 添加过渡效果 */
}

.mood-record-container:hover {
  transform: scale(1.01); /* 鼠标悬停时放大效果 */
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* 鼠标悬停时增加阴影 */
  border-color: #ccc; /* 改变边框颜色 */
}


.mood-record {
  font-weight: bold;
  font-size: 16px;
  color: #333;
  z-index: 2;
}

.ai-response {
  position: relative;
  margin-top: 10px;
}

.bubble-connector {
  width: 2px;
  height: 20px;
  background: #ddd;
  margin-left: 20px;
  margin-bottom: -10px;
}

.ai-bubble {
  background-color: #f9f9f9;
  border: 2px solid #f5a623;
  border-radius: 15px;
  padding: 10px;
  display: flex;
  align-items: center;
  position: relative;
  margin-left: 40px;
  width: auto; 
}

.ai-bubble:before {
  content: "";
  position: absolute;
  left: -10px;
  top: 15px;
  width: 0;
  height: 0;
  border-top: 10px solid transparent;
  border-right: 10px solid #f9f9f9;
  border-bottom: 10px solid transparent;
}

.ai-response i {
  color: #f5a623;
  margin-right: 10px;
  font-size: 18px;
}

.ai-text {
  font-size: 14px;
  color: #555;
}

.ai-icon {
  color: #f5a623; 
  font-size: 18px; 
  margin-right: 10px; 
}
/* ========================= */
/* 图片展示区域 */
.image-gallery {
  display: flex;
  flex-wrap: wrap; /* 允许图片换行 */
  gap: 10px; /* 图片之间的间距 */
  margin-top: 10px;
}

/* 图片容器，控制图片大小 */
.image-container {
  width: 120px; /* 调整为合适的宽度 */
  height: 120px; /* 调整为合适的高度 */
  overflow: hidden;
  border-radius: 10px; /* 圆角 */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* 添加轻微的阴影 */
}

/* 图片本身 */
.mood-image {
  width: 100%;
  height: 100%;
  object-fit: cover; /* 保持图片比例，填充容器 */
}
/* ========================= */
.mood-input-container {
  position: fixed;
  bottom: 0;
  width: 100%;
  display: flex;
  flex-direction: column; /* 图片预览在输入框上方 */
  align-items: flex-start; /* 左对齐 */
  padding: 10px 15px;
  background-color: #fff;
  border-top: 2px solid #f9a32c;
  z-index: 2;
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
}

.image-preview-container {
  display: flex;
  flex-wrap: wrap; /* 图片换行显示 */
  justify-content: flex-start; /* 左对齐 */
  width: 100%;
  margin-bottom: 10px;
}

.image-preview {
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  overflow: hidden;
  width: 70px;
  height: 70px;
  position: relative;
}

.preview-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.remove-button {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: transparent; /* 透明背景 */
  border: none; /* 无边框 */
  color: rgb(181, 177, 177); /* 浅灰色字体 */
  font-size: 18px; /* 设置合适的字体大小 */
  cursor: pointer;
  padding: 0;
  line-height: 1;
}

.remove-button:hover {
  color: rgb(131, 128, 128); /* 鼠标悬停时颜色加深 */
}


.input-and-buttons {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 95%;
  gap: 5px;
}

input[type="text"] {
  flex-grow: 1;
  padding: 10px 15px;
  font-size: 16px;
  border: none;
  border-radius: 20px;
  background-color: #f5f5f5;
  outline: none;
  width: auto;
  max-width: 80%;
}

.icon-button {
  width: 45px;
  height: 45px;
  background-color: #f5a623;
  color: white;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

/* 模态框的背景遮罩 */
.modal {
  display: none; /* 默认隐藏，只有在需要时显示 */
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6); /* 增强透明度，使背景更暗 */
  backdrop-filter: blur(5px); /* 增加背景模糊效果 */
  display: flex;
  justify-content: center;
  align-items: center;
  animation: fadeIn 0.3s ease; /* 增加渐入动画 */
}

/* 弹窗内容 */
.modal-content {
  background-color: white;
  border-radius: 10px; /* 圆角效果 */
  padding: 30px;
  width: 100%;
  max-width: 400px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* 增加阴影 */
  position: relative;
  animation: slideIn 0.3s ease; /* 增加滑入动画 */
}

/* 关闭按钮 */
.close {
  position: absolute;
  top: 15px;
  right: 15px;
  color: #aaa;
  font-size: 28px;
  cursor: pointer;
  transition: color 0.3s ease;
}

.close:hover,
.close:focus {
  color: #333;
}

/* 输入框 */
.modal-content input[type="text"] {
  width: 100%;
  padding: 12px;
  margin-top: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
  transition: border 0.3s ease;
}

.modal-content input[type="text"]:focus {
  border-color: #f5a623;
  outline: none;
}

/* 发送按钮 */
.modal-content button {
  display: block;
  width: 20%;
  padding: 12px;
  margin-top: 20px;
  background-color: #f5a623;
  border: none;
  border-radius: 5px;
  font-size: 16px;
  color: white;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.modal-content button:hover {
  background-color: #e5941c;
}

/* 渐入动画 */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* 弹窗内容滑入动画 */
@keyframes slideIn {
  from {
    transform: translateY(-50px);
  }
  to {
    transform: translateY(0);
  }
}


</style>
</file>

<file path="moodbloom_vue/src/views/ViewMood.vue">
<template>
  <div class="view-mood-container">

    <!-- 使用 CalendarNav 组件 -->
    <CalendarNav :selectedDate="selectedDate" @date-selected="selectDate" />

    <!-- 显示选定日期的心情记录 -->
    <div v-if="!moodRecords || moodRecords.length === 0" class="empty-message">这里空空如也~</div>

    <div v-else>
      <div v-for="record in moodRecords" :key="record.moodRecord.id" class="mood-record" @click="toggleExpand(record.moodRecord.id)">
        <!-- 显示时间和心情内容 -->
        <div class="mood-info">
          <p class="record-time">{{ formatDate(record.moodRecord.recordTime) }}</p>
          <p class="mood-text">{{ record.moodRecord.moodText }}</p>
        </div>

        <!-- 点击后显示额外信息 -->
        <transition name="expand">
          <div v-if="expandedRecordId === record.moodRecord.id" class="mood-details">
            <div class="weather-info">
              <div class="weather-status">
                <i :class="getWeatherIcon(record.moodRecord.weatherInfo.text)"></i>
                <span class="weather-text">{{ record.moodRecord.weatherInfo ? record.moodRecord.weatherInfo.text : '未知' }}</span>
              </div>
              <div class="weather-temp">
                {{ record.moodRecord.weatherInfo ? record.moodRecord.weatherInfo.temp.toFixed(1) : '未知' }}℃
              </div>
              <p class="weather-detail">{{ record.moodRecord.weatherInfo ? record.moodRecord.weatherInfo.detail : '无详细信息' }}</p>
            </div>

            <!-- 显示位置 -->
            <div class="location-info">
              <i class="fas fa-map-marker-alt"></i>
              <span class="location-text">{{ record.moodRecord.location ? record.moodRecord.location.location_msg : '未知位置' }}</span>
            </div>

            <!-- 图像记录文字 -->
            <div class="image-record-text">
              <span>🧩图像记录</span>
            </div>
            <!-- 如果有图片，显示所有图片 -->
            <div v-if="record.imageUrls && record.imageUrls.length > 0" class="image-gallery">
              <div v-for="(imageUrl, index) in record.imageUrls" :key="index" class="image-container">
                <img :src="getFullImageUrl(imageUrl)" alt="心情图片" class="mood-image" @click.stop="openImageModal(imageUrl)" />
              </div>
            </div>


            <!-- 显示情感倾向 -->
            <div class="mood-analysis">
              <div class="analysis-text">
                <p>{{ getSentimentByIndex(calculateMoodIndex(record.moodRecord.moodAnalysis)) }}</p>
                <!-- 心情指数显示进度条 -->
                <div class="sentiment-display">
                  <div class="positive-label">
                    <i class="fas fa-smile" style="color: #ff5722;"></i>
                    <span>积极</span>
                  </div>

                  <!-- 进度条 -->
                  <div class="sentiment-bar">
                    <div class="sentiment-progress" :style="{ width: calculateMoodIndex(record.moodRecord.moodAnalysis) + '%' }"></div>
                    <span class="sentiment-percentage">{{ calculateMoodIndex(record.moodRecord.moodAnalysis) }}%</span>
                  </div>

                  <div class="negative-label">
                    <i class="fas fa-frown" style="color: #2196f3;"></i>
                    <span>消极</span>
                  </div>
                </div>

                <!-- 显示用户当前的心情指数 -->
                <p class="mood-score">{{ calculateMoodIndex(record.moodRecord.moodAnalysis) }} / 100</p>

                <!-- 显示对应的情感鸡汤句子 -->
                <p class="mood-quote">{{ getMoodQuote(calculateMoodIndex(record.moodRecord.moodAnalysis)) }}</p>
              </div>
            </div>

            <!-- 删除按钮 -->
            <button class="delete-btn" @click.stop="confirmDelete(record.moodRecord.id)">删除记录</button>
          </div>
        </transition>
      </div>

    </div>

    <!-- 图片全屏弹窗 -->
    <div v-if="isModalVisible" class="modal" @click="closeModal">
      <div class="modal-content">
        <img :src="fullImageUrl" class="full-image" alt="全屏图片" />
        <button class="close-btn" @click="closeModal">×</button>
      </div>
    </div>


  </div>
</template>

<script>

import axios from 'axios';
import { format } from 'date-fns';
import CalendarNav from '@/components/CalendarNav.vue'; // 导入日历组件

export default {
  components: {
    CalendarNav
  },
  data() {
    return {
      moodRecords: [], // 初始化为空数组
      selectedDate: new Date(), // 当前选中的日期，默认为今天
      expandedRecordId: null, // 控制展开的记录 ID
      isModalVisible: false, // 控制弹窗显示
      fullImageUrl: '' // 当前全屏显示的图片 URL
    };
  },
  methods: {
    // 打开图片弹窗
    openImageModal(imageUrl) {
      this.fullImageUrl = this.getFullImageUrl(imageUrl);
      this.isModalVisible = true;
    },
    // 关闭弹窗
    closeModal() {
      this.isModalVisible = false;
      this.fullImageUrl = '';
    },

    // 计算心情指数的方法
    calculateMoodIndex(moodAnalysis) {
      const { sentiment, confidence, positiveProb, negativeProb } = moodAnalysis;

      // 假设心情指数基于置信度、积极概率、消极概率的加权总和
      let moodIndex = confidence * 0.5 + positiveProb * 0.3 - negativeProb * 0.2;

      // 根据情感倾向动态调整指数，正向情感增加比例，负向情感减少比例
      if (sentiment === 1) {
        moodIndex += confidence * 0.05;
      } else if (sentiment === -1) {
        moodIndex -= confidence * 0.05;
      }

      // 将 moodIndex 转换到 0-100 范围内，并保留两位小数
      moodIndex = moodIndex * 100;
      return Math.min(100, Math.max(0, moodIndex.toFixed(2)));
    },

    // 根据心情指数显示不同等级的情感倾向
    getSentimentByIndex(moodIndex) {
      if (moodIndex <= 16) return "感觉世界欠我一百万";
      else if (moodIndex <= 33) return "有点丧，但还能凑合";
      else if (moodIndex <= 50) return "心如止水，波澜不惊";
      else if (moodIndex <= 66) return "心情不错，有点小确幸";
      else if (moodIndex <= 83) return "情绪高涨，充满正能量";
      else return "心花怒放，今天谁都挡不住你的好心情！";
    },

    // 根据心情指数返回相应的鸡汤句子
    getMoodQuote(sentimentScore) {
      if (sentimentScore <= 16) return "再大的风雨，也阻挡不了前进的步伐！";
      else if (sentimentScore <= 33) return "不怕失败，继续努力，阳光终会到来。";
      else if (sentimentScore <= 50) return "生活充满了起起落落，但保持微笑，总有希望。";
      else if (sentimentScore <= 66) return "每一天都是一个新的开始，充满希望与挑战。";
      else if (sentimentScore <= 83) return "今天的你已经足够优秀，继续加油吧！";
      else return "阳光满满的一天，继续保持这样的好心情！";
    },

    getWeatherIcon(weatherText) {
      switch (weatherText) {
        case '晴':
          return 'fas fa-sun';  // 晴天
        case '多云':
          return 'fas fa-cloud';  // 多云
        case '阴':
          return 'fas fa-cloud-meatball';  // 阴天
        case '小雨':
          return 'fas fa-cloud-rain';  // 小雨
        case '中雨':
          return 'fas fa-cloud-showers-heavy';  // 中雨
        case '大雨':
          return 'fas fa-cloud-showers-heavy';  // 大雨
        case '雷阵雨':
          return 'fas fa-poo-storm';  // 雷阵雨
        case '阵雨':
          return 'fas fa-cloud-sun-rain';  // 阵雨
        case '小雪':
          return 'fas fa-snowflake';  // 小雪
        case '中雪':
          return 'fas fa-snowflake';  // 中雪
        case '大雪':
          return 'fas fa-snowman';  // 大雪
        case '雾':
          return 'fas fa-smog';  // 雾
        case '霾':
          return 'fas fa-wind';  // 霾
        case '冰雹':
          return 'fas fa-icicles';  // 冰雹
        case '风':
          return 'fas fa-wind';  // 风
        case '沙尘暴':
          return 'fas fa-cloud-meatball';  // 沙尘暴
        case '浮尘':
          return 'fas fa-wind';  // 浮尘
        default:
          return 'fas fa-question';  // 未知天气
      }
    },

    // 获取当前用户的心情记录
    async fetchMoodRecords(date) {
      try {
        const formattedDate = format(date, 'yyyy-MM-dd');
        const userId = localStorage.getItem('userId'); // 从 localStorage 获取用户 ID

        if (!userId) {
          alert('用户未登录');
          return;
        }

        const response = await axios.get(`https://124.222.156.13/api/mood/byDate`, {
          params: {
            date: formattedDate,
            userId: userId
          }
        });

        // 在这里打印 response.data
        console.log("Response Data:", response.data);

        // 按照时间从新到旧排序记录
        this.moodRecords = (response.data || []).map(record => ({
          ...record,
          moodRecord: record.moodRecord || {},
          imageUrls: record.imageUrls || [],
          aiResponse: record.aiResponse || '无 AI 回复'
        })).sort((a, b) => 
          new Date(b.moodRecord.recordTime) - new Date(a.moodRecord.recordTime)
        );


      } catch (error) {
        console.error("获取心情记录失败: ", error);
      }
    },

    // 确认删除心情记录
    confirmDelete(id) {
      if (confirm('确定要删除这条心情记录吗？')) {
        this.deleteMoodRecord(id);
      }
    },

    // 删除心情记录
    async deleteMoodRecord(id) {
      try {
        const userId = localStorage.getItem('userId'); // 获取用户 ID
        await axios.delete(`https://124.222.156.13/api/mood/delete/${id}`, {
          params: {
            userId: userId
          }
        });
        this.moodRecords = this.moodRecords.filter(record => record.moodRecord.id !== id); // 更新前端显示
      } catch (error) {
        console.error("删除记录失败: ", error);
      }
    },

    // 切换展开或收起记录
    toggleExpand(recordId) {
      this.expandedRecordId = this.expandedRecordId === recordId ? null : recordId;
    },

    // 选择日期并获取记录
    selectDate(date) {
      this.selectedDate = date;
      this.fetchMoodRecords(date);
    },

    // 格式化记录时间
    formatDate(dateStr) {
      return format(new Date(dateStr), 'yyyy年MM月dd日 HH:mm');
    },

    // 获取心情的情感倾向
    getSentiment(sentiment) {
      return sentiment === 1 ? '积极' : sentiment === -1 ? '消极' : '中性';
    },

    // 构建完整的图片 URL
    getFullImageUrl(imageUrl) {
      return `https://124.222.156.13/${imageUrl}`;
    }
  },

  // 页面加载时，自动获取用户的心情记录
  mounted() {
    const userId = localStorage.getItem('userId'); // 获取当前用户 ID

    if (!userId) {
      alert('用户未登录，请先登录');
      this.$router.push('/login'); // 如果没有用户 ID，重定向到登录页面
      return;
    }
    console.log("Current userId: ", userId); // 检查 userId 是否被正确获取

    this.fetchMoodRecords(this.selectedDate); // 加载当前日期的心情记录
  }
};
</script>


<style scoped>
.empty-message {
  color: #f5a623; /* 橙色 */
  font-family: 'Cinzel Decorative', serif;
  font-size: 18px;
  text-align: left; /* 左对齐 */
  margin-top: 20px; /* 添加一些间距 */
}

.view-mood-container {
  padding: 20px;
  background-color: #f9f9f9;
}

.mood-record {
  background: linear-gradient(135deg, #f5f7fa 0%, #d5f3f7 100%); /* 渐变背景 */
  border: none;
  border-radius: 15px; /* 更大圆角 */
  padding: 20px;
  margin-bottom: 20px;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1), 0 1px 4px rgba(0, 0, 0, 0.1); /* 更立体的阴影效果 */
  transition: all 0.3s ease; /* 过渡效果 */
}

.mood-record:hover {
  transform: translateY(-5px); /* 鼠标悬停时轻微上移 */
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2), 0 3px 8px rgba(0, 0, 0, 0.1); /* 加强悬浮时的阴影 */
}

.mood-info p {
  margin-bottom: 10px;
}

.mood-info .record-time {
  font-size: 14px; /* 缩小时间字体 */
  color: #999; /* 设置时间为较浅的颜色以弱化显示 */
  font-family: 'Cinzel Decorative', serif;
}

.mood-info .mood-text {
  font-size: 22px; /* 增大心情记录的字体 */
  font-weight: bold;
  color: #f5a623; /* 保持橙色 */
  font-family: 'Cinzel Decorative', serif;
}


.mood-details p {
  color: #f5a623;
  font-size: 16px;
  font-family: 'Cinzel Decorative', serif;
  line-height: 1.6;
}

.delete-btn {
  background-color: #ff4c4c;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 25px; /* 按钮也做圆角处理 */
  cursor: pointer;
  margin-top: 10px;
  box-shadow: 0px 4px 10px rgba(255, 76, 76, 0.4); /* 增加按钮的阴影效果 */
}

.delete-btn:hover {
  background-color: #ff1a1a;
  transform: scale(1.05); /* 鼠标悬浮时按钮略微放大 */
}

.mood-content {
  color: #555;
  font-size: 16px;
  margin-bottom: 15px;
}

/* 过渡效果 */
.expand-enter-active, .expand-leave-active {
  transition: all 0.3s ease;
}

.expand-enter, .expand-leave-to {
  transform: scaleY(0);
  opacity: 0;
}

.weather-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: linear-gradient(135deg, #f9f9f9 0%, #e1f1f7 100%);
  border-radius: 12px;
  padding: 15px;
  margin-bottom: 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.weather-status {
  display: flex;
  align-items: center;
  font-size: 18px;
  color: #b4b8b3; 
  margin-bottom: 10px;
}

.weather-status i {
  margin-right: 8px;
  font-size: 30px;
  color: #f3f8f7;
}

.weather-temp {
  font-size: 36px;
  font-weight: bold;
  background: -webkit-linear-gradient(#cdeef1, #67e8dd);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 10px;
}

.weather-detail {
  font-size: 14px;
  color: #666;
  padding: 8px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  text-align: center;
}

.location-info {
  display: flex;
  align-items: center;
  font-size: 16px;
  color: #4a90e2; /* 位置的文字颜色 */
  margin-top: 10px;
}

.location-info i {
  margin-right: 8px;
  font-size: 20px; /* 图标稍大 */
  color: #e74c3c; /* 图标的颜色设为红色 */
}

.location-text {
  font-family: 'Cinzel Decorative', serif; /* 保持字体风格一致 */
}

.mood-analysis {
  text-align: center;
  margin: 20px 0;
}

.sentiment-display {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.positive-label,
.negative-label {
  display: flex;
  align-items: center;
  font-size: 14px;
  color: #888;
}

.positive-label span,
.negative-label span {
  margin-left: 5px;
}

.sentiment-bar {
  position: relative;
  flex-grow: 1;
  height: 12px;
  background-color: #e0e0e0;
  border-radius: 6px;
  margin: 0 10px;
  overflow: hidden;
}

.sentiment-progress {
  height: 100%;
  background-color:  #f5a623;
}

.sentiment-percentage {
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 12px;
  color: #333;
}

.mood-score {
  font-size: 16px;
  margin-top: 10px;
  color: #333;
}

.mood-quote {
  color: #888888 !important; 
  font-size: 12px; 
  font-style: italic; 
  margin-top: 10px; 
  text-align: left; 
}

.image-gallery {
  display: flex;
  flex-wrap: wrap;
  margin-top: 15px;
  justify-content: start; /* 确保图片左对齐 */
}

.image-container {
  margin-right: 10px;
  margin-bottom: 10px;
  width: 150px; /* 调整容器的宽度，适应图片大小 */
  height: 150px; /* 调整容器的高度 */
}

.mood-image {
  width: 100%; /* 让图片宽度占满容器 */
  height: 100%; /* 让图片高度占满容器 */
  object-fit: cover; /* 保持图片比例，不拉伸变形 */
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.image-record-text {
  display: flex;
  align-items: center;
  font-size: 16px;
  color: #34e8be;
  margin-top: 10px;
}

/* 弹窗样式 */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  position: relative;
}

.full-image {
  max-width: 90vw;
  max-height: 90vh;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 20px;
  background: none;
  border: none;
  font-size: 30px;
  color: white;
  cursor: pointer;
}



</style>
</file>

<file path="moodbloom_vue/vue.config.js">
const { defineConfig } = require('@vue/cli-service')

module.exports = defineConfig({
  transpileDependencies: true,
  devServer: {
    proxy: {
      '/api': {
        target: 'https://124.222.156.13', // 目标服务器
        changeOrigin: true, // 修改源
        secure: false, // 如果是 HTTPS，请设置为 false
      },
    },
  },
})
</file>

<file path="README.md">
# MoodBloom
一款智能日记系统，可以写点东西~
</file>

</repository_files>
